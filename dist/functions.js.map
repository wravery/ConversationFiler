{"version":3,"sources":["webpack:///functions.js","webpack:///webpack/bootstrap 1b47e6ce53fe2ee0e49d?e45a*","webpack:///./src/functions.ts","webpack:///./src/messages.ts?666d","webpack:///./src/Data/Factory.ts?e834","webpack:///./src/Data/EWSData.ts?f495","webpack:///./src/Data/RESTData.ts?a7ff","webpack:///./src/Data/Model.ts?9d95*"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","116","ButtonFunctions","messages_1","Model_1","Factory_1","getDialogUrl","window","location","href","replace","functionsRegex","getAboutUrl","fileDialog","event","mailbox","Office","context","data","Factory","getData","notificationKey","console","log","getItemsAsync","results","length","item","notificationMessages","replaceAsync","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","message","icon","persistent","completed","removeAsync","DialogMessages","saveDialog","ui","displayDialogAsync","height","width","displayInIframe","result","dialog","onDialogComplete","resetDialog","addEventHandler","EventType","DialogMessageReceived","dialogEvent","JSON","parse","canceled","close","ProgressIndicator","moveItemsAsync","folderId","count","ErrorMessage","DialogEventReceived","progress","Data","Progress","aboutDialog","sendFeedback","displayNewMessageForm","toRecipients","subject","initialize","31","storedResults","localStorage","setItem","storageKey","stringify","loadDialog","getItem","removeItem","33","RESTData_1","EWSData_1","restUrl","RESTData","Model","EWSData","34","RequestBuilder","getItemsRequest","messages","builder","beginRequest","map","push","itemId","id","changeKey","endRequest","join","getFolderNamesRequest","folders","folder","moveItemsRequest","findConversationRequest","excludedFolderIdsRequest","Context","this","loadItems","onLoadComplete","onProgress","onError","_this","GetConversation","makeEwsRequestAsync","error","conversationXml","$","parseXML","getConversation","$conversation","querySelectorAll","filter","parents","parseInt","find","text","sameFolderItemIds","each","$this","attr","otherFolderItemIds","conversation","conversationId","items","global","loadExcludedFolders","excludedFolders","loadMessages","GetExcludedFolders","foldersXml","itemsXml","getMessages","$messages","parent","msg","querySelector","getAttribute","from","textContent","to","body","slice","loadFolderDisplayNames","folderNamesXml","getFolderDisplayNames","destinations_1","GetFolderNames","matches","parentNode","displayName","Id","BodyPreview","Sender","ToRecipients","ParentFolderId","DisplayName","removeDuplicates","moveItems","onMoveComplete","35","ExcludedFolders","getRestId","GetCallbackToken","getCallbackTokenAsync","isRest","status","AsyncResultStatus","Succeeded","collateRequests","requests","onDone","onFail","when","apply","done","_i","arguments","fail","diagnostics","hostName","convertToRestId","RestVersion","v2_0","token","restConversationId","ajax","url","async","dataType","headers","Authorization","getExcludedFolders","conversationMessages","currentFolderId","reduce","previousValue","undefined","Count","excludedFolderIds","getFolderNames","folderMap","entry","pop","forEach","messageCount","currentValue","folderCount","concat","EmailAddress","Name","address","method","contentType","DestinationId","4","item_1","sameFolderItems_1"],"mappings":"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","file":"functions.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 116);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 116:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar messages_1 = __webpack_require__(31);\r\nvar Model_1 = __webpack_require__(4);\r\nvar Factory_1 = __webpack_require__(33);\r\nvar ButtonFunctions;\r\n(function (ButtonFunctions) {\r\n    var functionsRegex = /\\/functions\\.html(\\?.*)?$/i;\r\n    function getDialogUrl() {\r\n        return window.location.href.replace(functionsRegex, \"/dialog.html\");\r\n    }\r\n    function getAboutUrl() {\r\n        return window.location.href.replace(functionsRegex, \"/about.html\");\r\n    }\r\n    function fileDialog(event) {\r\n        var mailbox = Office.context.mailbox;\r\n        var data = Factory_1.Factory.getData(mailbox);\r\n        var notificationKey = 'conversationFilerNotification';\r\n        console.log('Starting to load the conversation...');\r\n        data.getItemsAsync(function (results) {\r\n            console.log(\"Loaded the conversation: \" + results.length);\r\n            if (results.length === 0) {\r\n                // Special case for empty results\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                    message: \"It looks like you haven't filed this conversation anywhere before.\",\r\n                    icon: 'file-icon-16',\r\n                    persistent: false\r\n                });\r\n                event.completed();\r\n                return;\r\n            }\r\n            console.log('Showing the dialog...');\r\n            mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n            messages_1.DialogMessages.saveDialog(results);\r\n            Office.context.ui.displayDialogAsync(getDialogUrl(), { height: 40, width: 50, displayInIframe: true }, function (result) {\r\n                var dialog = result.value;\r\n                var onDialogComplete = function () {\r\n                    messages_1.DialogMessages.resetDialog();\r\n                    event.completed();\r\n                };\r\n                dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (dialogEvent) {\r\n                    var message = JSON.parse(dialogEvent.message);\r\n                    if (message.canceled) {\r\n                        console.log('Dialog canceled');\r\n                        dialog.close();\r\n                        onDialogComplete();\r\n                        return;\r\n                    }\r\n                    console.log('Moving the items...');\r\n                    dialog.close();\r\n                    mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                        message: 'Moving the items in this conversation...'\r\n                    });\r\n                    data.moveItemsAsync(message.folderId, function (count) {\r\n                        console.log(\"Finished moving the items: \" + count);\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                            message: 'I moved the items in this conversation, but there might be a short delay before that shows up in Outlook.',\r\n                            icon: 'file-icon-16',\r\n                            persistent: false\r\n                        });\r\n                        onDialogComplete();\r\n                    }, function (message) {\r\n                        console.log(\"Error moving the items: \" + message);\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                            message: \"Something went wrong, I couldn't move the messages.\"\r\n                        });\r\n                        onDialogComplete();\r\n                    });\r\n                });\r\n                dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                    onDialogComplete();\r\n                });\r\n            });\r\n        }, function (progress) {\r\n            console.log(\"Progress loading the conversation: \" + Model_1.Data.Progress[progress]);\r\n            // Update the progress indicator\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                message: 'Finding the messages in this conversation...'\r\n            });\r\n        }, function (message) {\r\n            console.log(\"Error loading the conversation: \" + message);\r\n            // Display an error\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                message: \"Sorry, I couldn't figure out where this message should go.\"\r\n            });\r\n            event.completed();\r\n        });\r\n    }\r\n    ButtonFunctions.fileDialog = fileDialog;\r\n    function aboutDialog(event) {\r\n        Office.context.ui.displayDialogAsync(getAboutUrl(), { height: 40, width: 25, displayInIframe: true }, function (result) {\r\n            var dialog = result.value;\r\n            var onDialogComplete = function () {\r\n                event.completed();\r\n            };\r\n            dialog.addEventHandler(Office.EventType.DialogMessageReceived, function () {\r\n                console.log('Dialog closed with button');\r\n                dialog.close();\r\n                event.completed();\r\n            });\r\n            dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                console.log('Dialog closed');\r\n                event.completed();\r\n            });\r\n        });\r\n    }\r\n    ButtonFunctions.aboutDialog = aboutDialog;\r\n    function sendFeedback(event) {\r\n        Office.context.mailbox.displayNewMessageForm({\r\n            toRecipients: ['wravery@hotmail.com'],\r\n            subject: 'Conversation Filer v2.0 App for Outlook'\r\n        });\r\n        event.completed();\r\n    }\r\n    ButtonFunctions.sendFeedback = sendFeedback;\r\n})(ButtonFunctions || (ButtonFunctions = {}));\r\nOffice.initialize = function () {\r\n    // Add the UI-less function callbacks to the window\r\n    window.fileDialog = ButtonFunctions.fileDialog;\r\n    window.aboutDialog = ButtonFunctions.aboutDialog;\r\n    window.sendFeedback = ButtonFunctions.sendFeedback;\r\n};\r\n\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DialogMessages;\r\n(function (DialogMessages) {\r\n    var storageKey = \"conversationFilerMatches\";\r\n    function saveDialog(storedResults) {\r\n        window.localStorage.setItem(storageKey, JSON.stringify(storedResults));\r\n    }\r\n    DialogMessages.saveDialog = saveDialog;\r\n    function loadDialog() {\r\n        return JSON.parse(window.localStorage.getItem(storageKey));\r\n    }\r\n    DialogMessages.loadDialog = loadDialog;\r\n    function resetDialog() {\r\n        window.localStorage.removeItem(storageKey);\r\n    }\r\n    DialogMessages.resetDialog = resetDialog;\r\n})(DialogMessages = exports.DialogMessages || (exports.DialogMessages = {}));\r\n\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RESTData_1 = __webpack_require__(35);\r\nvar EWSData_1 = __webpack_require__(34);\r\nvar Factory;\r\n(function (Factory) {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    function getData(mailbox) {\r\n        return mailbox.restUrl\r\n            ? new RESTData_1.RESTData.Model(mailbox)\r\n            : new EWSData_1.EWSData.Model(mailbox);\r\n    }\r\n    Factory.getData = getData;\r\n})(Factory = exports.Factory || (exports.Factory = {}));\r\n\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(4);\r\nvar EWSData;\r\n(function (EWSData) {\r\n    var RequestBuilder = (function () {\r\n        function RequestBuilder() {\r\n        }\r\n        RequestBuilder.getItemsRequest = function (messages) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:GetItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.getFolderNamesRequest = function (folders) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n            folders.map(function (folder) {\r\n                builder.push(\"      <t:FolderId Id=\\\"\" + folder.folderId.id + \"\\\" ChangeKey=\\\"\" + folder.folderId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:FolderIds>', '  </m:GetFolder >', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.moveItemsRequest = function (messages, folderId) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:MoveItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        return RequestBuilder;\r\n    }());\r\n    RequestBuilder.beginRequest = [\r\n        '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n        '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n        '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n        '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n        '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n        '<soap:Header>',\r\n        '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n        '</soap:Header>',\r\n        '<soap:Body>',\r\n    ].join('\\n');\r\n    RequestBuilder.endRequest = [\r\n        '</soap:Body>',\r\n        '</soap:Envelope>'\r\n    ].join('\\n');\r\n    RequestBuilder.findConversationRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:FindConversation>',\r\n        '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n        '    <m:ParentFolderId>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '    </m:ParentFolderId>',\r\n        '  </m:FindConversation>',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    RequestBuilder.excludedFolderIdsRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:GetFolder>',\r\n        '    <m:FolderShape>',\r\n        '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n        '    </m:FolderShape>',\r\n        '    <m:FolderIds>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n        '    </m:FolderIds>',\r\n        '  </m:GetFolder >',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n            this.itemId = this.mailbox.item.itemId;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                _this.conversationXml = $.parseXML(result.value);\r\n                _this.getConversation();\r\n            });\r\n        };\r\n        Context.prototype.getConversation = function () {\r\n            var _this = this;\r\n            var $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(\"[Id=\\\"\" + this.mailbox.item.itemId + \"\\\"]\")\r\n                .parents('Conversation');\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n            var messageCount = parseInt($conversation.find('MessageCount').text());\r\n            var globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            var sameFolderItemIds = [];\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            var otherFolderItemIds = [];\r\n            $conversation.find('GlobalItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            if (!sameFolderItemIds.length || otherFolderItemIds.length <= sameFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversation = {\r\n                id: this.mailbox.item.conversationId,\r\n                items: sameFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); }),\r\n                global: otherFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); })\r\n            };\r\n            this.loadExcludedFolders();\r\n        };\r\n        Context.prototype.loadExcludedFolders = function () {\r\n            var _this = this;\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            }\r\n            else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    var foldersXml = $.parseXML(result.value);\r\n                    var excludedFolders = [];\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.excludedFolders = excludedFolders;\r\n                    _this.loadMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.loadMessages = function () {\r\n            var _this = this;\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            }\r\n            else {\r\n                console.log(\"Getting the messages in other folders: \" + this.conversation.global.length);\r\n                this.onProgress(Model_1.Data.Progress.GetConversation);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.itemsXml = $.parseXML(result.value);\r\n                    _this.getMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getMessages = function () {\r\n            var $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'))\r\n                .parent();\r\n            this.conversation.global.map(function (item) {\r\n                for (var i = 0; i < $messages.length; i++) {\r\n                    var msg = $messages[i];\r\n                    if (msg.querySelector(\"ItemId[Id=\\\"\" + item.itemId.id + \"\\\"]\")) {\r\n                        var folderId = msg.querySelector('ParentFolderId');\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            this.loadFolderDisplayNames();\r\n        };\r\n        Context.prototype.loadFolderDisplayNames = function () {\r\n            var _this = this;\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            }\r\n            else {\r\n                var destinations_1 = [];\r\n                this.conversation.global.map(function (item) {\r\n                    if (item.folder) {\r\n                        destinations_1.push(item.folder);\r\n                    }\r\n                });\r\n                if (!destinations_1.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n                console.log(\"Getting the display names of the other folders: \" + destinations_1.length);\r\n                this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations_1), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.folderNamesXml = $.parseXML(result.value);\r\n                    _this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getFolderDisplayNames = function () {\r\n            var _this = this;\r\n            var matches = [];\r\n            this.conversation.global.map(function (item) {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n                var folder = _this.folderNamesXml.querySelector(\"GetFolderResponseMessage > Folders > Folder > FolderId[Id=\\\"\" + item.folder.folderId.id + \"\\\"]\").parentNode;\r\n                item.folder.displayName = folder.querySelector('DisplayName').textContent;\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"Finished loading items in other folders: \" + matches.length);\r\n            this.onLoadComplete(Model_1.Data.removeDuplicates(matches, this.itemId, this.excludedFolders.map(function (value) { return value.folderId.id; })));\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                console.log(\"Finished moving items to other folder: \" + _this.conversation.items.length);\r\n                _this.onMoveComplete(_this.conversation.items.length);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    EWSData.Model = Model;\r\n})(EWSData = exports.EWSData || (exports.EWSData = {}));\r\n\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(4);\r\nvar RESTData;\r\n(function (RESTData) {\r\n    var Endpoint = '/v2.0/me';\r\n    var ExcludedFolders;\r\n    (function (ExcludedFolders) {\r\n        ExcludedFolders[ExcludedFolders[\"Inbox\"] = 0] = \"Inbox\";\r\n        ExcludedFolders[ExcludedFolders[\"Drafts\"] = 1] = \"Drafts\";\r\n        ExcludedFolders[ExcludedFolders[\"SentItems\"] = 2] = \"SentItems\";\r\n        ExcludedFolders[ExcludedFolders[\"DeletedItems\"] = 3] = \"DeletedItems\";\r\n        // Sentinel value for enumerating the folder names\r\n        ExcludedFolders[ExcludedFolders[\"Count\"] = 4] = \"Count\";\r\n    })(ExcludedFolders || (ExcludedFolders = {}));\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n            this.itemId = this.getRestId(this.mailbox.item.itemId);\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Model_1.Data.Progress.GetCallbackToken);\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    _this.getConversation(result);\r\n                }\r\n                else {\r\n                    _this.onError(result.error.message);\r\n                }\r\n            });\r\n        };\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        Context.prototype.collateRequests = function (requests, onDone, onFail) {\r\n            var _this = this;\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done(function () {\r\n                    var results = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        results[_i] = arguments[_i];\r\n                    }\r\n                    onDone(results.map(function (result) { return result[0]; }));\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n            else {\r\n                requests[0]\r\n                    .done(function (result) {\r\n                    onDone([result]);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n        };\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        Context.prototype.getRestId = function (itemId) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        };\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        Context.prototype.getConversation = function (result) {\r\n            var _this = this;\r\n            this.token = result.value;\r\n            var conversationId = this.mailbox.item.conversationId;\r\n            var restConversationId = this.getRestId(conversationId);\r\n            var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/messages?$filter=ConversationId eq '\" + restConversationId + \"'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId\";\r\n            console.log(\"Getting the list of items in the conversation: \" + restUrl);\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': \"Bearer \" + this.token }\r\n            }).done(function (result) {\r\n                _this.getExcludedFolders(result);\r\n            }).fail(function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        Context.prototype.getExcludedFolders = function (result) {\r\n            var _this = this;\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversationMessages = result.value;\r\n            console.log(\"Messages in the conversation: \" + this.conversationMessages.length);\r\n            // Get the current folderId.\r\n            var currentFolderId = this.conversationMessages\r\n                .filter(function (value) { return value.Id === _this.itemId; })\r\n                .reduce(function (previousValue, value) { return value.ParentFolderId; }, undefined);\r\n            // We should exclude some special folders, but we need to get their folderIds.\r\n            var requests = [];\r\n            for (var i = 0; i < ExcludedFolders.Count; ++i) {\r\n                var folderId = ExcludedFolders[i];\r\n                var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + folderId + \"?$select=Id\";\r\n                console.log(\"Getting excluded folder ID: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + this.token }\r\n                }));\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n            this.collateRequests(requests, function (results) {\r\n                var excludedFolderIds = results.map(function (value) { return value.Id; });\r\n                _this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        Context.prototype.getFolderNames = function (currentFolderId, excludedFolderIds) {\r\n            var _this = this;\r\n            ;\r\n            var folderMap = this.conversationMessages\r\n                .reduce(function (previousValue, message) {\r\n                var entry = previousValue\r\n                    .filter(function (value) { return value.folder.Id === message.ParentFolderId; })\r\n                    .pop();\r\n                if (entry) {\r\n                    // Add this message to the existing entry.\r\n                    entry.messages.push(message);\r\n                }\r\n                else {\r\n                    // Create a new entry for this folder.\r\n                    previousValue.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n                }\r\n                return previousValue;\r\n            }, []);\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n            var requests = folderMap\r\n                .filter(function (entry) { return !_this.excludedFolderIds.reduce(function (previousValue, value) {\r\n                return previousValue || value === entry.folder.Id;\r\n            }, false); })\r\n                .map(function (entry) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + entry.folder.Id + \"?$select=Id,DisplayName\";\r\n                console.log(\"Getting included folder name: \" + restUrl);\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                });\r\n            });\r\n            if (requests.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n            this.collateRequests(requests, function (results) {\r\n                results.forEach(function (value) {\r\n                    for (var i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                var messageCount = folderMap.reduce(function (previousValue, currentValue) { return previousValue + currentValue.messages.length; }, 0);\r\n                var folderCount = folderMap.length;\r\n                console.log(\"Found \" + messageCount + \" message(s) in \" + folderCount + \" folder(s)\");\r\n                var matches = folderMap.reduce(function (previousValue, currentValue) {\r\n                    return previousValue.concat(currentValue.messages.map(function (item) { return ({\r\n                        message: {\r\n                            Id: item.Id,\r\n                            BodyPreview: item.BodyPreview,\r\n                            Sender: item.Sender.EmailAddress.Name,\r\n                            ToRecipients: item.ToRecipients.map(function (address) { return address.EmailAddress.Name; }).join('; '),\r\n                            ParentFolderId: item.ParentFolderId\r\n                        },\r\n                        folder: {\r\n                            Id: currentValue.folder.Id,\r\n                            DisplayName: currentValue.folder.DisplayName\r\n                        }\r\n                    }); }));\r\n                }, []);\r\n                console.log(\"Finished loading items: \" + matches.length);\r\n                _this.onLoadComplete(Model_1.Data.removeDuplicates(matches, _this.itemId, _this.excludedFolderIds));\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            var requests = this.conversationMessages\r\n                .filter(function (message) { return message.ParentFolderId !== _this.currentFolderId; })\r\n                .map(function (message) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/messages/\" + message.Id + \"/move\";\r\n                console.log(\"Moving item: \" + restUrl);\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                });\r\n            });\r\n            this.collateRequests(requests, function (results) {\r\n                console.log(\"Finished moving items to other folder: \" + results.length);\r\n                _this.onMoveComplete(results.length);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    RESTData.Model = Model;\r\n})(RESTData = exports.RESTData || (exports.RESTData = {}));\r\n\n\n/***/ }),\n\n/***/ 4:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Data;\r\n(function (Data) {\r\n    var Progress;\r\n    (function (Progress) {\r\n        Progress[Progress[\"GetCallbackToken\"] = 0] = \"GetCallbackToken\";\r\n        Progress[Progress[\"GetConversation\"] = 1] = \"GetConversation\";\r\n        Progress[Progress[\"GetExcludedFolders\"] = 2] = \"GetExcludedFolders\";\r\n        Progress[Progress[\"GetFolderNames\"] = 3] = \"GetFolderNames\";\r\n        Progress[Progress[\"Success\"] = 4] = \"Success\";\r\n        Progress[Progress[\"NotFound\"] = 5] = \"NotFound\";\r\n        Progress[Progress[\"Error\"] = 6] = \"Error\";\r\n    })(Progress = Data.Progress || (Data.Progress = {}));\r\n    function removeDuplicates(results, itemId, excludedFolderIds) {\r\n        if (itemId) {\r\n            var item_1 = results\r\n                .filter(function (item) { return item.message.Id === itemId; })\r\n                .pop();\r\n            if (item_1) {\r\n                console.log(\"Removing duplicates: \" + results.length + \" original message(s)\");\r\n                // Find all of the items in the same folder, we want to remove all of their duplicates.\r\n                var sameFolderItems_1 = results.filter(function (result) { return result.message.ParentFolderId === item_1.message.ParentFolderId; });\r\n                console.log(\"Messages in the same folder: \" + sameFolderItems_1.length + \" message(s)\");\r\n                // Remove all items that are in the same folder.\r\n                results = results.filter(function (result) {\r\n                    if (result.folder.Id === item_1.message.ParentFolderId) {\r\n                        console.log(\"Removed message in the same folder: \" + result.message.Id);\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n                // Remove all items that are in another excluded folder.\r\n                results = results.filter(function (result) {\r\n                    if (excludedFolderIds.reduce(function (previousValue, currentValue) { return previousValue || currentValue === result.folder.Id; }, false)) {\r\n                        console.log(\"Removed message in an excluded folder: \" + result.message.Id);\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n                // Remove all items that match an item in the same folder.\r\n                results = results.filter(function (result) {\r\n                    if (sameFolderItems_1.reduce(function (previousValue, value) { return previousValue ||\r\n                        (result.message.Sender === value.message.Sender &&\r\n                            result.message.ToRecipients === value.message.ToRecipients &&\r\n                            result.message.BodyPreview === value.message.BodyPreview); }, false)) {\r\n                        console.log(\"Removed duplicate message in other folder: \" + item_1.message.Id);\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n                console.log(\"Remaining in other folders: \" + results.length + \" distinct message(s)\");\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    Data.removeDuplicates = removeDuplicates;\r\n})(Data = exports.Data || (exports.Data = {}));\r\n\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// functions.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 116);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1b47e6ce53fe2ee0e49d","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { DialogMessages } from \"./messages\";\r\n\r\nimport { Data } from \"./Data/Model\";\r\nimport { Factory } from \"./Data/Factory\";\r\n\r\nimport { ConversationFilerDialog } from \"./components/ConversationFilerDialog\";\r\n\r\nmodule ButtonFunctions {\r\n    const functionsRegex = /\\/functions\\.html(\\?.*)?$/i;\r\n\r\n    function getDialogUrl(): string {\r\n        return window.location.href.replace(functionsRegex, \"/dialog.html\");\r\n    }\r\n\r\n    function getAboutUrl(): string {\r\n        return window.location.href.replace(functionsRegex, \"/about.html\");\r\n    }\r\n\r\n    export function fileDialog(event: any) {\r\n        const mailbox = Office.context.mailbox;\r\n        const data = Factory.getData(mailbox);\r\n        const notificationKey = 'conversationFilerNotification';\r\n\r\n        console.log('Starting to load the conversation...');\r\n\r\n        data.getItemsAsync((results) => {\r\n            console.log(`Loaded the conversation: ${results.length}`);\r\n\r\n            if (results.length === 0) {\r\n                // Special case for empty results\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                    message: `It looks like you haven't filed this conversation anywhere before.`,\r\n                    icon: 'file-icon-16',\r\n                    persistent: false\r\n                });\r\n                event.completed();\r\n\r\n                return;\r\n            }\r\n\r\n            console.log('Showing the dialog...');\r\n\r\n            mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n            DialogMessages.saveDialog(results);\r\n            Office.context.ui.displayDialogAsync(getDialogUrl(), { height: 40, width: 50, displayInIframe: true }, (result) => {\r\n                const dialog = <Office.DialogHandler>result.value;\r\n                const onDialogComplete = () => {\r\n                    DialogMessages.resetDialog();\r\n                    event.completed();\r\n                };\r\n\r\n                dialog.addEventHandler(Office.EventType.DialogMessageReceived, (dialogEvent: { message: string }) => {\r\n                    const message = <DialogMessages.FileDialogMessage>JSON.parse(dialogEvent.message);\r\n\r\n                    if (message.canceled) {\r\n                        console.log('Dialog canceled');\r\n\r\n                        dialog.close();\r\n                        onDialogComplete();\r\n                        return;\r\n                    }\r\n\r\n                    console.log('Moving the items...');\r\n\r\n                    dialog.close();\r\n                    mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                        type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                        message: 'Moving the items in this conversation...'\r\n                    });\r\n\r\n                    data.moveItemsAsync(message.folderId, (count) => {\r\n                        console.log(`Finished moving the items: ${count}`);\r\n\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                            message: 'I moved the items in this conversation, but there might be a short delay before that shows up in Outlook.',\r\n                            icon: 'file-icon-16',\r\n                            persistent: false\r\n                        });\r\n\r\n                        onDialogComplete();\r\n                    }, (message) => {\r\n                        console.log(`Error moving the items: ${message}`);\r\n\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                            message: `Something went wrong, I couldn't move the messages.`\r\n                        });\r\n                        onDialogComplete();\r\n                    });\r\n                });\r\n\r\n                dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\r\n                    onDialogComplete();\r\n                });\r\n            });\r\n        }, (progress) => {\r\n            console.log(`Progress loading the conversation: ${Data.Progress[progress]}`);\r\n\r\n            // Update the progress indicator\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                message: 'Finding the messages in this conversation...'\r\n            });\r\n        }, (message) => {\r\n            console.log(`Error loading the conversation: ${message}`);\r\n\r\n            // Display an error\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                message: `Sorry, I couldn't figure out where this message should go.`\r\n            });\r\n\r\n            event.completed();\r\n        });\r\n    }\r\n\r\n    export function aboutDialog(event: any) {\r\n        Office.context.ui.displayDialogAsync(getAboutUrl(), { height: 40, width: 25, displayInIframe: true }, (result) => {\r\n            const dialog = <Office.DialogHandler>result.value;\r\n            const onDialogComplete = () => {\r\n                event.completed();\r\n            };\r\n\r\n            dialog.addEventHandler(Office.EventType.DialogMessageReceived, () => {\r\n                console.log('Dialog closed with button');\r\n\r\n                dialog.close();\r\n                event.completed();\r\n            });\r\n\r\n            dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\r\n                console.log('Dialog closed');\r\n\r\n                event.completed();\r\n            });\r\n        });\r\n    }\r\n\r\n    export function sendFeedback(event: any) {\r\n        Office.context.mailbox.displayNewMessageForm({\r\n            toRecipients: [ 'wravery@hotmail.com' ],\r\n            subject: 'Conversation Filer v2.0 App for Outlook'\r\n        });\r\n\r\n        event.completed();\r\n    }\r\n}\r\n\r\nOffice.initialize = function () {\r\n    // Add the UI-less function callbacks to the window\r\n    (<any>window).fileDialog = ButtonFunctions.fileDialog;\r\n    (<any>window).aboutDialog = ButtonFunctions.aboutDialog;\r\n    (<any>window).sendFeedback = ButtonFunctions.sendFeedback;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/functions.ts","import { Data } from \"./Data/Model\";\r\n\r\nexport module DialogMessages {\r\n    const storageKey = \"conversationFilerMatches\";\r\n\r\n    export function saveDialog(storedResults: Data.Match[]) {\r\n        window.localStorage.setItem(storageKey, JSON.stringify(storedResults));\r\n    }\r\n\r\n    export function loadDialog() {\r\n        return JSON.parse(window.localStorage.getItem(storageKey)) as Data.Match[];\r\n    }\r\n\r\n    export function resetDialog() {\r\n        window.localStorage.removeItem(storageKey);\r\n    }\r\n\r\n    export interface FileDialogMessage {\r\n        canceled: boolean;\r\n        folderId?: string;\r\n    }\r\n\r\n    export interface AboutDialogMessage {\r\n        canceled: boolean;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/messages.ts","import { Data } from \"./Model\";\r\nimport { RESTData } from \"./RESTData\";\r\nimport { EWSData } from \"./EWSData\";\r\n\r\nexport module Factory {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    export function getData(mailbox: Office.Mailbox): Data.IModel {\r\n        return mailbox.restUrl\r\n            ? new RESTData.Model(mailbox)\r\n            : new EWSData.Model(mailbox);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Factory.ts","import { Data } from \"./Model\";\r\n\r\nexport module EWSData {\r\n    interface ItemId {\r\n        id: string;\r\n        changeKey: string;\r\n    }\r\n\r\n    interface FolderData {\r\n        folderId: ItemId;\r\n        displayName?: string;\r\n    }\r\n\r\n    interface MessageData {\r\n        itemId: ItemId;\r\n        conversation: ConversationData;\r\n        folder?: FolderData;\r\n        body?: string;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n\r\n    interface ConversationData {\r\n        id: string;\r\n        items: MessageData[];\r\n        global: MessageData[];\r\n    }\r\n\r\n    class RequestBuilder {\r\n        private static beginRequest = [\r\n            '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n            '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n            '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n            '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n            '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n            '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n            '<soap:Header>',\r\n            '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n            '</soap:Header>',\r\n            '<soap:Body>',\r\n        ].join('\\n');\r\n\r\n        private static endRequest = [\r\n            '</soap:Body>',\r\n            '</soap:Envelope>'\r\n        ].join('\\n');\r\n\r\n        static findConversationRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:FindConversation>',\r\n            '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n            '    <m:ParentFolderId>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '    </m:ParentFolderId>',\r\n            '  </m:FindConversation>',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getItemsRequest(messages: MessageData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:GetItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static excludedFolderIdsRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:GetFolder>',\r\n            '    <m:FolderShape>',\r\n            '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n            '    </m:FolderShape>',\r\n            '    <m:FolderIds>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n            '    </m:FolderIds>',\r\n            '  </m:GetFolder >',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getFolderNamesRequest(folders: FolderData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n\r\n            folders.map(folder => {\r\n                builder.push(`      <t:FolderId Id=\"${folder.folderId.id}\" ChangeKey=\"${folder.folderId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:FolderIds>',\r\n                '  </m:GetFolder >',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static moveItemsRequest(messages: MessageData[], folderId: string) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:MoveItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n            this.itemId = (<Office.ItemRead>this.mailbox.item).itemId;\r\n        }\r\n\r\n        private itemId: string;\r\n        private conversationXml?: XMLDocument;\r\n        private conversation?: ConversationData;\r\n        private excludedFolders?: FolderData[];\r\n        private itemsXml?: XMLDocument;\r\n        private folderNamesXml?: XMLDocument;\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                this.conversationXml = $.parseXML(result.value);\r\n                this.getConversation();\r\n            });\r\n        }\r\n\r\n        private getConversation() {\r\n            const $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(`[Id=\"${(<Office.ItemRead>this.mailbox.item).itemId}\"]`)\r\n                .parents('Conversation');\r\n\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n\r\n            const messageCount = parseInt($conversation.find('MessageCount').text());\r\n            const globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            let sameFolderItemIds: ItemId[] = [];\r\n\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                const $this = $(this);\r\n\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            let otherFolderItemIds: ItemId[] = [];\r\n\r\n            $conversation.find('GlobalItemIds > ItemId').each(function () {\r\n                const $this = $(this);\r\n\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            if (!sameFolderItemIds.length || otherFolderItemIds.length <= sameFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversation = {\r\n                id: (<Office.Message>this.mailbox.item).conversationId,\r\n                items: sameFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation })),\r\n                global: otherFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation }))\r\n            };\r\n\r\n            this.loadExcludedFolders();\r\n        }\r\n\r\n        private loadExcludedFolders() {\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            } else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    let foldersXml = $.parseXML(result.value);\r\n                    let excludedFolders: FolderData[] = [];\r\n\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    this.excludedFolders = excludedFolders;\r\n\r\n                    this.loadMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private loadMessages() {\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            } else {\r\n                console.log(`Getting the messages in other folders: ${this.conversation.global.length}`);\r\n                this.onProgress(Data.Progress.GetConversation);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.itemsXml = $.parseXML(result.value);\r\n                    this.getMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getMessages() {\r\n            let $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'))\r\n                .parent();\r\n\r\n            this.conversation.global.map(item => {\r\n                for (let i = 0; i < $messages.length; i++) {\r\n                    const msg = $messages[i];\r\n\r\n                    if (msg.querySelector(`ItemId[Id=\"${item.itemId.id}\"]`)) {\r\n                        let folderId = msg.querySelector('ParentFolderId');\r\n\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.loadFolderDisplayNames();\r\n        }\r\n\r\n        private loadFolderDisplayNames() {\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            } else {\r\n                let destinations: FolderData[] = [];\r\n\r\n                this.conversation.global.map(item => {\r\n                    if (item.folder) {\r\n                        destinations.push(item.folder);\r\n                    }\r\n                });\r\n\r\n                if (!destinations.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Getting the display names of the other folders: ${destinations.length}`);\r\n                this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.folderNamesXml = $.parseXML(result.value);\r\n                    this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getFolderDisplayNames() {\r\n            let matches: Data.Match[] = [];\r\n\r\n            this.conversation.global.map((item: MessageData) => {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n\r\n                const folder = this.folderNamesXml.querySelector(`GetFolderResponseMessage > Folders > Folder > FolderId[Id=\"${item.folder.folderId.id}\"]`).parentNode;\r\n                item.folder.displayName = (<Element>folder).querySelector('DisplayName').textContent;\r\n\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n\r\n            console.log(`Finished loading items in other folders: ${matches.length}`);\r\n            this.onLoadComplete(Data.removeDuplicates(matches, this.itemId, this.excludedFolders.map(value => value.folderId.id)));\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Finished moving items to other folder: ${this.conversation.items.length}`);\r\n                this.onMoveComplete(this.conversation.items.length);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/EWSData.ts","import { Data } from \"./Model\";\r\n\r\nexport module RESTData {\r\n    const Endpoint = '/v2.0/me';\r\n\r\n    enum ExcludedFolders {\r\n        Inbox,\r\n        Drafts,\r\n        SentItems,\r\n        DeletedItems,\r\n\r\n        // Sentinel value for enumerating the folder names\r\n        Count\r\n    }\r\n\r\n    interface EmailAddressJson {\r\n        Name: string;\r\n        Address: string;\r\n    }\r\n\r\n    interface AddressJson {\r\n        EmailAddress: EmailAddressJson;\r\n    }\r\n\r\n    interface MessageJson {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: AddressJson;\r\n        ToRecipients: AddressJson[];\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    interface MessageJsonCollection {\r\n        value: MessageJson[];\r\n    }\r\n\r\n    interface FolderJson {\r\n        Id: string;\r\n        DisplayName?: string;\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n            this.itemId = this.getRestId((<Office.ItemRead>this.mailbox.item).itemId);\r\n        }\r\n\r\n        private itemId: string;\r\n        private token?: string;\r\n        private currentFolderId?: string;\r\n        private conversationMessages?: MessageJson[];\r\n        private excludedFolderIds?: string[];\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Data.Progress.GetCallbackToken);\r\n\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true },\r\n                (result: Office.AsyncResult) => {\r\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                        this.getConversation(result);\r\n                    } else {\r\n                        this.onError(result.error.message);\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        private collateRequests<T>(requests: JQueryPromise<T>[], onDone: (results: T[]) => void, onFail: (message: string) => void): void {\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done((...results: any[]) => {\r\n                        onDone(results.map(result => <T>result[0]));\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            } else {\r\n                requests[0]\r\n                    .done((result: T) => {\r\n                        onDone([result]);\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            }\r\n        }\r\n\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        private getRestId(itemId: string) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        }\r\n\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        private getConversation(result: Office.AsyncResult) {\r\n            this.token = <string>result.value;\r\n\r\n            const conversationId = (<Office.Message>this.mailbox.item).conversationId;\r\n            const restConversationId = this.getRestId(conversationId);\r\n            const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages?$filter=ConversationId eq '${restConversationId}'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId`;\r\n\r\n            console.log(`Getting the list of items in the conversation: ${restUrl}`);\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': `Bearer ${this.token}` }\r\n            }).done((result: MessageJsonCollection) => {\r\n                this.getExcludedFolders(result);\r\n            }).fail((message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        private getExcludedFolders(result: MessageJsonCollection) {\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversationMessages = result.value;\r\n\r\n            console.log(`Messages in the conversation: ${this.conversationMessages.length}`);\r\n\r\n            // Get the current folderId.\r\n            const currentFolderId = this.conversationMessages\r\n                .filter(value => value.Id === this.itemId)\r\n                .reduce((previousValue: string, value) => value.ParentFolderId, undefined);\r\n\r\n            // We should exclude some special folders, but we need to get their folderIds.\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            for (let i = 0; i < ExcludedFolders.Count; ++i) {\r\n                const folderId = ExcludedFolders[i];\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${folderId}?$select=Id`;\r\n\r\n                console.log(`Getting excluded folder ID: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            }\r\n\r\n            this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results) => {\r\n                const excludedFolderIds = results.map(value => value.Id);\r\n\r\n                this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, (message) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        private getFolderNames(currentFolderId: string, excludedFolderIds: string[]) {\r\n            interface folderMapEntry {\r\n                folder: FolderJson;\r\n                messages: MessageJson[];\r\n            };\r\n\r\n            const folderMap = this.conversationMessages\r\n                .reduce((previousValue: folderMapEntry[], message) => {\r\n                    const entry = previousValue\r\n                        .filter(value => value.folder.Id === message.ParentFolderId)\r\n                        .pop();\r\n\r\n                    if (entry) {\r\n                        // Add this message to the existing entry.\r\n                        entry.messages.push(message);\r\n                    } else {\r\n                        // Create a new entry for this folder.\r\n                        previousValue.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n                    }\r\n\r\n                    return previousValue;\r\n                }, []);\r\n\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n\r\n            const requests = folderMap\r\n                .filter(entry => !this.excludedFolderIds.reduce((previousValue, value) =>\r\n                    previousValue || value === entry.folder.Id, false))\r\n                .map((entry) => {\r\n                    const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${entry.folder.Id}?$select=Id,DisplayName`;\r\n\r\n                    console.log(`Getting included folder name: ${restUrl}`);\r\n\r\n                    return $.ajax({\r\n                        url: restUrl,\r\n                        async: true,\r\n                        dataType: 'json',\r\n                        headers: { 'Authorization': `Bearer ${this.token}` }\r\n                    });\r\n                });\r\n\r\n            if (requests.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\r\n                results.forEach((value) => {\r\n                    for (let i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const messageCount = folderMap.reduce((previousValue, currentValue) => previousValue + currentValue.messages.length, 0);\r\n                const folderCount = folderMap.length;\r\n\r\n                console.log(`Found ${messageCount} message(s) in ${folderCount} folder(s)`);\r\n\r\n                const matches = folderMap.reduce((previousValue: Data.Match[], currentValue) =>\r\n                    previousValue.concat(currentValue.messages.map(item => (<Data.Match>{\r\n                        message: {\r\n                            Id: item.Id,\r\n                            BodyPreview: item.BodyPreview,\r\n                            Sender: item.Sender.EmailAddress.Name,\r\n                            ToRecipients: item.ToRecipients.map(address => address.EmailAddress.Name).join('; '),\r\n                            ParentFolderId: item.ParentFolderId\r\n                        },\r\n                        folder: {\r\n                            Id: currentValue.folder.Id,\r\n                            DisplayName: currentValue.folder.DisplayName\r\n                        }\r\n                    }))), []);\r\n\r\n                console.log(`Finished loading items: ${matches.length}`);\r\n                this.onLoadComplete(Data.removeDuplicates(matches, this.itemId, this.excludedFolderIds));\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            const requests = this.conversationMessages\r\n                .filter(message => message.ParentFolderId !== this.currentFolderId)\r\n                .map(message => {\r\n                    const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages/${message.Id}/move`;\r\n\r\n                    console.log(`Moving item: ${restUrl}`);\r\n\r\n                    return $.ajax({\r\n                        url: restUrl,\r\n                        async: true,\r\n                        method: 'POST',\r\n                        contentType: 'application/json',\r\n                        dataType: 'json',\r\n                        data: JSON.stringify({ DestinationId: folderId }),\r\n                        headers: { 'Authorization': `Bearer ${this.token}` }\r\n                    })\r\n                });\r\n\r\n            this.collateRequests(<JQueryPromise<MessageJson>[]>requests, (results: MessageJson[]) => {\r\n                console.log(`Finished moving items to other folder: ${results.length}`);\r\n                this.onMoveComplete(results.length);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/RESTData.ts","export module Data {\r\n    export interface Message {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: string;\r\n        ToRecipients: string;\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    export interface Folder {\r\n        Id: string;\r\n        DisplayName: string;\r\n    }\r\n\r\n    export interface Match {\r\n        message: Message;\r\n        folder: Folder;\r\n    }\r\n\r\n    export enum Progress {\r\n        GetCallbackToken,\r\n        GetConversation,\r\n        GetExcludedFolders,\r\n        GetFolderNames,\r\n        Success,\r\n        NotFound,\r\n        Error\r\n    }\r\n\r\n    export interface IModel {\r\n        getItemsAsync(onLoadComplete: (results: Match[]) => void, onProgress: (progress: Progress) => void, onError: (message: string) => void): void;\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void;\r\n    }\r\n\r\n    export function removeDuplicates(results: Match[], itemId: string, excludedFolderIds: string[]) {\r\n        if (itemId) {\r\n            const item = results\r\n                .filter(item => item.message.Id === itemId)\r\n                .pop();\r\n\r\n            if (item) {\r\n                console.log(`Removing duplicates: ${results.length} original message(s)`);\r\n\r\n                // Find all of the items in the same folder, we want to remove all of their duplicates.\r\n                const sameFolderItems = results.filter(result => result.message.ParentFolderId === item.message.ParentFolderId);\r\n\r\n                console.log(`Messages in the same folder: ${sameFolderItems.length} message(s)`);\r\n\r\n                // Remove all items that are in the same folder.\r\n                results = results.filter(result => {\r\n                    if (result.folder.Id === item.message.ParentFolderId) {\r\n                        console.log(`Removed message in the same folder: ${result.message.Id}`);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                // Remove all items that are in another excluded folder.\r\n                results = results.filter(result => {\r\n                    if (excludedFolderIds.reduce((previousValue, currentValue) => previousValue || currentValue === result.folder.Id, false)) {\r\n                        console.log(`Removed message in an excluded folder: ${result.message.Id}`);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                // Remove all items that match an item in the same folder.\r\n                results = results.filter(result => {\r\n                    if (sameFolderItems.reduce((previousValue, value) => previousValue ||\r\n                        (result.message.Sender === value.message.Sender &&\r\n                            result.message.ToRecipients === value.message.ToRecipients &&\r\n                            result.message.BodyPreview === value.message.BodyPreview), false)) {\r\n                        console.log(`Removed duplicate message in other folder: ${item.message.Id}`);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                console.log(`Remaining in other folders: ${results.length} distinct message(s)`);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Model.ts"],"sourceRoot":""}