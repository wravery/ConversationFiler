{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 9b1664155fbc6d6596e0","webpack:///external \"React\"","webpack:///./src/Data/Model.ts","webpack:///./src/pages.ts","webpack:///./src/Data/Factory.ts","webpack:///./src/components/ConversationFiler.tsx","webpack:///./src/functions.ts","webpack:///external \"ReactDOM\"","webpack:///./src/Data/EWSData.ts","webpack:///./src/Data/RESTData.ts","webpack:///./src/components/Feedback.tsx","webpack:///./src/components/SearchResults.tsx","webpack:///./src/components/StatusMessage.tsx","webpack:///./src/index.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","React","Data","Progress","Pages","shouldHaveUI","functionsRegex","test","window","location","pathname","getDialogUrl","href","replace","populateDialog","storedResults","localStorage","setItem","storageKey","JSON","stringify","resetDialog","removeItem","getUIParameters","dialogRegex","onComplete","folderId","Office","context","ui","messageParent","parse","getItem","mailbox","RESTData_1","EWSData_1","Factory","getData","restUrl","RESTData","Model","EWSData","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","Model_1","Factory_1","StatusMessage_1","SearchResults_1","Feedback_1","ConversationFiler","_super","props","_this","state","progress","GetCallbackToken","componentDidMount","length","setState","Success","matches","NotFound","data","getItemsAsync","results","message","Error","error","onSelection","console","log","moveItemsAsync","count","render","createElement","StatusMessage","SearchResults","bind","Feedback","Component","pages_1","AppFunctions","fileDialog","event","notificationKey","item","notificationMessages","replaceAsync","type","MailboxEnums","ItemNotificationMessageType","ErrorMessage","completed","removeAsync","displayDialogAsync","height","width","displayInIframe","result","dialog","onDialogComplete","closed","close","addEventHandler","EventType","DialogMessageReceived","dialogEvent","DialogEventReceived","ProgressIndicator","register","ReactDOM","RequestBuilder","getItemsRequest","messages","builder","beginRequest","map","push","itemId","id","changeKey","endRequest","join","getFolderNamesRequest","folders","folder","moveItemsRequest","findConversationRequest","excludedFolderIdsRequest","Context","loadItems","onLoadComplete","onProgress","onError","GetConversation","makeEwsRequestAsync","conversationXml","$","parseXML","getConversation","$conversation","querySelectorAll","filter","parents","parseInt","find","text","sameFolderItemIds","each","$this","attr","$otherFolderItemIds","otherFolderItemIds","conversation","conversationId","items","global","loadExcludedFolders","excludedFolders","loadMessages","GetExcludedFolders","foldersXml","itemsXml","getMessages","$messages","parent","msg","querySelector","getAttribute","from","textContent","to","body","slice","loadFolderDisplayNames","folderNamesXml","getFolderDisplayNames","destinations_1","GetFolderNames","parentNode","displayName","Id","BodyPreview","Sender","ToRecipients","ParentFolderId","DisplayName","moveItems","onMoveComplete","ExcludedFolders","getCallbackTokenAsync","isRest","status","AsyncResultStatus","Succeeded","collateRequests","requests","onDone","onFail","when","apply","done","_i","arguments","fail","getRestId","diagnostics","hostName","convertToRestId","RestVersion","v2_0","token","restConversationId","ajax","url","async","dataType","headers","Authorization","getExcludedFolders","conversationMessages","currentFolderId","excludedFolderIds","restItemId","Count","getFolderNames","folderMap","entry","EmailAddress","Name","address","method","contentType","DestinationId","className","onClickFolder","handleClick","rows","index","key","onClick","evt","currentTarget","preventDefault","functions_1","ConversationFiler_1","initialize","params","document","getElementById"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = React;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Data;\r\n(function (Data) {\r\n    var Progress;\r\n    (function (Progress) {\r\n        Progress[Progress[\"GetCallbackToken\"] = 0] = \"GetCallbackToken\";\r\n        Progress[Progress[\"GetConversation\"] = 1] = \"GetConversation\";\r\n        Progress[Progress[\"GetExcludedFolders\"] = 2] = \"GetExcludedFolders\";\r\n        Progress[Progress[\"GetFolderNames\"] = 3] = \"GetFolderNames\";\r\n        Progress[Progress[\"Success\"] = 4] = \"Success\";\r\n        Progress[Progress[\"NotFound\"] = 5] = \"NotFound\";\r\n        Progress[Progress[\"Error\"] = 6] = \"Error\";\r\n    })(Progress = Data.Progress || (Data.Progress = {}));\r\n})(Data = exports.Data || (exports.Data = {}));\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Pages;\r\n(function (Pages) {\r\n    var functionsRegex = /\\/functions\\.html(\\?.*)?$/i;\r\n    var dialogRegex = /\\/dialog\\.html(\\?.*)?$/i;\r\n    var storageKey = \"conversationFilerMatches\";\r\n    function shouldHaveUI() {\r\n        return !functionsRegex.test(window.location.pathname);\r\n    }\r\n    Pages.shouldHaveUI = shouldHaveUI;\r\n    function getDialogUrl() {\r\n        return window.location.href.replace(functionsRegex, \"/dialog.html\");\r\n    }\r\n    Pages.getDialogUrl = getDialogUrl;\r\n    function populateDialog(storedResults) {\r\n        window.localStorage.setItem(storageKey, JSON.stringify(storedResults));\r\n    }\r\n    Pages.populateDialog = populateDialog;\r\n    function resetDialog() {\r\n        window.localStorage.removeItem(storageKey);\r\n    }\r\n    Pages.resetDialog = resetDialog;\r\n    function getUIParameters() {\r\n        if (dialogRegex.test(window.location.pathname)) {\r\n            return {\r\n                onComplete: function (folderId) { Office.context.ui.messageParent(folderId); },\r\n                storedResults: JSON.parse(window.localStorage.getItem(storageKey))\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                mailbox: Office.context.mailbox,\r\n            };\r\n        }\r\n    }\r\n    Pages.getUIParameters = getUIParameters;\r\n})(Pages = exports.Pages || (exports.Pages = {}));\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RESTData_1 = __webpack_require__(8);\r\nvar EWSData_1 = __webpack_require__(7);\r\nvar Factory;\r\n(function (Factory) {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    function getData(mailbox) {\r\n        return mailbox.restUrl\r\n            ? new RESTData_1.RESTData.Model(mailbox)\r\n            : new EWSData_1.EWSData.Model(mailbox);\r\n    }\r\n    Factory.getData = getData;\r\n})(Factory = exports.Factory || (exports.Factory = {}));\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar Factory_1 = __webpack_require__(3);\r\nvar StatusMessage_1 = __webpack_require__(11);\r\nvar SearchResults_1 = __webpack_require__(10);\r\nvar Feedback_1 = __webpack_require__(9);\r\nvar ConversationFiler = (function (_super) {\r\n    __extends(ConversationFiler, _super);\r\n    function ConversationFiler(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = { progress: Model_1.Data.Progress.GetCallbackToken };\r\n        return _this;\r\n    }\r\n    // Start the chain of requests by getting a callback token.\r\n    ConversationFiler.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Model_1.Data.Progress.Success, matches: this.props.storedResults });\r\n            }\r\n            else {\r\n                this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n            return;\r\n        }\r\n        else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n        var data = Factory_1.Factory.getData(this.props.mailbox);\r\n        this.setState({ data: data });\r\n        data.getItemsAsync(function (results) {\r\n            if (results.length > 0) {\r\n                _this.setState({ progress: Model_1.Data.Progress.Success, matches: results });\r\n            }\r\n            else {\r\n                _this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n        }, function (progress) {\r\n            _this.setState({ progress: progress });\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.onSelection = function (folderId) {\r\n        var _this = this;\r\n        console.log(\"Selected a folder: \" + folderId);\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n            return;\r\n        }\r\n        this.state.data.moveItemsAsync(folderId, function (count) {\r\n            if (_this.props.onComplete) {\r\n                _this.props.onComplete(folderId);\r\n            }\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(StatusMessage_1.StatusMessage, { progress: this.state.progress, message: this.state.error }),\r\n            React.createElement(SearchResults_1.SearchResults, { matches: this.state.matches, onSelection: this.onSelection.bind(this) }),\r\n            React.createElement(Feedback_1.Feedback, null)));\r\n    };\r\n    return ConversationFiler;\r\n}(React.Component));\r\nexports.ConversationFiler = ConversationFiler;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar pages_1 = __webpack_require__(2);\r\nvar Model_1 = __webpack_require__(1);\r\nvar Factory_1 = __webpack_require__(3);\r\nvar AppFunctions;\r\n(function (AppFunctions) {\r\n    function fileDialog(event) {\r\n        var mailbox = Office.context.mailbox;\r\n        var data = Factory_1.Factory.getData(mailbox);\r\n        var notificationKey = 'conversationFilerNotification';\r\n        console.log('Starting to load the conversation...');\r\n        data.getItemsAsync(function (results) {\r\n            console.log(\"Loaded the conversation: \" + results.length);\r\n            if (results.length === 0) {\r\n                // Special case for empty results\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                    message: \"It looks like you haven't filed this conversation anywhere before.\"\r\n                });\r\n                event.completed();\r\n                return;\r\n            }\r\n            console.log('Showing the dialog...');\r\n            mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n            pages_1.Pages.populateDialog(results);\r\n            Office.context.ui.displayDialogAsync(pages_1.Pages.getDialogUrl(), { height: 25, width: 50, displayInIframe: true }, function (result) {\r\n                var dialog = result.value;\r\n                var onDialogComplete = function (closed) {\r\n                    pages_1.Pages.resetDialog();\r\n                    if (!closed) {\r\n                        dialog.close();\r\n                    }\r\n                    event.completed();\r\n                };\r\n                dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (dialogEvent) {\r\n                    console.log('Moving the items...');\r\n                    data.moveItemsAsync(dialogEvent.message, function (count) {\r\n                        console.log(\"Finished moving the items: \" + count);\r\n                        onDialogComplete(false);\r\n                    }, function (message) {\r\n                        console.log(\"Error moving the items: \" + message);\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                            message: \"Something went wrong, I couldn't move the messages.\"\r\n                        });\r\n                        onDialogComplete(false);\r\n                    });\r\n                });\r\n                dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                    onDialogComplete(true);\r\n                });\r\n            });\r\n        }, function (progress) {\r\n            console.log(\"Progress loading the conversation: \" + Model_1.Data.Progress[progress]);\r\n            // Update the progress indicator\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                message: 'Finding the messages in this conversation...'\r\n            });\r\n        }, function (message) {\r\n            console.log(\"Error loading the conversation: \" + message);\r\n            // Display an error\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                message: \"Sorry, I couldn't figure out where this message should go.\"\r\n            });\r\n            event.completed();\r\n        });\r\n    }\r\n    // Add the UI-less function callbacks to the window\r\n    function register() {\r\n        window.fileDialog = fileDialog;\r\n    }\r\n    AppFunctions.register = register;\r\n})(AppFunctions = exports.AppFunctions || (exports.AppFunctions = {}));\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = ReactDOM;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n/// <reference path=\"../../node_modules/@types/jquery/index.d.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar EWSData;\r\n(function (EWSData) {\r\n    var RequestBuilder = (function () {\r\n        function RequestBuilder() {\r\n        }\r\n        RequestBuilder.getItemsRequest = function (messages) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:GetItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.getFolderNamesRequest = function (folders) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n            folders.map(function (folder) {\r\n                builder.push(\"      <t:FolderId Id=\\\"\" + folder.folderId.id + \"\\\" ChangeKey=\\\"\" + folder.folderId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:FolderIds>', '  </m:GetFolder >', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.moveItemsRequest = function (messages, folderId) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:MoveItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        return RequestBuilder;\r\n    }());\r\n    RequestBuilder.beginRequest = [\r\n        '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n        '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n        '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n        '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n        '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n        '<soap:Header>',\r\n        '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n        '</soap:Header>',\r\n        '<soap:Body>',\r\n    ].join('\\n');\r\n    RequestBuilder.endRequest = [\r\n        '</soap:Body>',\r\n        '</soap:Envelope>'\r\n    ].join('\\n');\r\n    RequestBuilder.findConversationRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:FindConversation>',\r\n        '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n        '    <m:ParentFolderId>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '    </m:ParentFolderId>',\r\n        '  </m:FindConversation>',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    RequestBuilder.excludedFolderIdsRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:GetFolder>',\r\n        '    <m:FolderShape>',\r\n        '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n        '    </m:FolderShape>',\r\n        '    <m:FolderIds>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n        '    </m:FolderIds>',\r\n        '  </m:GetFolder >',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                _this.conversationXml = $.parseXML(result.value);\r\n                _this.getConversation();\r\n            });\r\n        };\r\n        Context.prototype.getConversation = function () {\r\n            var _this = this;\r\n            var $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(\"[Id=\\\"\" + this.mailbox.item.itemId + \"\\\"]\")\r\n                .parents('Conversation');\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n            var messageCount = parseInt($conversation.find('MessageCount').text());\r\n            var globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            var sameFolderItemIds = [];\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            var $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n            sameFolderItemIds.map(function (itemId) {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(\"[Id!=\\\"\" + itemId.id + \"\\\"]\");\r\n            });\r\n            var otherFolderItemIds = [];\r\n            $otherFolderItemIds.each(function () {\r\n                var $this = $(this);\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversation = {\r\n                id: this.mailbox.item.conversationId,\r\n                items: sameFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); }),\r\n                global: otherFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); })\r\n            };\r\n            this.loadExcludedFolders();\r\n        };\r\n        Context.prototype.loadExcludedFolders = function () {\r\n            var _this = this;\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            }\r\n            else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    var foldersXml = $.parseXML(result.value);\r\n                    var excludedFolders = [];\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.excludedFolders = excludedFolders;\r\n                    _this.loadMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.loadMessages = function () {\r\n            var _this = this;\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            }\r\n            else {\r\n                console.log(\"Getting the messages in other folders: \" + this.conversation.global.length);\r\n                this.onProgress(Model_1.Data.Progress.GetConversation);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.itemsXml = $.parseXML(result.value);\r\n                    _this.getMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getMessages = function () {\r\n            var $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n            this.excludedFolders.map(function (folder) {\r\n                $messages = $messages.filter(\"[Id!=\\\"\" + folder.folderId.id + \"\\\"]\");\r\n            });\r\n            $messages = $messages.parent();\r\n            this.conversation.global.map(function (item) {\r\n                for (var i = 0; i < $messages.length; i++) {\r\n                    var msg = $messages[i];\r\n                    if (msg.querySelector(\"ItemId[Id=\\\"\" + item.itemId.id + \"\\\"]\")) {\r\n                        var folderId = msg.querySelector('ParentFolderId');\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            this.loadFolderDisplayNames();\r\n        };\r\n        Context.prototype.loadFolderDisplayNames = function () {\r\n            var _this = this;\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            }\r\n            else {\r\n                var destinations_1 = [];\r\n                this.conversation.global.map(function (item) {\r\n                    if (item.folder) {\r\n                        destinations_1.push(item.folder);\r\n                    }\r\n                });\r\n                if (!destinations_1.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n                console.log(\"Getting the display names of the other folders: \" + destinations_1.length);\r\n                this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations_1), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.folderNamesXml = $.parseXML(result.value);\r\n                    _this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getFolderDisplayNames = function () {\r\n            var _this = this;\r\n            var matches = [];\r\n            this.conversation.global.map(function (item) {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n                var folder = _this.folderNamesXml.querySelector(\"GetFolderResponseMessage > Folders > Folder > FolderId[Id=\\\"\" + item.folder.folderId.id + \"\\\"]\").parentNode;\r\n                item.folder.displayName = folder.querySelector('DisplayName').textContent;\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"Finished loading items in other folders: \" + matches.length);\r\n            this.onLoadComplete(matches);\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                console.log(\"Finished moving items to other folder: \" + _this.conversation.items.length);\r\n                _this.onMoveComplete(_this.conversation.items.length);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    EWSData.Model = Model;\r\n})(EWSData = exports.EWSData || (exports.EWSData = {}));\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n/// <reference path=\"../../node_modules/@types/jquery/index.d.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar RESTData;\r\n(function (RESTData) {\r\n    var Endpoint = '/v2.0/me';\r\n    var ExcludedFolders;\r\n    (function (ExcludedFolders) {\r\n        ExcludedFolders[ExcludedFolders[\"Inbox\"] = 0] = \"Inbox\";\r\n        ExcludedFolders[ExcludedFolders[\"Drafts\"] = 1] = \"Drafts\";\r\n        ExcludedFolders[ExcludedFolders[\"SentItems\"] = 2] = \"SentItems\";\r\n        ExcludedFolders[ExcludedFolders[\"DeletedItems\"] = 3] = \"DeletedItems\";\r\n        // Sentinel value for enumerating the folder names\r\n        ExcludedFolders[ExcludedFolders[\"Count\"] = 4] = \"Count\";\r\n    })(ExcludedFolders || (ExcludedFolders = {}));\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Model_1.Data.Progress.GetCallbackToken);\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    _this.getConversation(result);\r\n                }\r\n                else {\r\n                    _this.onError(result.error.message);\r\n                }\r\n            });\r\n        };\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        Context.prototype.collateRequests = function (requests, onDone, onFail) {\r\n            var _this = this;\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done(function () {\r\n                    var results = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        results[_i] = arguments[_i];\r\n                    }\r\n                    onDone(results.map(function (result) { return result[0]; }));\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n            else {\r\n                requests[0]\r\n                    .done(function (result) {\r\n                    onDone([result]);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n        };\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        Context.prototype.getRestId = function (itemId) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        };\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        Context.prototype.getConversation = function (result) {\r\n            var _this = this;\r\n            this.token = result.value;\r\n            var conversationId = this.mailbox.item.conversationId;\r\n            var restConversationId = this.getRestId(conversationId);\r\n            var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/messages?$filter=ConversationId eq '\" + restConversationId + \"'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId\";\r\n            console.log(\"Getting the list of items in the conversation: \" + restUrl);\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': \"Bearer \" + this.token }\r\n            }).done(function (result) {\r\n                _this.getExcludedFolders(result);\r\n            }).fail(function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        Context.prototype.getExcludedFolders = function (result) {\r\n            var _this = this;\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversationMessages = result.value;\r\n            var currentFolderId;\r\n            var excludedFolderIds = [];\r\n            // We should ignore any messages in the same folder.\r\n            var itemId = this.mailbox.item.itemId;\r\n            var restItemId = this.getRestId(itemId);\r\n            for (var i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            var requests = [];\r\n            for (var i = 0; i < ExcludedFolders.Count; ++i) {\r\n                var folderId = ExcludedFolders[i];\r\n                var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + folderId + \"?$select=Id\";\r\n                console.log(\"Getting excluded folder ID: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + this.token }\r\n                }));\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n                _this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        Context.prototype.getFolderNames = function (currentFolderId, excludedFolderIds) {\r\n            var _this = this;\r\n            var folderMap = [];\r\n            this.conversationMessages.map(function (message) {\r\n                for (var i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n                for (var i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n            var requests = folderMap.map(function (entry) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + entry.folder.Id + \"?$select=Id,DisplayName\";\r\n                console.log(\"Getting included folder name: \" + restUrl);\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                });\r\n            });\r\n            this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    for (var i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                var matches = [];\r\n                folderMap.map(function (entry) {\r\n                    entry.messages.map(function (message) {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(function (address) { return address.EmailAddress.Name; }).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                console.log(\"Finished loading items in other folders: \" + matches.length);\r\n                _this.onLoadComplete(matches);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            var requests = [];\r\n            this.conversationMessages.map(function (message) {\r\n                if (message.ParentFolderId !== _this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/messages/\" + message.Id + \"/move\";\r\n                console.log(\"Moving item: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                }));\r\n            });\r\n            this.collateRequests(requests, function (results) {\r\n                console.log(\"Finished moving items to other folder: \" + results.length);\r\n                _this.onMoveComplete(results.length);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    RESTData.Model = Model;\r\n})(RESTData = exports.RESTData || (exports.RESTData = {}));\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Feedback = (function (_super) {\r\n    __extends(Feedback, _super);\r\n    function Feedback() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Feedback.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: \"feedback\" },\r\n            React.createElement(\"a\", { href: \"https://beandotnet.azurewebsites.net/\" }, \"about this app\"),\r\n            \"\\u00A0\",\r\n            React.createElement(\"a\", { href: \"mailto:wravery@hotmail.com?Subject=Conversation%20Filer%20v2.0%20App%20for%20Outlook\" }, \"send feedback\")));\r\n    };\r\n    return Feedback;\r\n}(React.Component));\r\nexports.Feedback = Feedback;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar SearchResults = (function (_super) {\r\n    __extends(SearchResults, _super);\r\n    function SearchResults(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onClickFolder = _this.handleClick.bind(_this);\r\n        return _this;\r\n    }\r\n    SearchResults.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n        var rows = this.props.matches.map(function (value, index) {\r\n            return (React.createElement(\"tr\", { key: index },\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(\"a\", { name: value.folder.Id, onClick: _this.onClickFolder }, value.folder.DisplayName)),\r\n                React.createElement(\"td\", null, value.message.Sender),\r\n                React.createElement(\"td\", null, value.message.ToRecipients),\r\n                React.createElement(\"td\", null, value.message.BodyPreview)));\r\n        });\r\n        return (React.createElement(\"table\", null,\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Folder\"),\r\n                    React.createElement(\"th\", null, \"From\"),\r\n                    React.createElement(\"th\", null, \"To\"),\r\n                    React.createElement(\"th\", null, \"Preview\"))),\r\n            React.createElement(\"tbody\", null, rows)));\r\n    };\r\n    SearchResults.prototype.handleClick = function (evt) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    };\r\n    return SearchResults;\r\n}(React.Component));\r\nexports.SearchResults = SearchResults;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar StatusMessage = (function (_super) {\r\n    __extends(StatusMessage, _super);\r\n    function StatusMessage() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    StatusMessage.prototype.render = function () {\r\n        var className;\r\n        var status;\r\n        switch (this.props.progress) {\r\n            case Model_1.Data.Progress.GetCallbackToken:\r\n            case Model_1.Data.Progress.GetConversation:\r\n            case Model_1.Data.Progress.GetExcludedFolders:\r\n            case Model_1.Data.Progress.GetFolderNames:\r\n                return React.createElement(\"h3\", null, \"Looking for other messages in this conversation...\");\r\n            case Model_1.Data.Progress.Success:\r\n                return null;\r\n            case Model_1.Data.Progress.NotFound:\r\n                return React.createElement(\"h3\", null, \"It looks like you haven't filed this conversation anywhere before.\");\r\n            default:\r\n                return (React.createElement(\"div\", null,\r\n                    React.createElement(\"h3\", null, \"Sorry, I couldn't figure out where this message should go. :(\"),\r\n                    React.createElement(\"span\", null, this.props.message)));\r\n        }\r\n    };\r\n    return StatusMessage;\r\n}(React.Component));\r\nexports.StatusMessage = StatusMessage;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar ReactDOM = __webpack_require__(6);\r\nvar pages_1 = __webpack_require__(2);\r\nvar functions_1 = __webpack_require__(5);\r\nvar ConversationFiler_1 = __webpack_require__(4);\r\nOffice.initialize = function () {\r\n    if (pages_1.Pages.shouldHaveUI()) {\r\n        // Show the UI...\r\n        var params = pages_1.Pages.getUIParameters();\r\n        ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: params.mailbox, onComplete: params.onComplete, storedResults: params.storedResults }), document.getElementById(\"conversationFilerRoot\"));\r\n    }\r\n    else {\r\n        functions_1.AppFunctions.register();\r\n    }\r\n};\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b1664155fbc6d6596e0","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export module Data {\r\n    export interface Message {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: string;\r\n        ToRecipients: string;\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    export interface Folder {\r\n        Id: string;\r\n        DisplayName: string;\r\n    }\r\n\r\n    export interface Match {\r\n        message: Message;\r\n        folder: Folder;\r\n    }\r\n\r\n    export enum Progress {\r\n        GetCallbackToken,\r\n        GetConversation,\r\n        GetExcludedFolders,\r\n        GetFolderNames,\r\n        Success,\r\n        NotFound,\r\n        Error\r\n    }\r\n\r\n    export interface IModel {\r\n        getItemsAsync(onLoadComplete: (results: Match[]) => void, onProgress: (progress: Progress) => void, onError: (message: string) => void): void;\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Model.ts","/// <reference path=\"../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nimport { Data } from \"./Data/Model\";\r\n\r\nexport module Pages {\r\n    const functionsRegex = /\\/functions\\.html(\\?.*)?$/i;\r\n    const dialogRegex = /\\/dialog\\.html(\\?.*)?$/i;\r\n    const storageKey = \"conversationFilerMatches\";\r\n\r\n    export function shouldHaveUI(): boolean {\r\n        return !functionsRegex.test(window.location.pathname);\r\n    }\r\n\r\n    export function getDialogUrl(): string {\r\n        return window.location.href.replace(functionsRegex, \"/dialog.html\");\r\n    }\r\n\r\n    export function populateDialog(storedResults: Data.Match[]) {\r\n        window.localStorage.setItem(storageKey, JSON.stringify(storedResults));\r\n    }\r\n\r\n    export function resetDialog() {\r\n        window.localStorage.removeItem(storageKey);\r\n    }\r\n\r\n    export interface UIParameters {\r\n        mailbox?: Office.Mailbox,\r\n        onComplete?: (folderId: string) => void;\r\n        storedResults?: Data.Match[];\r\n    }\r\n\r\n    export function getUIParameters(): UIParameters {\r\n        if (dialogRegex.test(window.location.pathname)) {\r\n            return {\r\n                onComplete: folderId => { Office.context.ui.messageParent(folderId); },\r\n                storedResults: <Data.Match[]>JSON.parse(window.localStorage.getItem(storageKey))\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                mailbox: Office.context.mailbox,\r\n            };\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages.ts","/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\nimport { RESTData } from \"./RESTData\";\r\nimport { EWSData } from \"./EWSData\";\r\n\r\nexport module Factory {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    export function getData(mailbox: Office.Mailbox): Data.IModel {\r\n        return mailbox.restUrl\r\n            ? new RESTData.Model(mailbox)\r\n            : new EWSData.Model(mailbox);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Factory.ts","/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nimport * as React from \"react\";\r\nimport * as JQuery from \"jquery\";\r\n\r\nimport { Data } from \"../Data/Model\"\r\nimport { Factory } from \"../Data/Factory\";\r\n\r\nimport { StatusMessage } from \"./StatusMessage\";\r\nimport { SearchResults } from \"./SearchResults\";\r\nimport { Feedback } from \"./Feedback\";\r\n\r\nexport interface ConversationFilerProps {\r\n    mailbox: Office.Mailbox;\r\n    storedResults?: Data.Match[];\r\n    onComplete?: (folderId: string) => void;\r\n}\r\n\r\ninterface ConversationFilerState {\r\n    progress: Data.Progress;\r\n    data?: Data.IModel;\r\n    error?: string;\r\n    matches?: Data.Match[];\r\n}\r\n\r\nexport class ConversationFiler extends React.Component<ConversationFilerProps, ConversationFilerState> {\r\n    constructor(props: ConversationFilerProps) {\r\n        super(props);\r\n        this.state = { progress: Data.Progress.GetCallbackToken };\r\n    }\r\n\r\n    // Start the chain of requests by getting a callback token.\r\n    componentDidMount() {\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: this.props.storedResults });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n\r\n            return;\r\n        } else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n\r\n        const data = Factory.getData(this.props.mailbox);\r\n\r\n        this.setState({ data: data });\r\n\r\n        data.getItemsAsync((results) => {\r\n            if (results.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: results });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n        }, (progress) => {\r\n            this.setState({ progress: progress });\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    private onSelection(folderId: string) {\r\n        console.log(`Selected a folder: ${folderId}`);\r\n\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.state.data.moveItemsAsync(folderId, (count) => {\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <StatusMessage progress={this.state.progress} message={this.state.error} />\r\n            <SearchResults matches={this.state.matches} onSelection={this.onSelection.bind(this)} />\r\n            <Feedback />\r\n        </div>);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ConversationFiler.tsx","/// <reference path=\"../node_modules/@types/office-js/index.d.ts\" />\r\n\r\nimport { Pages } from \"./pages\";\r\n\r\nimport { Data } from \"./Data/Model\";\r\nimport { Factory } from \"./Data/Factory\";\r\n\r\nexport module AppFunctions {\r\n    function fileDialog(event: any) {\r\n        const mailbox = Office.context.mailbox;\r\n        const data = Factory.getData(mailbox);\r\n        const notificationKey = 'conversationFilerNotification';\r\n\r\n        console.log('Starting to load the conversation...');\r\n\r\n        data.getItemsAsync((results) => {\r\n            console.log(`Loaded the conversation: ${results.length}`);\r\n\r\n            if (results.length === 0) {\r\n                // Special case for empty results\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                    message: `It looks like you haven't filed this conversation anywhere before.`\r\n                });\r\n                event.completed();\r\n\r\n                return;\r\n            }\r\n\r\n            console.log('Showing the dialog...');\r\n\r\n            mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n            Pages.populateDialog(results);\r\n            Office.context.ui.displayDialogAsync(Pages.getDialogUrl(), { height: 25, width: 50, displayInIframe: true }, (result) => {\r\n                const dialog = <Office.DialogHandler>result.value;\r\n                const onDialogComplete = (closed: boolean) => {\r\n                    Pages.resetDialog();\r\n\r\n                    if (!closed) {\r\n                        dialog.close();\r\n                    }\r\n\r\n                    event.completed();\r\n                };\r\n\r\n                dialog.addEventHandler(Office.EventType.DialogMessageReceived, (dialogEvent: { message: string }) => {\r\n                    console.log('Moving the items...');\r\n\r\n                    data.moveItemsAsync(dialogEvent.message, (count) => {\r\n                        console.log(`Finished moving the items: ${count}`);\r\n\r\n                        onDialogComplete(false);\r\n                    }, (message) => {\r\n                        console.log(`Error moving the items: ${message}`);\r\n\r\n                        mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                            message: `Something went wrong, I couldn't move the messages.`\r\n                        });\r\n                        onDialogComplete(false);\r\n                    });\r\n                });\r\n\r\n                dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\r\n                    onDialogComplete(true);\r\n                });\r\n            });\r\n        }, (progress) => {\r\n            console.log(`Progress loading the conversation: ${Data.Progress[progress]}`);\r\n\r\n            // Update the progress indicator\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                message: 'Finding the messages in this conversation...'\r\n            });\r\n        }, (message) => {\r\n            console.log(`Error loading the conversation: ${message}`);\r\n\r\n            // Display an error\r\n            mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                message: `Sorry, I couldn't figure out where this message should go.`\r\n            });\r\n\r\n            event.completed();\r\n        });\r\n    }\r\n\r\n    // Add the UI-less function callbacks to the window\r\n    export function register() {\r\n        (<any>window).fileDialog = fileDialog;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/functions.ts","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 6\n// module chunks = 0","/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n/// <reference path=\"../../node_modules/@types/jquery/index.d.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\n\r\nexport module EWSData {\r\n    interface ItemId {\r\n        id: string;\r\n        changeKey: string;\r\n    }\r\n\r\n    interface FolderData {\r\n        folderId: ItemId;\r\n        displayName?: string;\r\n    }\r\n\r\n    interface MessageData {\r\n        itemId: ItemId;\r\n        conversation: ConversationData;\r\n        folder?: FolderData;\r\n        body?: string;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n\r\n    interface ConversationData {\r\n        id: string;\r\n        items: MessageData[];\r\n        global: MessageData[];\r\n    }\r\n\r\n    class RequestBuilder {\r\n        private static beginRequest = [\r\n            '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n            '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n            '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n            '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n            '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n            '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n            '<soap:Header>',\r\n            '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n            '</soap:Header>',\r\n            '<soap:Body>',\r\n        ].join('\\n');\r\n\r\n        private static endRequest = [\r\n            '</soap:Body>',\r\n            '</soap:Envelope>'\r\n        ].join('\\n');\r\n\r\n        static findConversationRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:FindConversation>',\r\n            '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n            '    <m:ParentFolderId>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '    </m:ParentFolderId>',\r\n            '  </m:FindConversation>',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getItemsRequest(messages: MessageData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:GetItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static excludedFolderIdsRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:GetFolder>',\r\n            '    <m:FolderShape>',\r\n            '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n            '    </m:FolderShape>',\r\n            '    <m:FolderIds>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n            '    </m:FolderIds>',\r\n            '  </m:GetFolder >',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getFolderNamesRequest(folders: FolderData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n\r\n            folders.map(folder => {\r\n                builder.push(`      <t:FolderId Id=\"${folder.folderId.id}\" ChangeKey=\"${folder.folderId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:FolderIds>',\r\n                '  </m:GetFolder >',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static moveItemsRequest(messages: MessageData[], folderId: string) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:MoveItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private conversationXml?: XMLDocument;\r\n        private conversation?: ConversationData;\r\n        private excludedFolders?: FolderData[];\r\n        private itemsXml?: XMLDocument;\r\n        private folderNamesXml?: XMLDocument;\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                this.conversationXml = $.parseXML(result.value);\r\n                this.getConversation();\r\n            });\r\n        }\r\n\r\n        private getConversation() {\r\n            const $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(`[Id=\"${(<Office.ItemRead>this.mailbox.item).itemId}\"]`)\r\n                .parents('Conversation');\r\n\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n\r\n            const messageCount = parseInt($conversation.find('MessageCount').text());\r\n            const globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            let sameFolderItemIds: ItemId[] = [];\r\n\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                const $this = $(this);\r\n\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            let $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n\r\n            sameFolderItemIds.map(itemId => {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(`[Id!=\"${itemId.id}\"]`);\r\n            });\r\n\r\n            let otherFolderItemIds: ItemId[] = [];\r\n\r\n            $otherFolderItemIds.each(function () {\r\n                const $this = $(this);\r\n\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversation = {\r\n                id: (<Office.Message>this.mailbox.item).conversationId,\r\n                items: sameFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation })),\r\n                global: otherFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation }))\r\n            };\r\n\r\n            this.loadExcludedFolders();\r\n        }\r\n\r\n        private loadExcludedFolders() {\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            } else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    let foldersXml = $.parseXML(result.value);\r\n                    let excludedFolders: FolderData[] = [];\r\n\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    this.excludedFolders = excludedFolders;\r\n\r\n                    this.loadMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private loadMessages() {\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            } else {\r\n                console.log(`Getting the messages in other folders: ${this.conversation.global.length}`);\r\n                this.onProgress(Data.Progress.GetConversation);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.itemsXml = $.parseXML(result.value);\r\n                    this.getMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getMessages() {\r\n            let $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n\r\n            this.excludedFolders.map(folder => {\r\n                $messages = $messages.filter(`[Id!=\"${folder.folderId.id}\"]`);\r\n            });\r\n\r\n            $messages = $messages.parent();\r\n\r\n            this.conversation.global.map(item => {\r\n                for (let i = 0; i < $messages.length; i++) {\r\n                    const msg = $messages[i];\r\n\r\n                    if (msg.querySelector(`ItemId[Id=\"${item.itemId.id}\"]`)) {\r\n                        let folderId = msg.querySelector('ParentFolderId');\r\n\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.loadFolderDisplayNames();\r\n        }\r\n\r\n        private loadFolderDisplayNames() {\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            } else {\r\n                let destinations: FolderData[] = [];\r\n\r\n                this.conversation.global.map(item => {\r\n                    if (item.folder) {\r\n                        destinations.push(item.folder);\r\n                    }\r\n                });\r\n\r\n                if (!destinations.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Getting the display names of the other folders: ${destinations.length}`);\r\n                this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.folderNamesXml = $.parseXML(result.value);\r\n                    this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getFolderDisplayNames() {\r\n            let matches: Data.Match[] = [];\r\n\r\n            this.conversation.global.map((item: MessageData) => {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n\r\n                const folder = this.folderNamesXml.querySelector(`GetFolderResponseMessage > Folders > Folder > FolderId[Id=\"${item.folder.folderId.id}\"]`).parentNode;\r\n                item.folder.displayName = (<Element>folder).querySelector('DisplayName').textContent;\r\n\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n\r\n            console.log(`Finished loading items in other folders: ${matches.length}`);\r\n            this.onLoadComplete(matches);\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Finished moving items to other folder: ${this.conversation.items.length}`);\r\n                this.onMoveComplete(this.conversation.items.length);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/EWSData.ts","/// <reference path=\"../../node_modules/@types/office-js/index.d.ts\" />\r\n/// <reference path=\"../../node_modules/@types/jquery/index.d.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\n\r\nexport module RESTData {\r\n    const Endpoint = '/v2.0/me';\r\n\r\n    enum ExcludedFolders {\r\n        Inbox,\r\n        Drafts,\r\n        SentItems,\r\n        DeletedItems,\r\n\r\n        // Sentinel value for enumerating the folder names\r\n        Count\r\n    }\r\n\r\n    interface EmailAddressJson {\r\n        Name: string;\r\n        Address: string;\r\n    }\r\n\r\n    interface AddressJson {\r\n        EmailAddress: EmailAddressJson;\r\n    }\r\n\r\n    interface MessageJson {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: AddressJson;\r\n        ToRecipients: AddressJson[];\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    interface MessageJsonCollection {\r\n        value: MessageJson[];\r\n    }\r\n\r\n    interface FolderJson {\r\n        Id: string;\r\n        DisplayName?: string;\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private token?: string;\r\n        private currentFolderId?: string;\r\n        private conversationMessages?: MessageJson[];\r\n        private excludedFolderIds?: string[];\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Data.Progress.GetCallbackToken);\r\n\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true },\r\n                (result: Office.AsyncResult) => {\r\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                        this.getConversation(result);\r\n                    } else {\r\n                        this.onError(result.error.message);\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        private collateRequests<T>(requests: JQueryPromise<T>[], onDone: (results: T[]) => void, onFail: (message: string) => void): void {\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done((...results: any[]) => {\r\n                        onDone(results.map(result => <T>result[0]));\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            } else {\r\n                requests[0]\r\n                    .done((result: T) => {\r\n                        onDone([result]);\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            }\r\n        }\r\n\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        private getRestId(itemId: string) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        }\r\n\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        private getConversation(result: Office.AsyncResult) {\r\n            this.token = <string>result.value;\r\n\r\n            const conversationId = (<Office.Message>this.mailbox.item).conversationId;\r\n            const restConversationId = this.getRestId(conversationId);\r\n            const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages?$filter=ConversationId eq '${restConversationId}'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId`;\r\n\r\n            console.log(`Getting the list of items in the conversation: ${restUrl}`);\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': `Bearer ${this.token}` }\r\n            }).done((result: MessageJsonCollection) => {\r\n                this.getExcludedFolders(result);\r\n            }).fail((message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        private getExcludedFolders(result: MessageJsonCollection) {\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversationMessages = result.value;\r\n\r\n            let currentFolderId: string;\r\n            let excludedFolderIds: string[] = [];\r\n\r\n            // We should ignore any messages in the same folder.\r\n            const itemId = (<Office.ItemRead>this.mailbox.item).itemId;\r\n            const restItemId = this.getRestId(itemId);\r\n\r\n            for (let i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            for (let i = 0; i < ExcludedFolders.Count; ++i) {\r\n                const folderId = ExcludedFolders[i];\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${folderId}?$select=Id`;\r\n\r\n                console.log(`Getting excluded folder ID: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            }\r\n\r\n            this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results) => {\r\n                results.map((value) => {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n\r\n                this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, (message) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        private getFolderNames(currentFolderId: string, excludedFolderIds: string[]) {\r\n            let folderMap: {\r\n                folder: FolderJson;\r\n                messages: MessageJson[];\r\n            }[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                for (let i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n\r\n            let requests = folderMap.map((entry) => {\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${entry.folder.Id}?$select=Id,DisplayName`;\r\n\r\n                console.log(`Getting included folder name: ${restUrl}`);\r\n\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                });\r\n            });\r\n\r\n            this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\r\n                results.map((value) => {\r\n                    for (let i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let matches: Data.Match[] = [];\r\n\r\n                folderMap.map((entry) => {\r\n                    entry.messages.map((message) => {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(address => address.EmailAddress.Name).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                console.log(`Finished loading items in other folders: ${matches.length}`);\r\n                this.onLoadComplete(matches);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                if (message.ParentFolderId !== this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages/${message.Id}/move`;\r\n\r\n                console.log(`Moving item: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            });\r\n\r\n            this.collateRequests(<JQueryPromise<MessageJson>[]>requests, (results: MessageJson[]) => {\r\n                console.log(`Finished moving items to other folder: ${results.length}`);\r\n                this.onMoveComplete(results.length);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/RESTData.ts","import * as React from \"react\";\r\n\r\nexport class Feedback extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (<div className=\"feedback\">\r\n            <a href=\"https://beandotnet.azurewebsites.net/\">about this app</a>\r\n            &nbsp;\r\n            <a href=\"mailto:wravery@hotmail.com?Subject=Conversation%20Filer%20v2.0%20App%20for%20Outlook\">send feedback</a>\r\n        </div>);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Feedback.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface SearchResultsProps {\r\n    matches: Data.Match[];\r\n    onSelection: (folderId: string) => void;\r\n}\r\n\r\nexport class SearchResults extends React.Component<SearchResultsProps, undefined> {\r\n    constructor(props: SearchResultsProps) {\r\n        super(props);\r\n        this.onClickFolder = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let rows = this.props.matches.map((value, index) => {\r\n            return (<tr key={index}>\r\n                <td><a name={value.folder.Id} onClick={this.onClickFolder}>{value.folder.DisplayName}</a></td>\r\n                <td>{value.message.Sender}</td>\r\n                <td>{value.message.ToRecipients}</td>\r\n                <td>{value.message.BodyPreview}</td>\r\n            </tr>);\r\n        });\r\n\r\n        return (<table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Folder</th>\r\n                    <th>From</th>\r\n                    <th>To</th>\r\n                    <th>Preview</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </table>);\r\n    }\r\n\r\n    private handleClick(evt: React.MouseEvent<HTMLAnchorElement>) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    private onClickFolder: React.EventHandler<React.MouseEvent<HTMLAnchorElement>>;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/SearchResults.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface StatusMessageProps {\r\n    progress: Data.Progress;\r\n    message?: string;\r\n}\r\n\r\nexport class StatusMessage extends React.Component<StatusMessageProps, undefined> {\r\n    render() {\r\n        let className: string;\r\n        let status: string;\r\n\r\n        switch (this.props.progress) {\r\n            case Data.Progress.GetCallbackToken:\r\n            case Data.Progress.GetConversation:\r\n            case Data.Progress.GetExcludedFolders:\r\n            case Data.Progress.GetFolderNames:\r\n                return <h3>Looking for other messages in this conversation...</h3>;\r\n\r\n            case Data.Progress.Success:\r\n                return null;\r\n\r\n            case Data.Progress.NotFound:\r\n                return <h3>It looks like you haven't filed this conversation anywhere before.</h3>;\r\n\r\n            default:\r\n                return (<div>\r\n                    <h3>Sorry, I couldn't figure out where this message should go. :(</h3>\r\n                    <span>{this.props.message}</span>\r\n                </div>);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/StatusMessage.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { Pages } from \"./pages\";\r\nimport { AppFunctions } from \"./functions\";\r\n\r\nimport { ConversationFiler } from \"./components/ConversationFiler\";\r\n\r\nOffice.initialize = function () {\r\n    if (Pages.shouldHaveUI()) {\r\n        // Show the UI...\r\n        const params = Pages.getUIParameters();\r\n\r\n        ReactDOM.render(\r\n            <ConversationFiler mailbox={params.mailbox} onComplete={params.onComplete} storedResults={params.storedResults} />,\r\n            document.getElementById(\"conversationFilerRoot\")\r\n        );\r\n    } else {\r\n        AppFunctions.register();\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}