{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 2b4bbbc492b2bd65b659","webpack:///./src/Data/Model.ts","webpack:///external \"React\"","webpack:///./src/Data/Factory.ts","webpack:///./src/components/ConversationFiler.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/Data/EWSData.ts","webpack:///./src/Data/RESTData.ts","webpack:///./src/components/Feedback.tsx","webpack:///./src/components/SearchResults.tsx","webpack:///./src/components/StatusMessage.tsx","webpack:///./src/index.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Data","Progress","React","RESTData_1","EWSData_1","Factory","getData","mailbox","restUrl","RESTData","Model","EWSData","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","Model_1","Factory_1","StatusMessage_1","SearchResults_1","Feedback_1","ConversationFiler","_super","props","_this","state","progress","GetCallbackToken","componentDidMount","storedResults","length","setState","Success","matches","NotFound","data","getItemsAsync","results","message","Error","error","onSelection","folderId","console","log","onComplete","moveItemsAsync","count","render","createElement","StatusMessage","SearchResults","bind","Feedback","Component","ReactDOM","RequestBuilder","getItemsRequest","messages","builder","beginRequest","map","push","itemId","id","changeKey","endRequest","join","getFolderNamesRequest","folders","folder","moveItemsRequest","findConversationRequest","excludedFolderIdsRequest","Context","loadItems","onLoadComplete","onProgress","onError","GetConversation","makeEwsRequestAsync","result","conversationXml","$","parseXML","getConversation","$conversation","querySelectorAll","filter","item","parents","parseInt","find","text","sameFolderItemIds","each","$this","attr","$otherFolderItemIds","otherFolderItemIds","conversation","conversationId","items","global","loadExcludedFolders","excludedFolders","loadMessages","GetExcludedFolders","foldersXml","itemsXml","getMessages","$messages","parent","msg","querySelector","getAttribute","from","textContent","to","body","slice","loadFolderDisplayNames","folderNamesXml","getFolderDisplayNames","destinations_1","GetFolderNames","parentNode","displayName","Id","BodyPreview","Sender","ToRecipients","ParentFolderId","DisplayName","moveItems","onMoveComplete","context","ExcludedFolders","getCallbackTokenAsync","isRest","status","Office","AsyncResultStatus","Succeeded","collateRequests","requests","onDone","onFail","when","apply","done","_i","arguments","fail","getRestId","diagnostics","hostName","convertToRestId","MailboxEnums","RestVersion","v2_0","token","restConversationId","ajax","url","async","dataType","headers","Authorization","getExcludedFolders","conversationMessages","currentFolderId","excludedFolderIds","restItemId","Count","getFolderNames","folderMap","entry","EmailAddress","Name","address","method","contentType","JSON","stringify","DestinationId","className","href","onClickFolder","handleClick","rows","index","key","onClick","evt","currentTarget","preventDefault","ConversationFiler_1","initialize","functionsRegex","noUI","test","window","location","pathname","storageKey","fileDialog","event","notificationKey","notificationMessages","replaceAsync","type","ItemNotificationMessageType","InformationalMessage","completed","localStorage","setItem","ui","displayDialogAsync","replace","height","width","displayInIframe","dialog","onDialogComplete","close","removeItem","removeAsync","addEventHandler","EventType","DialogMessageReceived","dialogEvent","DialogEventReceived","ProgressIndicator","ErrorMessage","messageParent","parse","getItem","document","getElementById"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Data;\r\n(function (Data) {\r\n    var Progress;\r\n    (function (Progress) {\r\n        Progress[Progress[\"GetCallbackToken\"] = 0] = \"GetCallbackToken\";\r\n        Progress[Progress[\"GetConversation\"] = 1] = \"GetConversation\";\r\n        Progress[Progress[\"GetExcludedFolders\"] = 2] = \"GetExcludedFolders\";\r\n        Progress[Progress[\"GetFolderNames\"] = 3] = \"GetFolderNames\";\r\n        Progress[Progress[\"Success\"] = 4] = \"Success\";\r\n        Progress[Progress[\"NotFound\"] = 5] = \"NotFound\";\r\n        Progress[Progress[\"Error\"] = 6] = \"Error\";\r\n    })(Progress = Data.Progress || (Data.Progress = {}));\r\n})(Data = exports.Data || (exports.Data = {}));\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = React;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar RESTData_1 = __webpack_require__(6);\r\nvar EWSData_1 = __webpack_require__(5);\r\nvar Factory;\r\n(function (Factory) {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    function getData(mailbox) {\r\n        return mailbox.restUrl\r\n            ? new RESTData_1.RESTData.Model(mailbox)\r\n            : new EWSData_1.EWSData.Model(mailbox);\r\n    }\r\n    Factory.getData = getData;\r\n})(Factory = exports.Factory || (exports.Factory = {}));\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(1);\r\nvar Model_1 = __webpack_require__(0);\r\nvar Factory_1 = __webpack_require__(2);\r\nvar StatusMessage_1 = __webpack_require__(9);\r\nvar SearchResults_1 = __webpack_require__(8);\r\nvar Feedback_1 = __webpack_require__(7);\r\nvar ConversationFiler = (function (_super) {\r\n    __extends(ConversationFiler, _super);\r\n    function ConversationFiler(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = { progress: Model_1.Data.Progress.GetCallbackToken };\r\n        return _this;\r\n    }\r\n    // Start the chain of requests by getting a callback token.\r\n    ConversationFiler.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Model_1.Data.Progress.Success, matches: this.props.storedResults });\r\n            }\r\n            else {\r\n                this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n            return;\r\n        }\r\n        else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n        var data = Factory_1.Factory.getData(this.props.mailbox);\r\n        this.setState({ data: data });\r\n        data.getItemsAsync(function (results) {\r\n            if (results.length > 0) {\r\n                _this.setState({ progress: Model_1.Data.Progress.Success, matches: results });\r\n            }\r\n            else {\r\n                _this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n        }, function (progress) {\r\n            _this.setState({ progress: progress });\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.onSelection = function (folderId) {\r\n        var _this = this;\r\n        console.log(\"Selected a folder: \" + folderId);\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n            return;\r\n        }\r\n        this.state.data.moveItemsAsync(folderId, function (count) {\r\n            if (_this.props.onComplete) {\r\n                _this.props.onComplete(folderId);\r\n            }\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(StatusMessage_1.StatusMessage, { progress: this.state.progress, message: this.state.error }),\r\n            React.createElement(SearchResults_1.SearchResults, { matches: this.state.matches, onSelection: this.onSelection.bind(this) }),\r\n            React.createElement(Feedback_1.Feedback, null)));\r\n    };\r\n    return ConversationFiler;\r\n}(React.Component));\r\nexports.ConversationFiler = ConversationFiler;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = ReactDOM;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(0);\r\nvar EWSData;\r\n(function (EWSData) {\r\n    var RequestBuilder = (function () {\r\n        function RequestBuilder() {\r\n        }\r\n        RequestBuilder.getItemsRequest = function (messages) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:GetItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.getFolderNamesRequest = function (folders) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n            folders.map(function (folder) {\r\n                builder.push(\"      <t:FolderId Id=\\\"\" + folder.folderId.id + \"\\\" ChangeKey=\\\"\" + folder.folderId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:FolderIds>', '  </m:GetFolder >', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.moveItemsRequest = function (messages, folderId) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:MoveItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        return RequestBuilder;\r\n    }());\r\n    RequestBuilder.beginRequest = [\r\n        '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n        '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n        '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n        '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n        '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n        '<soap:Header>',\r\n        '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n        '</soap:Header>',\r\n        '<soap:Body>',\r\n    ].join('\\n');\r\n    RequestBuilder.endRequest = [\r\n        '</soap:Body>',\r\n        '</soap:Envelope>'\r\n    ].join('\\n');\r\n    RequestBuilder.findConversationRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:FindConversation>',\r\n        '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n        '    <m:ParentFolderId>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '    </m:ParentFolderId>',\r\n        '  </m:FindConversation>',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    RequestBuilder.excludedFolderIdsRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:GetFolder>',\r\n        '    <m:FolderShape>',\r\n        '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n        '    </m:FolderShape>',\r\n        '    <m:FolderIds>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n        '    </m:FolderIds>',\r\n        '  </m:GetFolder >',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                _this.conversationXml = $.parseXML(result.value);\r\n                _this.getConversation();\r\n            });\r\n        };\r\n        Context.prototype.getConversation = function () {\r\n            var _this = this;\r\n            var $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(\"[Id=\\\"\" + this.mailbox.item.itemId + \"\\\"]\")\r\n                .parents('Conversation');\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n            var messageCount = parseInt($conversation.find('MessageCount').text());\r\n            var globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            var sameFolderItemIds = [];\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            var $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n            sameFolderItemIds.map(function (itemId) {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(\"[Id!=\\\"\" + itemId.id + \"\\\"]\");\r\n            });\r\n            var otherFolderItemIds = [];\r\n            $otherFolderItemIds.each(function () {\r\n                var $this = $(this);\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversation = {\r\n                id: this.mailbox.item.conversationId,\r\n                items: sameFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); }),\r\n                global: otherFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); })\r\n            };\r\n            this.loadExcludedFolders();\r\n        };\r\n        Context.prototype.loadExcludedFolders = function () {\r\n            var _this = this;\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            }\r\n            else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    var foldersXml = $.parseXML(result.value);\r\n                    var excludedFolders = [];\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.excludedFolders = excludedFolders;\r\n                    _this.loadMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.loadMessages = function () {\r\n            var _this = this;\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            }\r\n            else {\r\n                console.log(\"Getting the messages in other folders: \" + this.conversation.global.length);\r\n                this.onProgress(Model_1.Data.Progress.GetConversation);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.itemsXml = $.parseXML(result.value);\r\n                    _this.getMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getMessages = function () {\r\n            var $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n            this.excludedFolders.map(function (folder) {\r\n                $messages = $messages.filter(\"[Id!=\\\"\" + folder.folderId.id + \"\\\"]\");\r\n            });\r\n            $messages = $messages.parent();\r\n            this.conversation.global.map(function (item) {\r\n                for (var i = 0; i < $messages.length; i++) {\r\n                    var msg = $messages[i];\r\n                    if (msg.querySelector(\"ItemId[Id=\\\"\" + item.itemId.id + \"\\\"]\")) {\r\n                        var folderId = msg.querySelector('ParentFolderId');\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            this.loadFolderDisplayNames();\r\n        };\r\n        Context.prototype.loadFolderDisplayNames = function () {\r\n            var _this = this;\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            }\r\n            else {\r\n                var destinations_1 = [];\r\n                this.conversation.global.map(function (item) {\r\n                    if (item.folder) {\r\n                        destinations_1.push(item.folder);\r\n                    }\r\n                });\r\n                if (!destinations_1.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n                console.log(\"Getting the display names of the other folders: \" + destinations_1.length);\r\n                this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations_1), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.folderNamesXml = $.parseXML(result.value);\r\n                    _this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getFolderDisplayNames = function () {\r\n            var _this = this;\r\n            var matches = [];\r\n            this.conversation.global.map(function (item) {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n                var folder = _this.folderNamesXml.querySelector(\"GetFolderResponseMessage > Folders > Folder > FolderId[Id=\\\"\" + item.folder.folderId.id + \"\\\"]\").parentNode;\r\n                item.folder.displayName = folder.querySelector('DisplayName').textContent;\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"Finished loading items in other folders: \" + matches.length);\r\n            this.onLoadComplete(matches);\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                console.log(\"Finished moving items to other folder: \" + _this.conversation.items.length);\r\n                _this.onMoveComplete(_this.conversation.items.length);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    EWSData.Model = Model;\r\n})(EWSData = exports.EWSData || (exports.EWSData = {}));\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(0);\r\nvar RESTData;\r\n(function (RESTData) {\r\n    var Endpoint = '/v2.0/me';\r\n    var ExcludedFolders;\r\n    (function (ExcludedFolders) {\r\n        ExcludedFolders[ExcludedFolders[\"Inbox\"] = 0] = \"Inbox\";\r\n        ExcludedFolders[ExcludedFolders[\"Drafts\"] = 1] = \"Drafts\";\r\n        ExcludedFolders[ExcludedFolders[\"SentItems\"] = 2] = \"SentItems\";\r\n        ExcludedFolders[ExcludedFolders[\"DeletedItems\"] = 3] = \"DeletedItems\";\r\n        // Sentinel value for enumerating the folder names\r\n        ExcludedFolders[ExcludedFolders[\"Count\"] = 4] = \"Count\";\r\n    })(ExcludedFolders || (ExcludedFolders = {}));\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Model_1.Data.Progress.GetCallbackToken);\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    _this.getConversation(result);\r\n                }\r\n                else {\r\n                    _this.onError(result.error.message);\r\n                }\r\n            });\r\n        };\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        Context.prototype.collateRequests = function (requests, onDone, onFail) {\r\n            var _this = this;\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done(function () {\r\n                    var results = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        results[_i] = arguments[_i];\r\n                    }\r\n                    onDone(results.map(function (result) { return result[0]; }));\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n            else {\r\n                requests[0]\r\n                    .done(function (result) {\r\n                    onDone([result]);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n        };\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        Context.prototype.getRestId = function (itemId) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        };\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        Context.prototype.getConversation = function (result) {\r\n            var _this = this;\r\n            this.token = result.value;\r\n            var conversationId = this.mailbox.item.conversationId;\r\n            var restConversationId = this.getRestId(conversationId);\r\n            var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/messages?$filter=ConversationId eq '\" + restConversationId + \"'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId\";\r\n            console.log(\"Getting the list of items in the conversation: \" + restUrl);\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': \"Bearer \" + this.token }\r\n            }).done(function (result) {\r\n                _this.getExcludedFolders(result);\r\n            }).fail(function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        Context.prototype.getExcludedFolders = function (result) {\r\n            var _this = this;\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversationMessages = result.value;\r\n            var currentFolderId;\r\n            var excludedFolderIds = [];\r\n            // We should ignore any messages in the same folder.\r\n            var itemId = this.mailbox.item.itemId;\r\n            var restItemId = this.getRestId(itemId);\r\n            for (var i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            var requests = [];\r\n            for (var i = 0; i < ExcludedFolders.Count; ++i) {\r\n                var folderId = ExcludedFolders[i];\r\n                var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + folderId + \"?$select=Id\";\r\n                console.log(\"Getting excluded folder ID: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + this.token }\r\n                }));\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n                _this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        Context.prototype.getFolderNames = function (currentFolderId, excludedFolderIds) {\r\n            var _this = this;\r\n            var folderMap = [];\r\n            this.conversationMessages.map(function (message) {\r\n                for (var i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n                for (var i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n            var requests = folderMap.map(function (entry) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + entry.folder.Id + \"?$select=Id,DisplayName\";\r\n                console.log(\"Getting included folder name: \" + restUrl);\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                });\r\n            });\r\n            this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    for (var i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                var matches = [];\r\n                folderMap.map(function (entry) {\r\n                    entry.messages.map(function (message) {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(function (address) { return address.EmailAddress.Name; }).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                console.log(\"Finished loading items in other folders: \" + matches.length);\r\n                _this.onLoadComplete(matches);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            var requests = [];\r\n            this.conversationMessages.map(function (message) {\r\n                if (message.ParentFolderId !== _this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/messages/\" + message.Id + \"/move\";\r\n                console.log(\"Moving item: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                }));\r\n            });\r\n            this.collateRequests(requests, function (results) {\r\n                console.log(\"Finished moving items to other folder: \" + results.length);\r\n                _this.onMoveComplete(results.length);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    RESTData.Model = Model;\r\n})(RESTData = exports.RESTData || (exports.RESTData = {}));\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(1);\r\nvar Feedback = (function (_super) {\r\n    __extends(Feedback, _super);\r\n    function Feedback() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Feedback.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: \"feedback\" },\r\n            React.createElement(\"a\", { href: \"https://beandotnet.azurewebsites.net/\" }, \"about this app\"),\r\n            \"\\u00A0\",\r\n            React.createElement(\"a\", { href: \"mailto:wravery@hotmail.com?Subject=Conversation%20Filer%20v2.0%20App%20for%20Outlook\" }, \"send feedback\")));\r\n    };\r\n    return Feedback;\r\n}(React.Component));\r\nexports.Feedback = Feedback;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(1);\r\nvar SearchResults = (function (_super) {\r\n    __extends(SearchResults, _super);\r\n    function SearchResults(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onClickFolder = _this.handleClick.bind(_this);\r\n        return _this;\r\n    }\r\n    SearchResults.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n        var rows = this.props.matches.map(function (value, index) {\r\n            return (React.createElement(\"tr\", { key: index },\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(\"a\", { name: value.folder.Id, onClick: _this.onClickFolder }, value.folder.DisplayName)),\r\n                React.createElement(\"td\", null, value.message.Sender),\r\n                React.createElement(\"td\", null, value.message.ToRecipients),\r\n                React.createElement(\"td\", null, value.message.BodyPreview)));\r\n        });\r\n        return (React.createElement(\"table\", null,\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Folder\"),\r\n                    React.createElement(\"th\", null, \"From\"),\r\n                    React.createElement(\"th\", null, \"To\"),\r\n                    React.createElement(\"th\", null, \"Preview\"))),\r\n            React.createElement(\"tbody\", null, rows)));\r\n    };\r\n    SearchResults.prototype.handleClick = function (evt) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    };\r\n    return SearchResults;\r\n}(React.Component));\r\nexports.SearchResults = SearchResults;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(1);\r\nvar Model_1 = __webpack_require__(0);\r\nvar StatusMessage = (function (_super) {\r\n    __extends(StatusMessage, _super);\r\n    function StatusMessage() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    StatusMessage.prototype.render = function () {\r\n        var className;\r\n        var status;\r\n        switch (this.props.progress) {\r\n            case Model_1.Data.Progress.GetCallbackToken:\r\n            case Model_1.Data.Progress.GetConversation:\r\n            case Model_1.Data.Progress.GetExcludedFolders:\r\n            case Model_1.Data.Progress.GetFolderNames:\r\n                return React.createElement(\"h3\", null, \"Looking for other messages in this conversation...\");\r\n            case Model_1.Data.Progress.Success:\r\n                return null;\r\n            case Model_1.Data.Progress.NotFound:\r\n                return React.createElement(\"h3\", null, \"It looks like you haven't filed this conversation anywhere before.\");\r\n            default:\r\n                return (React.createElement(\"div\", null,\r\n                    React.createElement(\"h3\", null, \"Sorry, I couldn't figure out where this message should go. :(\"),\r\n                    React.createElement(\"span\", null, this.props.message)));\r\n        }\r\n    };\r\n    return StatusMessage;\r\n}(React.Component));\r\nexports.StatusMessage = StatusMessage;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"_references.ts\" />\r\n/// <reference path=\"./components/ConversationFiler.tsx\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(1);\r\nvar ReactDOM = __webpack_require__(4);\r\nvar Model_1 = __webpack_require__(0);\r\nvar Factory_1 = __webpack_require__(2);\r\nvar ConversationFiler_1 = __webpack_require__(3);\r\nOffice.initialize = function () {\r\n    var functionsRegex = /functions\\.html(\\?.*)?$/i;\r\n    var noUI = functionsRegex.test(window.location.pathname);\r\n    var mailbox = (Office.context || {}).mailbox;\r\n    var storageKey = \"conversationFilerMatches\";\r\n    if (noUI) {\r\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\r\n        window.fileDialog = function (event) {\r\n            var data = Factory_1.Factory.getData(mailbox);\r\n            var notificationKey = 'conversationFilerNotification';\r\n            console.log('Starting to load the conversation...');\r\n            data.getItemsAsync(function (results) {\r\n                console.log(\"Loaded the conversation: \" + results.length);\r\n                if (results.length === 0) {\r\n                    mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                        message: \"It looks like you haven't filed this conversation anywhere before.\"\r\n                    });\r\n                    event.completed();\r\n                    return;\r\n                }\r\n                console.log('Showing the dialog...');\r\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\r\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, function (result) {\r\n                    var dialog = result.value;\r\n                    var onDialogComplete = function () {\r\n                        dialog.close();\r\n                        window.localStorage.removeItem(storageKey);\r\n                        mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n                        event.completed();\r\n                    };\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (dialogEvent) {\r\n                        console.log('Moving the items...');\r\n                        data.moveItemsAsync(dialogEvent.message, function (count) {\r\n                            console.log(\"Finished moving the items: \" + count);\r\n                            onDialogComplete();\r\n                        }, function (message) {\r\n                            console.log(\"Error moving the items: \" + message);\r\n                            onDialogComplete();\r\n                        });\r\n                    });\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                        onDialogComplete();\r\n                    });\r\n                });\r\n            }, function (progress) {\r\n                console.log(\"Progress loading the conversation: \" + Model_1.Data.Progress[progress]);\r\n                // Update the progress indicator\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                    message: 'Finding the messages in this conversation...'\r\n                });\r\n            }, function (message) {\r\n                console.log(\"Error loading the conversation: \" + message);\r\n                // Display an error\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                    message: \"Sorry, I couldn't figure out where this message should go.\"\r\n                });\r\n                event.completed();\r\n            });\r\n        };\r\n        return;\r\n    }\r\n    // Show the UI...\r\n    var onComplete;\r\n    var storedResults;\r\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\r\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\r\n        onComplete = function (folderId) {\r\n            Office.context.ui.messageParent(folderId);\r\n        };\r\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey));\r\n    }\r\n    ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: mailbox, onComplete: onComplete, storedResults: storedResults }), document.getElementById(\"conversationFilerRoot\"));\r\n};\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2b4bbbc492b2bd65b659","export module Data {\r\n    export interface Message {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: string;\r\n        ToRecipients: string;\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    export interface Folder {\r\n        Id: string;\r\n        DisplayName: string;\r\n    }\r\n\r\n    export interface Match {\r\n        message: Message;\r\n        folder: Folder;\r\n    }\r\n\r\n    export enum Progress {\r\n        GetCallbackToken,\r\n        GetConversation,\r\n        GetExcludedFolders,\r\n        GetFolderNames,\r\n        Success,\r\n        NotFound,\r\n        Error\r\n    }\r\n\r\n    export interface IModel {\r\n        getItemsAsync(onLoadComplete: (results: Match[]) => void, onProgress: (progress: Progress) => void, onError: (message: string) => void): void;\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Model.ts","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 1\n// module chunks = 0","/// <reference path=\"../_references.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\nimport { RESTData } from \"./RESTData\";\r\nimport { EWSData } from \"./EWSData\";\r\n\r\nexport module Factory {\r\n    // Use the RESTData provider if possible, but if it's not supported, fallback to the EWSData provider\r\n    export function getData(mailbox: Office.Mailbox): Data.IModel {\r\n        return mailbox.restUrl\r\n            ? new RESTData.Model(mailbox)\r\n            : new EWSData.Model(mailbox);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Factory.ts","/// <reference path=\"../_references.ts\" />\r\n\r\nimport * as React from \"react\";\r\nimport * as JQuery from \"jquery\";\r\n\r\nimport { Data } from \"../Data/Model\"\r\nimport { Factory } from \"../Data/Factory\";\r\n\r\nimport { StatusMessage } from \"./StatusMessage\";\r\nimport { SearchResults } from \"./SearchResults\";\r\nimport { Feedback } from \"./Feedback\";\r\n\r\nexport interface ConversationFilerProps {\r\n    mailbox: Office.Mailbox;\r\n    storedResults?: Data.Match[];\r\n    onComplete?: (folderId: string) => void;\r\n}\r\n\r\ninterface ConversationFilerState {\r\n    progress: Data.Progress;\r\n    data?: Data.IModel;\r\n    error?: string;\r\n    matches?: Data.Match[];\r\n}\r\n\r\nexport class ConversationFiler extends React.Component<ConversationFilerProps, ConversationFilerState> {\r\n    constructor(props: ConversationFilerProps) {\r\n        super(props);\r\n        this.state = { progress: Data.Progress.GetCallbackToken };\r\n    }\r\n\r\n    // Start the chain of requests by getting a callback token.\r\n    componentDidMount() {\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: this.props.storedResults });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n\r\n            return;\r\n        } else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n\r\n        const data = Factory.getData(this.props.mailbox);\r\n\r\n        this.setState({ data: data });\r\n\r\n        data.getItemsAsync((results) => {\r\n            if (results.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: results });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n        }, (progress) => {\r\n            this.setState({ progress: progress });\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    private onSelection(folderId: string) {\r\n        console.log(`Selected a folder: ${folderId}`);\r\n\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.state.data.moveItemsAsync(folderId, (count) => {\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <StatusMessage progress={this.state.progress} message={this.state.error} />\r\n            <SearchResults matches={this.state.matches} onSelection={this.onSelection.bind(this)} />\r\n            <Feedback />\r\n        </div>);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ConversationFiler.tsx","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 4\n// module chunks = 0","import { Data } from \"./Model\";\r\n\r\nexport module EWSData {\r\n    interface ItemId {\r\n        id: string;\r\n        changeKey: string;\r\n    }\r\n\r\n    interface FolderData {\r\n        folderId: ItemId;\r\n        displayName?: string;\r\n    }\r\n\r\n    interface MessageData {\r\n        itemId: ItemId;\r\n        conversation: ConversationData;\r\n        folder?: FolderData;\r\n        body?: string;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n\r\n    interface ConversationData {\r\n        id: string;\r\n        items: MessageData[];\r\n        global: MessageData[];\r\n    }\r\n\r\n    class RequestBuilder {\r\n        private static beginRequest = [\r\n            '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n            '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n            '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n            '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n            '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n            '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n            '<soap:Header>',\r\n            '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n            '</soap:Header>',\r\n            '<soap:Body>',\r\n        ].join('\\n');\r\n\r\n        private static endRequest = [\r\n            '</soap:Body>',\r\n            '</soap:Envelope>'\r\n        ].join('\\n');\r\n\r\n        static findConversationRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:FindConversation>',\r\n            '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n            '    <m:ParentFolderId>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '    </m:ParentFolderId>',\r\n            '  </m:FindConversation>',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getItemsRequest(messages: MessageData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:GetItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static excludedFolderIdsRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:GetFolder>',\r\n            '    <m:FolderShape>',\r\n            '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n            '    </m:FolderShape>',\r\n            '    <m:FolderIds>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n            '    </m:FolderIds>',\r\n            '  </m:GetFolder >',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getFolderNamesRequest(folders: FolderData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n\r\n            folders.map(folder => {\r\n                builder.push(`      <t:FolderId Id=\"${folder.folderId.id}\" ChangeKey=\"${folder.folderId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:FolderIds>',\r\n                '  </m:GetFolder >',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static moveItemsRequest(messages: MessageData[], folderId: string) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:MoveItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private conversationXml?: XMLDocument;\r\n        private conversation?: ConversationData;\r\n        private excludedFolders?: FolderData[];\r\n        private itemsXml?: XMLDocument;\r\n        private folderNamesXml?: XMLDocument;\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                this.conversationXml = $.parseXML(result.value);\r\n                this.getConversation();\r\n            });\r\n        }\r\n\r\n        private getConversation() {\r\n            const $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(`[Id=\"${(<Office.ItemRead>this.mailbox.item).itemId}\"]`)\r\n                .parents('Conversation');\r\n\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n\r\n            const messageCount = parseInt($conversation.find('MessageCount').text());\r\n            const globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            let sameFolderItemIds: ItemId[] = [];\r\n\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                const $this = $(this);\r\n\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            let $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n\r\n            sameFolderItemIds.map(itemId => {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(`[Id!=\"${itemId.id}\"]`);\r\n            });\r\n\r\n            let otherFolderItemIds: ItemId[] = [];\r\n\r\n            $otherFolderItemIds.each(function () {\r\n                const $this = $(this);\r\n\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversation = {\r\n                id: (<Office.Message>this.mailbox.item).conversationId,\r\n                items: sameFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation })),\r\n                global: otherFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation }))\r\n            };\r\n\r\n            this.loadExcludedFolders();\r\n        }\r\n\r\n        private loadExcludedFolders() {\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            } else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    let foldersXml = $.parseXML(result.value);\r\n                    let excludedFolders: FolderData[] = [];\r\n\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    this.excludedFolders = excludedFolders;\r\n\r\n                    this.loadMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private loadMessages() {\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            } else {\r\n                console.log(`Getting the messages in other folders: ${this.conversation.global.length}`);\r\n                this.onProgress(Data.Progress.GetConversation);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.itemsXml = $.parseXML(result.value);\r\n                    this.getMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getMessages() {\r\n            let $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n\r\n            this.excludedFolders.map(folder => {\r\n                $messages = $messages.filter(`[Id!=\"${folder.folderId.id}\"]`);\r\n            });\r\n\r\n            $messages = $messages.parent();\r\n\r\n            this.conversation.global.map(item => {\r\n                for (let i = 0; i < $messages.length; i++) {\r\n                    const msg = $messages[i];\r\n\r\n                    if (msg.querySelector(`ItemId[Id=\"${item.itemId.id}\"]`)) {\r\n                        let folderId = msg.querySelector('ParentFolderId');\r\n\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.loadFolderDisplayNames();\r\n        }\r\n\r\n        private loadFolderDisplayNames() {\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            } else {\r\n                let destinations: FolderData[] = [];\r\n\r\n                this.conversation.global.map(item => {\r\n                    if (item.folder) {\r\n                        destinations.push(item.folder);\r\n                    }\r\n                });\r\n\r\n                if (!destinations.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Getting the display names of the other folders: ${destinations.length}`);\r\n                this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.folderNamesXml = $.parseXML(result.value);\r\n                    this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getFolderDisplayNames() {\r\n            let matches: Data.Match[] = [];\r\n\r\n            this.conversation.global.map((item: MessageData) => {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n\r\n                const folder = this.folderNamesXml.querySelector(`GetFolderResponseMessage > Folders > Folder > FolderId[Id=\"${item.folder.folderId.id}\"]`).parentNode;\r\n                item.folder.displayName = (<Element>folder).querySelector('DisplayName').textContent;\r\n\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n\r\n            console.log(`Finished loading items in other folders: ${matches.length}`);\r\n            this.onLoadComplete(matches);\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Finished moving items to other folder: ${this.conversation.items.length}`);\r\n                this.onMoveComplete(this.conversation.items.length);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/EWSData.ts","/// <reference path=\"../_references.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\n\r\nexport module RESTData {\r\n    const Endpoint = '/v2.0/me';\r\n\r\n    enum ExcludedFolders {\r\n        Inbox,\r\n        Drafts,\r\n        SentItems,\r\n        DeletedItems,\r\n\r\n        // Sentinel value for enumerating the folder names\r\n        Count\r\n    }\r\n\r\n    interface EmailAddressJson {\r\n        Name: string;\r\n        Address: string;\r\n    }\r\n\r\n    interface AddressJson {\r\n        EmailAddress: EmailAddressJson;\r\n    }\r\n\r\n    interface MessageJson {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: AddressJson;\r\n        ToRecipients: AddressJson[];\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    interface MessageJsonCollection {\r\n        value: MessageJson[];\r\n    }\r\n\r\n    interface FolderJson {\r\n        Id: string;\r\n        DisplayName?: string;\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private token?: string;\r\n        private currentFolderId?: string;\r\n        private conversationMessages?: MessageJson[];\r\n        private excludedFolderIds?: string[];\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Data.Progress.GetCallbackToken);\r\n\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true },\r\n                (result: Office.AsyncResult) => {\r\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                        this.getConversation(result);\r\n                    } else {\r\n                        this.onError(result.error.message);\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        private collateRequests<T>(requests: JQueryPromise<T>[], onDone: (results: T[]) => void, onFail: (message: string) => void): void {\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done((...results: any[]) => {\r\n                        onDone(results.map(result => <T>result[0]));\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            } else {\r\n                requests[0]\r\n                    .done((result: T) => {\r\n                        onDone([result]);\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            }\r\n        }\r\n\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        private getRestId(itemId: string) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        }\r\n\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        private getConversation(result: Office.AsyncResult) {\r\n            this.token = <string>result.value;\r\n\r\n            const conversationId = (<Office.Message>this.mailbox.item).conversationId;\r\n            const restConversationId = this.getRestId(conversationId);\r\n            const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages?$filter=ConversationId eq '${restConversationId}'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId`;\r\n\r\n            console.log(`Getting the list of items in the conversation: ${restUrl}`);\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': `Bearer ${this.token}` }\r\n            }).done((result: MessageJsonCollection) => {\r\n                this.getExcludedFolders(result);\r\n            }).fail((message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        private getExcludedFolders(result: MessageJsonCollection) {\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversationMessages = result.value;\r\n\r\n            let currentFolderId: string;\r\n            let excludedFolderIds: string[] = [];\r\n\r\n            // We should ignore any messages in the same folder.\r\n            const itemId = (<Office.ItemRead>this.mailbox.item).itemId;\r\n            const restItemId = this.getRestId(itemId);\r\n\r\n            for (let i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            for (let i = 0; i < ExcludedFolders.Count; ++i) {\r\n                const folderId = ExcludedFolders[i];\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${folderId}?$select=Id`;\r\n\r\n                console.log(`Getting excluded folder ID: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            }\r\n\r\n            this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results) => {\r\n                results.map((value) => {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n\r\n                this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, (message) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        private getFolderNames(currentFolderId: string, excludedFolderIds: string[]) {\r\n            let folderMap: {\r\n                folder: FolderJson;\r\n                messages: MessageJson[];\r\n            }[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                for (let i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n\r\n            let requests = folderMap.map((entry) => {\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${entry.folder.Id}?$select=Id,DisplayName`;\r\n\r\n                console.log(`Getting included folder name: ${restUrl}`);\r\n\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                });\r\n            });\r\n\r\n            this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\r\n                results.map((value) => {\r\n                    for (let i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let matches: Data.Match[] = [];\r\n\r\n                folderMap.map((entry) => {\r\n                    entry.messages.map((message) => {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(address => address.EmailAddress.Name).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                console.log(`Finished loading items in other folders: ${matches.length}`);\r\n                this.onLoadComplete(matches);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                if (message.ParentFolderId !== this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages/${message.Id}/move`;\r\n\r\n                console.log(`Moving item: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            });\r\n\r\n            this.collateRequests(<JQueryPromise<MessageJson>[]>requests, (results: MessageJson[]) => {\r\n                console.log(`Finished moving items to other folder: ${results.length}`);\r\n                this.onMoveComplete(results.length);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/RESTData.ts","import * as React from \"react\";\r\n\r\nexport class Feedback extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (<div className=\"feedback\">\r\n            <a href=\"https://beandotnet.azurewebsites.net/\">about this app</a>\r\n            &nbsp;\r\n            <a href=\"mailto:wravery@hotmail.com?Subject=Conversation%20Filer%20v2.0%20App%20for%20Outlook\">send feedback</a>\r\n        </div>);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Feedback.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface SearchResultsProps {\r\n    matches: Data.Match[];\r\n    onSelection: (folderId: string) => void;\r\n}\r\n\r\nexport class SearchResults extends React.Component<SearchResultsProps, undefined> {\r\n    constructor(props: SearchResultsProps) {\r\n        super(props);\r\n        this.onClickFolder = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let rows = this.props.matches.map((value, index) => {\r\n            return (<tr key={index}>\r\n                <td><a name={value.folder.Id} onClick={this.onClickFolder}>{value.folder.DisplayName}</a></td>\r\n                <td>{value.message.Sender}</td>\r\n                <td>{value.message.ToRecipients}</td>\r\n                <td>{value.message.BodyPreview}</td>\r\n            </tr>);\r\n        });\r\n\r\n        return (<table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Folder</th>\r\n                    <th>From</th>\r\n                    <th>To</th>\r\n                    <th>Preview</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </table>);\r\n    }\r\n\r\n    private handleClick(evt: React.MouseEvent<HTMLAnchorElement>) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    private onClickFolder: React.EventHandler<React.MouseEvent<HTMLAnchorElement>>;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/SearchResults.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface StatusMessageProps {\r\n    progress: Data.Progress;\r\n    message?: string;\r\n}\r\n\r\nexport class StatusMessage extends React.Component<StatusMessageProps, undefined> {\r\n    render() {\r\n        let className: string;\r\n        let status: string;\r\n\r\n        switch (this.props.progress) {\r\n            case Data.Progress.GetCallbackToken:\r\n            case Data.Progress.GetConversation:\r\n            case Data.Progress.GetExcludedFolders:\r\n            case Data.Progress.GetFolderNames:\r\n                return <h3>Looking for other messages in this conversation...</h3>;\r\n\r\n            case Data.Progress.Success:\r\n                return null;\r\n\r\n            case Data.Progress.NotFound:\r\n                return <h3>It looks like you haven't filed this conversation anywhere before.</h3>;\r\n\r\n            default:\r\n                return (<div>\r\n                    <h3>Sorry, I couldn't figure out where this message should go. :(</h3>\r\n                    <span>{this.props.message}</span>\r\n                </div>);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/StatusMessage.tsx","/// <reference path=\"_references.ts\" />\r\n/// <reference path=\"./components/ConversationFiler.tsx\" />\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { Data } from \"./Data/Model\";\r\nimport { Factory } from \"./Data/Factory\";\r\n\r\nimport { ConversationFiler } from \"./components/ConversationFiler\";\r\n\r\nOffice.initialize = function () {\r\n    const functionsRegex = /functions\\.html(\\?.*)?$/i;\r\n    const noUI = functionsRegex.test(window.location.pathname);\r\n    const mailbox = (Office.context || ({} as Office.Context)).mailbox;\r\n    const storageKey = \"conversationFilerMatches\";\r\n\r\n    if (noUI) {\r\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\r\n        (window as any).fileDialog = function (event: any) {\r\n            const data = Factory.getData(mailbox);\r\n            const notificationKey = 'conversationFilerNotification';\r\n\r\n            console.log('Starting to load the conversation...');\r\n\r\n            data.getItemsAsync((results) => {\r\n                console.log(`Loaded the conversation: ${results.length}`);\r\n\r\n                if (results.length === 0) {\r\n                    mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                        message: `It looks like you haven't filed this conversation anywhere before.`\r\n                    });\r\n                    event.completed();\r\n\r\n                    return;\r\n                }\r\n\r\n                console.log('Showing the dialog...');\r\n\r\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\r\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, (result) => {\r\n                    const dialog = result.value as Office.DialogHandler;\r\n                    const onDialogComplete = () => {\r\n                        dialog.close();\r\n                        window.localStorage.removeItem(storageKey);\r\n                        mailbox.item.notificationMessages.removeAsync(notificationKey);\r\n                        event.completed();\r\n                    };\r\n\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, (dialogEvent: { message: string }) => {\r\n                        console.log('Moving the items...');\r\n\r\n                        data.moveItemsAsync(dialogEvent.message, (count) => {\r\n                            console.log(`Finished moving the items: ${count}`);\r\n\r\n                            onDialogComplete();\r\n                        }, (message) => {\r\n                            console.log(`Error moving the items: ${message}`);\r\n\r\n                            onDialogComplete();\r\n                        });\r\n                    });\r\n\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\r\n                        onDialogComplete();\r\n                    });\r\n                });\r\n            }, (progress) => {\r\n                console.log(`Progress loading the conversation: ${Data.Progress[progress]}`);\r\n\r\n                // Update the progress indicator\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ProgressIndicator,\r\n                    message: 'Finding the messages in this conversation...'\r\n                });\r\n            }, (message) => {\r\n                console.log(`Error loading the conversation: ${message}`);\r\n\r\n                // Display an error\r\n                mailbox.item.notificationMessages.replaceAsync(notificationKey, {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                    message: `Sorry, I couldn't figure out where this message should go.`\r\n                });\r\n                event.completed();\r\n            });\r\n        };\r\n\r\n        return;\r\n    }\r\n\r\n    // Show the UI...\r\n    let onComplete: (folderId: string) => void;\r\n    let storedResults: Data.Match[];\r\n\r\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\r\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\r\n        onComplete = (folderId: string) => {\r\n            Office.context.ui.messageParent(folderId);\r\n        };\r\n\r\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey)) as Data.Match[];\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <ConversationFiler mailbox={mailbox} onComplete={onComplete} storedResults={storedResults} />,\r\n        document.getElementById(\"conversationFilerRoot\")\r\n    );\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}