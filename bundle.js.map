{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 078c384ed453c5ec2165","webpack:///external \"React\"","webpack:///./src/Data/Model.ts","webpack:///./src/Data/EWSData.ts","webpack:///./src/Data/RESTData.ts","webpack:///./src/components/ConversationFiler.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/Feedback.tsx","webpack:///./src/components/SearchResults.tsx","webpack:///./src/components/StatusMessage.tsx","webpack:///./src/index.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","React","Data","Progress","Model_1","EWSData","RequestBuilder","getItemsRequest","messages","builder","beginRequest","map","message","push","itemId","id","changeKey","endRequest","join","getFolderNamesRequest","folders","folder","folderId","moveItemsRequest","findConversationRequest","excludedFolderIdsRequest","Context","mailbox","this","loadItems","onLoadComplete","onProgress","onError","_this","console","log","GetConversation","makeEwsRequestAsync","result","error","conversationXml","$","parseXML","getConversation","$conversation","querySelectorAll","filter","item","parents","length","parseInt","find","text","sameFolderItemIds","each","$this","attr","$otherFolderItemIds","otherFolderItemIds","conversation","conversationId","items","global","loadExcludedFolders","excludedFolders","loadMessages","GetExcludedFolders","foldersXml","itemsXml","getMessages","$messages","parent","msg","querySelector","getAttribute","from","textContent","to","body","slice","loadFolderDisplayNames","folderNamesXml","getFolderDisplayNames","destinations_1","GetFolderNames","matches","parentNode","displayName","Id","BodyPreview","Sender","ToRecipients","ParentFolderId","DisplayName","moveItems","onMoveComplete","Model","context","getItemsAsync","moveItemsAsync","RESTData","ExcludedFolders","GetCallbackToken","getCallbackTokenAsync","isRest","status","Office","AsyncResultStatus","Succeeded","collateRequests","requests","onDone","onFail","when","apply","done","results","_i","arguments","fail","getRestId","diagnostics","hostName","convertToRestId","MailboxEnums","RestVersion","v2_0","token","restConversationId","restUrl","ajax","url","async","dataType","headers","Authorization","getExcludedFolders","conversationMessages","currentFolderId","excludedFolderIds","restItemId","Count","getFolderNames","folderMap","entry","EmailAddress","Name","address","method","contentType","data","JSON","stringify","DestinationId","__extends","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","RESTData_1","EWSData_1","StatusMessage_1","SearchResults_1","Feedback_1","ConversationFiler","_super","props","state","progress","componentDidMount","storedResults","setState","Success","NotFound","Error","onSelection","onComplete","count","render","createElement","StatusMessage","SearchResults","bind","Feedback","Component","ReactDOM","className","href","onClickFolder","handleClick","rows","index","key","onClick","evt","currentTarget","preventDefault","ConversationFiler_1","initialize","functionsRegex","noUI","test","window","location","pathname","fileDialog","event","localStorage","setItem","ui","displayDialogAsync","replace","height","width","displayInIframe","dialog","addEventHandler","EventType","DialogMessageReceived","dialogEvent","close","completed","DialogEventReceived","messageParent","parse","getItem","document","getElementById","testEmpty","setTimeout","testDummy_1","dummyResults"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 9);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = React;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Data;\r\n(function (Data) {\r\n    var Progress;\r\n    (function (Progress) {\r\n        Progress[Progress[\"GetCallbackToken\"] = 0] = \"GetCallbackToken\";\r\n        Progress[Progress[\"GetConversation\"] = 1] = \"GetConversation\";\r\n        Progress[Progress[\"GetExcludedFolders\"] = 2] = \"GetExcludedFolders\";\r\n        Progress[Progress[\"GetFolderNames\"] = 3] = \"GetFolderNames\";\r\n        Progress[Progress[\"Success\"] = 4] = \"Success\";\r\n        Progress[Progress[\"NotFound\"] = 5] = \"NotFound\";\r\n        Progress[Progress[\"Error\"] = 6] = \"Error\";\r\n    })(Progress = Data.Progress || (Data.Progress = {}));\r\n})(Data = exports.Data || (exports.Data = {}));\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar EWSData;\r\n(function (EWSData) {\r\n    var RequestBuilder = (function () {\r\n        function RequestBuilder() {\r\n        }\r\n        RequestBuilder.getItemsRequest = function (messages) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:GetItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.getFolderNamesRequest = function (folders) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n            folders.map(function (folder) {\r\n                builder.push(\"      <t:FolderId Id=\\\"\" + folder.folderId.id + \"\\\" ChangeKey=\\\"\" + folder.folderId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:FolderIds>', '  </m:GetFolder >', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.moveItemsRequest = function (messages, folderId) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            messages.map(function (message) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + message.itemId.id + \"\\\" ChangeKey=\\\"\" + message.itemId.changeKey + \"\\\" />\");\r\n            });\r\n            builder.push('    </m:ItemIds>', '  </m:MoveItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        return RequestBuilder;\r\n    }());\r\n    RequestBuilder.beginRequest = [\r\n        '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n        '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n        '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n        '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n        '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n        '<soap:Header>',\r\n        '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n        '</soap:Header>',\r\n        '<soap:Body>',\r\n    ].join('\\n');\r\n    RequestBuilder.endRequest = [\r\n        '</soap:Body>',\r\n        '</soap:Envelope>'\r\n    ].join('\\n');\r\n    RequestBuilder.findConversationRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:FindConversation>',\r\n        '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n        '    <m:ParentFolderId>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '    </m:ParentFolderId>',\r\n        '  </m:FindConversation>',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    RequestBuilder.excludedFolderIdsRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:GetFolder>',\r\n        '    <m:FolderShape>',\r\n        '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n        '    </m:FolderShape>',\r\n        '    <m:FolderIds>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n        '    </m:FolderIds>',\r\n        '  </m:GetFolder >',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                _this.conversationXml = $.parseXML(result.value);\r\n                _this.getConversation();\r\n            });\r\n        };\r\n        Context.prototype.getConversation = function () {\r\n            var _this = this;\r\n            var $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(\"[Id=\\\"\" + this.mailbox.item.itemId + \"\\\"]\")\r\n                .parents('Conversation');\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n            var messageCount = parseInt($conversation.find('MessageCount').text());\r\n            var globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            var sameFolderItemIds = [];\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            var $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n            sameFolderItemIds.map(function (itemId) {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(\"[Id!=\\\"\" + itemId.id + \"\\\"]\");\r\n            });\r\n            var otherFolderItemIds = [];\r\n            $otherFolderItemIds.each(function () {\r\n                var $this = $(this);\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversation = {\r\n                id: this.mailbox.item.conversationId,\r\n                items: sameFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); }),\r\n                global: otherFolderItemIds.map(function (itemId) { return ({ itemId: itemId, conversation: _this.conversation }); })\r\n            };\r\n            this.loadExcludedFolders();\r\n        };\r\n        Context.prototype.loadExcludedFolders = function () {\r\n            var _this = this;\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            }\r\n            else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    var foldersXml = $.parseXML(result.value);\r\n                    var excludedFolders = [];\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.excludedFolders = excludedFolders;\r\n                    _this.loadMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.loadMessages = function () {\r\n            var _this = this;\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            }\r\n            else {\r\n                console.log(\"Getting the messages in other folders: \" + this.conversation.global.length);\r\n                this.onProgress(Model_1.Data.Progress.GetConversation);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.itemsXml = $.parseXML(result.value);\r\n                    _this.getMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getMessages = function () {\r\n            var $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n            this.excludedFolders.map(function (folder) {\r\n                $messages = $messages.filter(\"[Id!=\\\"\" + folder.folderId.id + \"\\\"]\");\r\n            });\r\n            $messages = $messages.parent();\r\n            this.conversation.global.map(function (item) {\r\n                for (var i = 0; i < $messages.length; i++) {\r\n                    var msg = $messages[i];\r\n                    if (msg.querySelector(\"ItemId[Id=\\\"\" + item.itemId.id + \"\\\"]\")) {\r\n                        var folderId = msg.querySelector('ParentFolderId');\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n            this.loadFolderDisplayNames();\r\n        };\r\n        Context.prototype.loadFolderDisplayNames = function () {\r\n            var _this = this;\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            }\r\n            else {\r\n                var destinations_1 = [];\r\n                this.conversation.global.map(function (item) {\r\n                    if (item.folder) {\r\n                        destinations_1.push(item.folder);\r\n                    }\r\n                });\r\n                if (!destinations_1.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n                console.log(\"Getting the display names of the other folders: \" + destinations_1.length);\r\n                this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations_1), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.folderNamesXml = $.parseXML(result.value);\r\n                    _this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getFolderDisplayNames = function () {\r\n            var _this = this;\r\n            var matches = [];\r\n            this.conversation.global.map(function (item) {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n                var folder = _this.folderNamesXml.querySelector(\"GetFolderResponseMessage > Folders > Folder > FolderId[Id=\\\"\" + item.folder.folderId.id + \"\\\"]\").parentNode;\r\n                item.folder.displayName = folder.querySelector('DisplayName').textContent;\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"Finished loading items in other folders: \" + matches.length);\r\n            this.onLoadComplete(matches);\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                console.log(\"Finished moving items to other folder: \" + _this.conversation.items.length);\r\n                _this.onMoveComplete(_this.conversation.items.length);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    EWSData.Model = Model;\r\n})(EWSData = exports.EWSData || (exports.EWSData = {}));\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar RESTData;\r\n(function (RESTData) {\r\n    var Endpoint = '/v2.0/me';\r\n    var ExcludedFolders;\r\n    (function (ExcludedFolders) {\r\n        ExcludedFolders[ExcludedFolders[\"Inbox\"] = 0] = \"Inbox\";\r\n        ExcludedFolders[ExcludedFolders[\"Drafts\"] = 1] = \"Drafts\";\r\n        ExcludedFolders[ExcludedFolders[\"SentItems\"] = 2] = \"SentItems\";\r\n        ExcludedFolders[ExcludedFolders[\"DeletedItems\"] = 3] = \"DeletedItems\";\r\n        // Sentinel value for enumerating the folder names\r\n        ExcludedFolders[ExcludedFolders[\"Count\"] = 4] = \"Count\";\r\n    })(ExcludedFolders || (ExcludedFolders = {}));\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Model_1.Data.Progress.GetCallbackToken);\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    _this.getConversation(result);\r\n                }\r\n                else {\r\n                    _this.onError(result.error.message);\r\n                }\r\n            });\r\n        };\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        Context.prototype.collateRequests = function (requests, onDone, onFail) {\r\n            var _this = this;\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done(function () {\r\n                    var results = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        results[_i] = arguments[_i];\r\n                    }\r\n                    onDone(results.map(function (result) { return result[0]; }));\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n            else {\r\n                requests[0]\r\n                    .done(function (result) {\r\n                    onDone([result]);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n        };\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        Context.prototype.getRestId = function (itemId) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        };\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        Context.prototype.getConversation = function (result) {\r\n            var _this = this;\r\n            this.token = result.value;\r\n            var conversationId = this.mailbox.item.conversationId;\r\n            var restConversationId = this.getRestId(conversationId);\r\n            var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/messages?$filter=ConversationId eq '\" + restConversationId + \"'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId\";\r\n            console.log(\"Getting the list of items in the conversation: \" + restUrl);\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': \"Bearer \" + this.token }\r\n            }).done(function (result) {\r\n                _this.getExcludedFolders(result);\r\n            }).fail(function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        Context.prototype.getExcludedFolders = function (result) {\r\n            var _this = this;\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversationMessages = result.value;\r\n            var currentFolderId;\r\n            var excludedFolderIds = [];\r\n            // We should ignore any messages in the same folder.\r\n            var itemId = this.mailbox.item.itemId;\r\n            var restItemId = this.getRestId(itemId);\r\n            for (var i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            var requests = [];\r\n            for (var i = 0; i < ExcludedFolders.Count; ++i) {\r\n                var folderId = ExcludedFolders[i];\r\n                var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + folderId + \"?$select=Id\";\r\n                console.log(\"Getting excluded folder ID: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + this.token }\r\n                }));\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n                _this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        Context.prototype.getFolderNames = function (currentFolderId, excludedFolderIds) {\r\n            var _this = this;\r\n            var folderMap = [];\r\n            this.conversationMessages.map(function (message) {\r\n                for (var i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n                for (var i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n            var requests = folderMap.map(function (entry) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + entry.folder.Id + \"?$select=Id,DisplayName\";\r\n                console.log(\"Getting included folder name: \" + restUrl);\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                });\r\n            });\r\n            this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    for (var i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                var matches = [];\r\n                folderMap.map(function (entry) {\r\n                    entry.messages.map(function (message) {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(function (address) { return address.EmailAddress.Name; }).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                console.log(\"Finished loading items in other folders: \" + matches.length);\r\n                _this.onLoadComplete(matches);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            var requests = [];\r\n            this.conversationMessages.map(function (message) {\r\n                if (message.ParentFolderId !== _this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/messages/\" + message.Id + \"/move\";\r\n                console.log(\"Moving item: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                }));\r\n            });\r\n            this.collateRequests(requests, function (results) {\r\n                console.log(\"Finished moving items to other folder: \" + results.length);\r\n                _this.onMoveComplete(results.length);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    RESTData.Model = Model;\r\n})(RESTData = exports.RESTData || (exports.RESTData = {}));\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar RESTData_1 = __webpack_require__(3);\r\nvar EWSData_1 = __webpack_require__(2);\r\nvar StatusMessage_1 = __webpack_require__(8);\r\nvar SearchResults_1 = __webpack_require__(7);\r\nvar Feedback_1 = __webpack_require__(6);\r\nvar ConversationFiler = (function (_super) {\r\n    __extends(ConversationFiler, _super);\r\n    function ConversationFiler(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = { progress: Model_1.Data.Progress.GetCallbackToken };\r\n        return _this;\r\n    }\r\n    // Start the chain of requests by getting a callback token.\r\n    ConversationFiler.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Model_1.Data.Progress.Success, matches: this.props.storedResults });\r\n            }\r\n            else {\r\n                this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n            return;\r\n        }\r\n        else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n        var data = this.props.mailbox.restUrl\r\n            ? new RESTData_1.RESTData.Model(this.props.mailbox)\r\n            : new EWSData_1.EWSData.Model(this.props.mailbox);\r\n        this.setState({ data: data });\r\n        data.getItemsAsync(function (results) {\r\n            if (results.length > 0) {\r\n                _this.setState({ progress: Model_1.Data.Progress.Success, matches: results });\r\n            }\r\n            else {\r\n                _this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n        }, function (progress) {\r\n            _this.setState({ progress: progress });\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.onSelection = function (folderId) {\r\n        var _this = this;\r\n        console.log(\"Selected a folder: \" + folderId);\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n            return;\r\n        }\r\n        this.state.data.moveItemsAsync(folderId, function (count) {\r\n            if (_this.props.onComplete) {\r\n                _this.props.onComplete(folderId);\r\n            }\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(StatusMessage_1.StatusMessage, { progress: this.state.progress, message: this.state.error }),\r\n            React.createElement(SearchResults_1.SearchResults, { matches: this.state.matches, onSelection: this.onSelection.bind(this) }),\r\n            React.createElement(Feedback_1.Feedback, null)));\r\n    };\r\n    return ConversationFiler;\r\n}(React.Component));\r\nexports.ConversationFiler = ConversationFiler;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = ReactDOM;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Feedback = (function (_super) {\r\n    __extends(Feedback, _super);\r\n    function Feedback() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Feedback.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: \"feedback\" },\r\n            React.createElement(\"a\", { href: \"https://beandotnet.azurewebsites.net/\" }, \"about this app\"),\r\n            \"\\u00A0\",\r\n            React.createElement(\"a\", { href: \"mailto:wravery@hotmail.com?Subject=Auto%20Filer%20App%20for%20Outlook\" }, \"send feedback\")));\r\n    };\r\n    return Feedback;\r\n}(React.Component));\r\nexports.Feedback = Feedback;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar SearchResults = (function (_super) {\r\n    __extends(SearchResults, _super);\r\n    function SearchResults(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onClickFolder = _this.handleClick.bind(_this);\r\n        return _this;\r\n    }\r\n    SearchResults.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n        var rows = this.props.matches.map(function (value, index) {\r\n            return (React.createElement(\"tr\", { key: index },\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(\"a\", { name: value.folder.Id, onClick: _this.onClickFolder }, value.folder.DisplayName)),\r\n                React.createElement(\"td\", null, value.message.Sender),\r\n                React.createElement(\"td\", null, value.message.ToRecipients),\r\n                React.createElement(\"td\", null, value.message.BodyPreview)));\r\n        });\r\n        return (React.createElement(\"table\", null,\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Folder\"),\r\n                    React.createElement(\"th\", null, \"From\"),\r\n                    React.createElement(\"th\", null, \"To\"),\r\n                    React.createElement(\"th\", null, \"Preview\"))),\r\n            React.createElement(\"tbody\", null, rows)));\r\n    };\r\n    SearchResults.prototype.handleClick = function (evt) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    };\r\n    return SearchResults;\r\n}(React.Component));\r\nexports.SearchResults = SearchResults;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar StatusMessage = (function (_super) {\r\n    __extends(StatusMessage, _super);\r\n    function StatusMessage() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    StatusMessage.prototype.render = function () {\r\n        var className;\r\n        var status;\r\n        switch (this.props.progress) {\r\n            case Model_1.Data.Progress.GetCallbackToken:\r\n            case Model_1.Data.Progress.GetConversation:\r\n            case Model_1.Data.Progress.GetExcludedFolders:\r\n            case Model_1.Data.Progress.GetFolderNames:\r\n                return React.createElement(\"h3\", null, \"Looking for other messages in this conversation...\");\r\n            case Model_1.Data.Progress.Success:\r\n                return null;\r\n            case Model_1.Data.Progress.NotFound:\r\n                return React.createElement(\"h3\", null, \"It looks like you haven't filed this conversation anywhere before.\");\r\n            default:\r\n                return (React.createElement(\"div\", null,\r\n                    React.createElement(\"h3\", null, \"Sorry, I couldn't figure out where this message should go. :(\"),\r\n                    React.createElement(\"span\", null, this.props.message)));\r\n        }\r\n    };\r\n    return StatusMessage;\r\n}(React.Component));\r\nexports.StatusMessage = StatusMessage;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"_references.ts\" />\r\n/// <reference path=\"./components/ConversationFiler.tsx\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar ReactDOM = __webpack_require__(5);\r\nvar RESTData_1 = __webpack_require__(3);\r\nvar EWSData_1 = __webpack_require__(2);\r\nvar ConversationFiler_1 = __webpack_require__(4);\r\nOffice.initialize = function () {\r\n    var functionsRegex = /functions\\.html(\\?.*)?$/i;\r\n    var noUI = functionsRegex.test(window.location.pathname);\r\n    var mailbox = (Office.context || {}).mailbox;\r\n    var storageKey = \"conversationFilerMatches\";\r\n    if (noUI) {\r\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\r\n        window.fileDialog = function (event) {\r\n            var data = mailbox.restUrl\r\n                ? new RESTData_1.RESTData.Model(mailbox)\r\n                : new EWSData_1.EWSData.Model(mailbox);\r\n            data.getItemsAsync(function (results) {\r\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\r\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, function (result) {\r\n                    var dialog = result.value;\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (dialogEvent) {\r\n                        data.moveItemsAsync(dialogEvent.message, function (count) {\r\n                            dialog.close();\r\n                            event.completed();\r\n                        }, function (message) {\r\n                            // no-op...\r\n                            dialog.close();\r\n                            event.completed();\r\n                        });\r\n                    });\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                        event.completed();\r\n                    });\r\n                });\r\n            }, function (progress) {\r\n                // no-op...\r\n            }, function (message) {\r\n                event.completed();\r\n            });\r\n        };\r\n        return;\r\n    }\r\n    // Show the UI...\r\n    var onComplete;\r\n    var storedResults;\r\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\r\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\r\n        onComplete = function (folderId) {\r\n            Office.context.ui.messageParent(folderId);\r\n        };\r\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey));\r\n    }\r\n    ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: mailbox, onComplete: onComplete, storedResults: storedResults }), document.getElementById(\"conversationFilerRoot\"));\r\n    // ...and if we're running outside of an Outlook client, run through the tests\r\n    if (!mailbox && !storedResults) {\r\n        var testEmpty = function () {\r\n            console.log(\"Testing the behavior with an empty set of matches...\");\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(React.createElement(\"div\", null, \"Testing...\"), document.getElementById(\"conversationFilerRoot\"));\r\n            ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: null, storedResults: [] }), document.getElementById(\"conversationFilerRoot\"));\r\n            window.setTimeout(testDummy_1, 3000);\r\n        };\r\n        var testDummy_1 = function () {\r\n            console.log(\"Testing the behavior with a set of mock matches...\");\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(React.createElement(\"div\", null, \"Testing...\"), document.getElementById(\"conversationFilerRoot\"));\r\n            var dummyResults = [{\r\n                    folder: {\r\n                        Id: 'folderId1',\r\n                        DisplayName: 'Folder 1'\r\n                    },\r\n                    message: {\r\n                        Id: 'messageId1',\r\n                        BodyPreview: 'Here\\'s a preview of a message body',\r\n                        Sender: 'Foo Bar',\r\n                        ToRecipients: 'Baz Bar',\r\n                        ParentFolderId: 'folderId1'\r\n                    }\r\n                }, {\r\n                    folder: {\r\n                        Id: 'folderId2',\r\n                        DisplayName: 'Folder 2'\r\n                    },\r\n                    message: {\r\n                        Id: 'messageId2',\r\n                        BodyPreview: 'Here\\'s another message body',\r\n                        Sender: 'Baz Bar',\r\n                        ToRecipients: 'Foo Bar',\r\n                        ParentFolderId: 'folderId2'\r\n                    }\r\n                }];\r\n            ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: null, storedResults: dummyResults }), document.getElementById(\"conversationFilerRoot\"));\r\n        };\r\n        window.setTimeout(testEmpty, 3000);\r\n    }\r\n};\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 078c384ed453c5ec2165","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export module Data {\r\n    export interface Message {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: string;\r\n        ToRecipients: string;\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    export interface Folder {\r\n        Id: string;\r\n        DisplayName: string;\r\n    }\r\n\r\n    export interface Match {\r\n        message: Message;\r\n        folder: Folder;\r\n    }\r\n\r\n    export enum Progress {\r\n        GetCallbackToken,\r\n        GetConversation,\r\n        GetExcludedFolders,\r\n        GetFolderNames,\r\n        Success,\r\n        NotFound,\r\n        Error\r\n    }\r\n\r\n    export interface IModel {\r\n        getItemsAsync(onLoadComplete: (results: Match[]) => void, onProgress: (progress: Progress) => void, onError: (message: string) => void): void;\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Model.ts","import { Data } from \"./Model\";\r\n\r\nexport module EWSData {\r\n    interface ItemId {\r\n        id: string;\r\n        changeKey: string;\r\n    }\r\n\r\n    interface FolderData {\r\n        folderId: ItemId;\r\n        displayName?: string;\r\n    }\r\n\r\n    interface MessageData {\r\n        itemId: ItemId;\r\n        conversation: ConversationData;\r\n        folder?: FolderData;\r\n        body?: string;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n\r\n    interface ConversationData {\r\n        id: string;\r\n        items: MessageData[];\r\n        global: MessageData[];\r\n    }\r\n\r\n    class RequestBuilder {\r\n        private static beginRequest = [\r\n            '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n            '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n            '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n            '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n            '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n            '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n            '<soap:Header>',\r\n            '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n            '</soap:Header>',\r\n            '<soap:Body>',\r\n        ].join('\\n');\r\n\r\n        private static endRequest = [\r\n            '</soap:Body>',\r\n            '</soap:Envelope>'\r\n        ].join('\\n');\r\n\r\n        static findConversationRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:FindConversation>',\r\n            '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n            '    <m:ParentFolderId>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '    </m:ParentFolderId>',\r\n            '  </m:FindConversation>',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getItemsRequest(messages: MessageData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:GetItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static excludedFolderIdsRequest = [\r\n            RequestBuilder.beginRequest,\r\n            '  <m:GetFolder>',\r\n            '    <m:FolderShape>',\r\n            '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n            '    </m:FolderShape>',\r\n            '    <m:FolderIds>',\r\n            '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n            '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n            '    </m:FolderIds>',\r\n            '  </m:GetFolder >',\r\n            RequestBuilder.endRequest\r\n        ].join('\\n');\r\n\r\n        static getFolderNamesRequest(folders: FolderData[]) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n\r\n            folders.map(folder => {\r\n                builder.push(`      <t:FolderId Id=\"${folder.folderId.id}\" ChangeKey=\"${folder.folderId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:FolderIds>',\r\n                '  </m:GetFolder >',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n\r\n        static moveItemsRequest(messages: MessageData[], folderId: string) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n\r\n            messages.map(message => {\r\n                builder.push(`      <t:ItemId Id=\"${message.itemId.id}\" ChangeKey=\"${message.itemId.changeKey}\" />`);\r\n            });\r\n\r\n            builder.push(\r\n                '    </m:ItemIds>',\r\n                '  </m:MoveItem>',\r\n                RequestBuilder.endRequest);\r\n\r\n            return builder.join('\\n');\r\n        }\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private conversationXml?: XMLDocument;\r\n        private conversation?: ConversationData;\r\n        private excludedFolders?: FolderData[];\r\n        private itemsXml?: XMLDocument;\r\n        private folderNamesXml?: XMLDocument;\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                this.conversationXml = $.parseXML(result.value);\r\n                this.getConversation();\r\n            });\r\n        }\r\n\r\n        private getConversation() {\r\n            const $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(`[Id=\"${(<Office.ItemRead>this.mailbox.item).itemId}\"]`)\r\n                .parents('Conversation');\r\n\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n\r\n            const messageCount = parseInt($conversation.find('MessageCount').text());\r\n            const globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            let sameFolderItemIds: ItemId[] = [];\r\n\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                const $this = $(this);\r\n\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            let $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n\r\n            sameFolderItemIds.map(itemId => {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(`[Id!=\"${itemId.id}\"]`);\r\n            });\r\n\r\n            let otherFolderItemIds: ItemId[] = [];\r\n\r\n            $otherFolderItemIds.each(function () {\r\n                const $this = $(this);\r\n\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversation = {\r\n                id: (<Office.Message>this.mailbox.item).conversationId,\r\n                items: sameFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation })),\r\n                global: otherFolderItemIds.map(itemId => ({ itemId: itemId, conversation: this.conversation }))\r\n            };\r\n\r\n            this.loadExcludedFolders();\r\n        }\r\n\r\n        private loadExcludedFolders() {\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            } else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    let foldersXml = $.parseXML(result.value);\r\n                    let excludedFolders: FolderData[] = [];\r\n\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n\r\n                    this.excludedFolders = excludedFolders;\r\n\r\n                    this.loadMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private loadMessages() {\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            } else {\r\n                console.log(`Getting the messages in other folders: ${this.conversation.global.length}`);\r\n                this.onProgress(Data.Progress.GetConversation);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.itemsXml = $.parseXML(result.value);\r\n                    this.getMessages();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getMessages() {\r\n            let $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n\r\n            this.excludedFolders.map(folder => {\r\n                $messages = $messages.filter(`[Id!=\"${folder.folderId.id}\"]`);\r\n            });\r\n\r\n            $messages = $messages.parent();\r\n\r\n            this.conversation.global.map(item => {\r\n                for (let i = 0; i < $messages.length; i++) {\r\n                    const msg = $messages[i];\r\n\r\n                    if (msg.querySelector(`ItemId[Id=\"${item.itemId.id}\"]`)) {\r\n                        let folderId = msg.querySelector('ParentFolderId');\r\n\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.loadFolderDisplayNames();\r\n        }\r\n\r\n        private loadFolderDisplayNames() {\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            } else {\r\n                let destinations: FolderData[] = [];\r\n\r\n                this.conversation.global.map(item => {\r\n                    if (item.folder) {\r\n                        destinations.push(item.folder);\r\n                    }\r\n                });\r\n\r\n                if (!destinations.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Getting the display names of the other folders: ${destinations.length}`);\r\n                this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), (result) => {\r\n                    if (!result.value) {\r\n                        this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n\r\n                    this.folderNamesXml = $.parseXML(result.value);\r\n                    this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        }\r\n\r\n        private getFolderDisplayNames() {\r\n            let matches: Data.Match[] = [];\r\n\r\n            this.conversation.global.map((item: MessageData) => {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n\r\n                const folder = this.folderNamesXml.querySelector(`GetFolderResponseMessage > Folders > Folder > FolderId[Id=\"${item.folder.folderId.id}\"]`).parentNode;\r\n                item.folder.displayName = (<Element>folder).querySelector('DisplayName').textContent;\r\n\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n\r\n            console.log(`Finished loading items in other folders: ${matches.length}`);\r\n            this.onLoadComplete(matches);\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), (result) => {\r\n                if (!result.value) {\r\n                    this.onError(result.error.message);\r\n                    return;\r\n                }\r\n\r\n                console.log(`Finished moving items to other folder: ${this.conversation.items.length}`);\r\n                this.onMoveComplete(this.conversation.items.length);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/EWSData.ts","/// <reference path=\"../_references.ts\" />\r\n\r\nimport { Data } from \"./Model\";\r\n\r\nexport module RESTData {\r\n    const Endpoint = '/v2.0/me';\r\n\r\n    enum ExcludedFolders {\r\n        Inbox,\r\n        Drafts,\r\n        SentItems,\r\n        DeletedItems,\r\n\r\n        // Sentinel value for enumerating the folder names\r\n        Count\r\n    }\r\n\r\n    interface EmailAddressJson {\r\n        Name: string;\r\n        Address: string;\r\n    }\r\n\r\n    interface AddressJson {\r\n        EmailAddress: EmailAddressJson;\r\n    }\r\n\r\n    interface MessageJson {\r\n        Id: string;\r\n        BodyPreview: string;\r\n        Sender: AddressJson;\r\n        ToRecipients: AddressJson[];\r\n        ParentFolderId: string;\r\n    }\r\n\r\n    interface MessageJsonCollection {\r\n        value: MessageJson[];\r\n    }\r\n\r\n    interface FolderJson {\r\n        Id: string;\r\n        DisplayName?: string;\r\n    }\r\n\r\n    class Context {\r\n        constructor(private mailbox: Office.Mailbox) {\r\n        }\r\n\r\n        private token?: string;\r\n        private currentFolderId?: string;\r\n        private conversationMessages?: MessageJson[];\r\n        private excludedFolderIds?: string[];\r\n\r\n        private onLoadComplete?: (results: Data.Match[]) => void;\r\n        private onProgress?: (progress: Data.Progress) => void;\r\n        private onError?: (message: string) => void;\r\n        private onMoveComplete?: (count: number) => void\r\n\r\n        loadItems(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Data.Progress.GetCallbackToken);\r\n\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true },\r\n                (result: Office.AsyncResult) => {\r\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                        this.getConversation(result);\r\n                    } else {\r\n                        this.onError(result.error.message);\r\n                    }\r\n                });\r\n        }\r\n\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        private collateRequests<T>(requests: JQueryPromise<T>[], onDone: (results: T[]) => void, onFail: (message: string) => void): void {\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done((...results: any[]) => {\r\n                        onDone(results.map(result => <T>result[0]));\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            } else {\r\n                requests[0]\r\n                    .done((result: T) => {\r\n                        onDone([result]);\r\n                    }).fail((message: string) => {\r\n                        this.onError(message);\r\n                    });\r\n            }\r\n        }\r\n\r\n        // If we're on iOS, the IDs we get from Office.context.mailbox.item are already REST IDs. Otherwise we need\r\n        // to convert them from the EWS ID format to the REST ID format.\r\n        private getRestId(itemId: string) {\r\n            if (this.mailbox.diagnostics.hostName === 'OutlookIOS') {\r\n                return itemId;\r\n            }\r\n\r\n            return this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n        }\r\n\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        private getConversation(result: Office.AsyncResult) {\r\n            this.token = <string>result.value;\r\n\r\n            const conversationId = (<Office.Message>this.mailbox.item).conversationId;\r\n            const restConversationId = this.getRestId(conversationId);\r\n            const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages?$filter=ConversationId eq '${restConversationId}'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId`;\r\n\r\n            console.log(`Getting the list of items in the conversation: ${restUrl}`);\r\n            this.onProgress(Data.Progress.GetConversation);\r\n\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': `Bearer ${this.token}` }\r\n            }).done((result: MessageJsonCollection) => {\r\n                this.getExcludedFolders(result);\r\n            }).fail((message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        private getExcludedFolders(result: MessageJsonCollection) {\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.conversationMessages = result.value;\r\n\r\n            let currentFolderId: string;\r\n            let excludedFolderIds: string[] = [];\r\n\r\n            // We should ignore any messages in the same folder.\r\n            const itemId = (<Office.ItemRead>this.mailbox.item).itemId;\r\n            const restItemId = this.getRestId(itemId);\r\n\r\n            for (let i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            for (let i = 0; i < ExcludedFolders.Count; ++i) {\r\n                const folderId = ExcludedFolders[i];\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${folderId}?$select=Id`;\r\n\r\n                console.log(`Getting excluded folder ID: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            }\r\n\r\n            this.onProgress(Data.Progress.GetExcludedFolders);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results) => {\r\n                results.map((value) => {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n\r\n                this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, (message) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        private getFolderNames(currentFolderId: string, excludedFolderIds: string[]) {\r\n            let folderMap: {\r\n                folder: FolderJson;\r\n                messages: MessageJson[];\r\n            }[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                for (let i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n\r\n            let requests = folderMap.map((entry) => {\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${entry.folder.Id}?$select=Id,DisplayName`;\r\n\r\n                console.log(`Getting included folder name: ${restUrl}`);\r\n\r\n                return $.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                });\r\n            });\r\n\r\n            this.onProgress(Data.Progress.GetFolderNames);\r\n\r\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\r\n                results.map((value) => {\r\n                    for (let i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let matches: Data.Match[] = [];\r\n\r\n                folderMap.map((entry) => {\r\n                    entry.messages.map((message) => {\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: message.ToRecipients.map(address => address.EmailAddress.Name).join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n\r\n                console.log(`Finished loading items in other folders: ${matches.length}`);\r\n                this.onLoadComplete(matches);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n\r\n        moveItems(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void) {\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n\r\n            console.log(`Moving items to folder: ${folderId}`);\r\n\r\n            let requests: JQueryXHR[] = [];\r\n\r\n            this.conversationMessages.map((message: MessageJson) => {\r\n                if (message.ParentFolderId !== this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n\r\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages/${message.Id}/move`;\r\n\r\n                console.log(`Moving item: ${restUrl}`);\r\n\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': `Bearer ${this.token}` }\r\n                }));\r\n            });\r\n\r\n            this.collateRequests(<JQueryPromise<MessageJson>[]>requests, (results: MessageJson[]) => {\r\n                console.log(`Finished moving items to other folder: ${results.length}`);\r\n                this.onMoveComplete(results.length);\r\n            }, (message: string) => {\r\n                this.onError(message);\r\n            });\r\n        }\r\n    }\r\n\r\n    export class Model implements Data.IModel {\r\n        private context?: Context;\r\n\r\n        constructor(mailbox: Office.Mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n\r\n        getItemsAsync(onLoadComplete: (results: Data.Match[]) => void, onProgress: (progress: Data.Progress) => void, onError: (message: string) => void): void {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        }\r\n\r\n        moveItemsAsync(folderId: string, onMoveComplete: (count: number) => void, onError: (message: string) => void): void {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/RESTData.ts","/// <reference path=\"../_references.ts\" />\r\n\r\nimport * as React from \"react\";\r\nimport * as JQuery from \"jquery\";\r\n\r\nimport { Data } from \"../Data/Model\"\r\nimport { RESTData } from \"../Data/RESTData\";\r\nimport { EWSData } from \"../Data/EWSData\";\r\n\r\nimport { StatusMessage } from \"./StatusMessage\";\r\nimport { SearchResults } from \"./SearchResults\";\r\nimport { Feedback } from \"./Feedback\";\r\n\r\nexport interface ConversationFilerProps {\r\n    mailbox: Office.Mailbox;\r\n    storedResults?: Data.Match[];\r\n    onComplete?: (folderId: string) => void;\r\n}\r\n\r\ninterface ConversationFilerState {\r\n    progress: Data.Progress;\r\n    data?: Data.IModel;\r\n    error?: string;\r\n    matches?: Data.Match[];\r\n}\r\n\r\nexport class ConversationFiler extends React.Component<ConversationFilerProps, ConversationFilerState> {\r\n    constructor(props: ConversationFilerProps) {\r\n        super(props);\r\n        this.state = { progress: Data.Progress.GetCallbackToken };\r\n    }\r\n\r\n    // Start the chain of requests by getting a callback token.\r\n    componentDidMount() {\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: this.props.storedResults });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n\r\n            return;\r\n        } else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n\r\n        const data = this.props.mailbox.restUrl\r\n            ? new RESTData.Model(this.props.mailbox)\r\n            : new EWSData.Model(this.props.mailbox);\r\n\r\n        this.setState({ data: data });\r\n\r\n        data.getItemsAsync((results) => {\r\n            if (results.length > 0) {\r\n                this.setState({ progress: Data.Progress.Success, matches: results });\r\n            } else {\r\n                this.setState({ progress: Data.Progress.NotFound });\r\n            }\r\n        }, (progress) => {\r\n            this.setState({ progress: progress });\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    private onSelection(folderId: string) {\r\n        console.log(`Selected a folder: ${folderId}`);\r\n\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.state.data.moveItemsAsync(folderId, (count) => {\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n        }, (message) => {\r\n            this.setState({ progress: Data.Progress.Error, error: message });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <StatusMessage progress={this.state.progress} message={this.state.error} />\r\n            <SearchResults matches={this.state.matches} onSelection={this.onSelection.bind(this)} />\r\n            <Feedback />\r\n        </div>);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ConversationFiler.tsx","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 5\n// module chunks = 0","import * as React from \"react\";\r\n\r\nexport class Feedback extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (<div className=\"feedback\">\r\n            <a href=\"https://beandotnet.azurewebsites.net/\">about this app</a>\r\n            &nbsp;\r\n            <a href=\"mailto:wravery@hotmail.com?Subject=Auto%20Filer%20App%20for%20Outlook\">send feedback</a>\r\n        </div>);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Feedback.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface SearchResultsProps {\r\n    matches: Data.Match[];\r\n    onSelection: (folderId: string) => void;\r\n}\r\n\r\nexport class SearchResults extends React.Component<SearchResultsProps, undefined> {\r\n    constructor(props: SearchResultsProps) {\r\n        super(props);\r\n        this.onClickFolder = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let rows = this.props.matches.map((value, index) => {\r\n            return (<tr key={index}>\r\n                <td><a name={value.folder.Id} onClick={this.onClickFolder}>{value.folder.DisplayName}</a></td>\r\n                <td>{value.message.Sender}</td>\r\n                <td>{value.message.ToRecipients}</td>\r\n                <td>{value.message.BodyPreview}</td>\r\n            </tr>);\r\n        });\r\n\r\n        return (<table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Folder</th>\r\n                    <th>From</th>\r\n                    <th>To</th>\r\n                    <th>Preview</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </table>);\r\n    }\r\n\r\n    private handleClick(evt: React.MouseEvent<HTMLAnchorElement>) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    }\r\n\r\n    private onClickFolder: React.EventHandler<React.MouseEvent<HTMLAnchorElement>>;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/SearchResults.tsx","import * as React from \"react\";\r\n\r\nimport { Data } from \"../Data/Model\";\r\n\r\nexport interface StatusMessageProps {\r\n    progress: Data.Progress;\r\n    message?: string;\r\n}\r\n\r\nexport class StatusMessage extends React.Component<StatusMessageProps, undefined> {\r\n    render() {\r\n        let className: string;\r\n        let status: string;\r\n\r\n        switch (this.props.progress) {\r\n            case Data.Progress.GetCallbackToken:\r\n            case Data.Progress.GetConversation:\r\n            case Data.Progress.GetExcludedFolders:\r\n            case Data.Progress.GetFolderNames:\r\n                return <h3>Looking for other messages in this conversation...</h3>;\r\n\r\n            case Data.Progress.Success:\r\n                return null;\r\n\r\n            case Data.Progress.NotFound:\r\n                return <h3>It looks like you haven't filed this conversation anywhere before.</h3>;\r\n\r\n            default:\r\n                return (<div>\r\n                    <h3>Sorry, I couldn't figure out where this message should go. :(</h3>\r\n                    <span>{this.props.message}</span>\r\n                </div>);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/StatusMessage.tsx","/// <reference path=\"_references.ts\" />\r\n/// <reference path=\"./components/ConversationFiler.tsx\" />\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { Data } from \"./Data/Model\";\r\nimport { RESTData } from \"./Data/RESTData\";\r\nimport { EWSData } from \"./Data/EWSData\";\r\n\r\nimport { ConversationFiler } from \"./components/ConversationFiler\";\r\n\r\nOffice.initialize = function () {\r\n    const functionsRegex = /functions\\.html(\\?.*)?$/i;\r\n    const noUI = functionsRegex.test(window.location.pathname);\r\n    const mailbox = (Office.context || ({} as Office.Context)).mailbox;\r\n    const storageKey = \"conversationFilerMatches\";\r\n\r\n    if (noUI) {\r\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\r\n        (window as any).fileDialog = function (event: any) {\r\n            const data = mailbox.restUrl\r\n                ? new RESTData.Model(mailbox)\r\n                : new EWSData.Model(mailbox);\r\n\r\n            data.getItemsAsync((results) => {\r\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\r\n\r\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, (result) => {\r\n                    const dialog = result.value as Office.DialogHandler;\r\n\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, (dialogEvent: { message: string }) => {\r\n                        data.moveItemsAsync(dialogEvent.message, (count) => {\r\n                            dialog.close();\r\n                            event.completed();\r\n                        }, (message) => {\r\n                            // no-op...\r\n                            dialog.close();\r\n                            event.completed();\r\n                        });\r\n                    });\r\n\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\r\n                        event.completed();\r\n                    });\r\n                });\r\n            }, (progress) => {\r\n                // no-op...\r\n            }, (message) => {\r\n                event.completed();\r\n            });\r\n        };\r\n\r\n        return;\r\n    }\r\n\r\n    // Show the UI...\r\n    let onComplete: (folderId: string) => void;\r\n    let storedResults: Data.Match[];\r\n\r\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\r\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\r\n        onComplete = (folderId: string) => {\r\n            Office.context.ui.messageParent(folderId);\r\n        };\r\n\r\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey)) as Data.Match[];\r\n    }\r\n\r\n    ReactDOM.render(\r\n        <ConversationFiler mailbox={mailbox} onComplete={onComplete} storedResults={storedResults} />,\r\n        document.getElementById(\"conversationFilerRoot\")\r\n    );\r\n\r\n    // ...and if we're running outside of an Outlook client, run through the tests\r\n    if (!mailbox && !storedResults) {\r\n        let testEmpty = function () {\r\n            console.log(\"Testing the behavior with an empty set of matches...\");\r\n\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(\r\n                <div>Testing...</div>,\r\n                document.getElementById(\"conversationFilerRoot\")\r\n            );\r\n\r\n            ReactDOM.render(\r\n                <ConversationFiler mailbox={null} storedResults={[]} />,\r\n                document.getElementById(\"conversationFilerRoot\")\r\n            );\r\n\r\n            window.setTimeout(testDummy, 3000);\r\n        }\r\n\r\n        let testDummy = function () {\r\n            console.log(\"Testing the behavior with a set of mock matches...\");\r\n\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(\r\n                <div>Testing...</div>,\r\n                document.getElementById(\"conversationFilerRoot\")\r\n            );\r\n\r\n            const dummyResults: Data.Match[] = [{\r\n                folder: {\r\n                    Id: 'folderId1',\r\n                    DisplayName: 'Folder 1'\r\n                },\r\n                message: {\r\n                    Id: 'messageId1',\r\n                    BodyPreview: 'Here\\'s a preview of a message body',\r\n                    Sender: 'Foo Bar',\r\n                    ToRecipients: 'Baz Bar',\r\n                    ParentFolderId: 'folderId1'\r\n                }\r\n            }, {\r\n                folder: {\r\n                    Id: 'folderId2',\r\n                    DisplayName: 'Folder 2'\r\n                },\r\n                message: {\r\n                    Id: 'messageId2',\r\n                    BodyPreview: 'Here\\'s another message body',\r\n                    Sender: 'Baz Bar',\r\n                    ToRecipients: 'Foo Bar',\r\n                    ParentFolderId: 'folderId2'\r\n                }\r\n            }];\r\n\r\n            ReactDOM.render(\r\n                <ConversationFiler mailbox={null} storedResults={dummyResults} />,\r\n                document.getElementById(\"conversationFilerRoot\")\r\n            );\r\n        }\r\n\r\n        window.setTimeout(testEmpty, 3000);\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}