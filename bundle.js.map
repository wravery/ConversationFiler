{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 08248856d50bc493d403","webpack:///external \"React\"","webpack:///./src/Data/Model.ts","webpack:///./src/Data/EWSData.ts","webpack:///./src/Data/RESTData.ts","webpack:///./src/components/ConversationFiler.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/Feedback.tsx","webpack:///./src/components/SearchResults.tsx","webpack:///./src/components/StatusMessage.tsx","webpack:///./src/index.tsx"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","React","Data","Progress","Model_1","EWSData","RequestBuilder","getItemsRequest","messages","builder","beginRequest","length","push","itemId","id","changeKey","endRequest","join","getFolderNamesRequest","folders","folderId","moveItemsRequest","findConversationRequest","excludedFolderIdsRequest","Context","mailbox","this","loadItems","onLoadComplete","onProgress","onError","_this","console","log","GetConversation","makeEwsRequestAsync","result","error","message","conversationXml","$","parseXML","getConversation","$conversation","querySelectorAll","filter","item","parents","parseInt","find","text","sameFolderItemIds","each","$this","attr","$otherFolderItemIds","otherFolderItemIds","conversation","conversationId","items","global","i_1","loadExcludedFolders","excludedFolders","loadMessages","GetExcludedFolders","foldersXml","itemsXml","getMessages","$messages","parent","j","msg","querySelector","folder","getAttribute","from","textContent","to","body","slice","loadFolderDisplayNames","folderNamesXml","getFolderDisplayNames","destinations","GetFolderNames","matches","map","parentNode","displayName","Id","BodyPreview","Sender","ToRecipients","ParentFolderId","DisplayName","moveItems","onMoveComplete","Model","context","getItemsAsync","moveItemsAsync","RESTData","ExcludedFolders","GetCallbackToken","getCallbackTokenAsync","isRest","status","Office","AsyncResultStatus","Succeeded","collateRequests","requests","onDone","onFail","when","apply","done","results","_i","arguments","values","fail","token","restConversationId","diagnostics","hostName","convertToRestId","MailboxEnums","RestVersion","v2_0","restUrl","ajax","url","async","dataType","headers","Authorization","getExcludedFolders","conversationMessages","currentFolderId","excludedFolderIds","restItemId","Count","getFolderNames","folderMap","entry","recipients","address","EmailAddress","Name","method","contentType","data","JSON","stringify","DestinationId","__extends","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","RESTData_1","EWSData_1","StatusMessage_1","SearchResults_1","Feedback_1","ConversationFiler","_super","props","state","progress","componentDidMount","storedResults","setState","Success","NotFound","Error","onSelection","onComplete","count","render","createElement","StatusMessage","SearchResults","bind","Feedback","Component","ReactDOM","className","href","onClickFolder","handleClick","rows","index","key","onClick","evt","currentTarget","preventDefault","ConversationFiler_1","initialize","functionsRegex","noUI","test","window","location","pathname","fileDialog","event","localStorage","setItem","ui","displayDialogAsync","replace","height","width","displayInIframe","dialog","addEventHandler","EventType","DialogMessageReceived","dialogEvent","close","completed","DialogEventReceived","messageParent","parse","getItem","document","getElementById","testEmpty","setTimeout","testDummy_1","dummyResults"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 9);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = React;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Data;\r\n(function (Data) {\r\n    var Progress;\r\n    (function (Progress) {\r\n        Progress[Progress[\"GetCallbackToken\"] = 0] = \"GetCallbackToken\";\r\n        Progress[Progress[\"GetConversation\"] = 1] = \"GetConversation\";\r\n        Progress[Progress[\"GetExcludedFolders\"] = 2] = \"GetExcludedFolders\";\r\n        Progress[Progress[\"GetFolderNames\"] = 3] = \"GetFolderNames\";\r\n        Progress[Progress[\"Success\"] = 4] = \"Success\";\r\n        Progress[Progress[\"NotFound\"] = 5] = \"NotFound\";\r\n        Progress[Progress[\"Error\"] = 6] = \"Error\";\r\n    })(Progress = Data.Progress || (Data.Progress = {}));\r\n})(Data = exports.Data || (exports.Data = {}));\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar EWSData;\r\n(function (EWSData) {\r\n    var RequestBuilder = (function () {\r\n        function RequestBuilder() {\r\n        }\r\n        RequestBuilder.getItemsRequest = function (messages) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetItem>',\r\n                '    <m:ItemShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:BodyType>Text</t:BodyType>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />',\r\n                '        <t:FieldURI FieldURI=\"message:Sender\" />',\r\n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />',\r\n                '        <t:FieldURI FieldURI=\"item:Body\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:ItemShape>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            for (var i = 0; i < messages.length; i++) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + messages[i].itemId.id + \"\\\" ChangeKey=\\\"\" + messages[i].itemId.changeKey + \"\\\" />\");\r\n            }\r\n            builder.push('    </m:ItemIds>', '  </m:GetItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.getFolderNamesRequest = function (folders) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:GetFolder>',\r\n                '    <m:FolderShape>',\r\n                '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n                '      <t:AdditionalProperties>',\r\n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />',\r\n                '      </t:AdditionalProperties>',\r\n                '    </m:FolderShape>',\r\n                '    <m:FolderIds>'\r\n            ];\r\n            for (var i = 0; i < folders.length; i++) {\r\n                builder.push(\"      <t:FolderId Id=\\\"\" + folders[i].folderId.id + \"\\\" ChangeKey=\\\"\" + folders[i].folderId.changeKey + \"\\\" />\");\r\n            }\r\n            builder.push('    </m:FolderIds>', '  </m:GetFolder >', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        RequestBuilder.moveItemsRequest = function (messages, folderId) {\r\n            var builder = [\r\n                RequestBuilder.beginRequest,\r\n                '  <m:MoveItem>',\r\n                '    <m:ToFolderId>',\r\n                '      <t:FolderId Id=\"' + folderId + '\"/>',\r\n                '    </m:ToFolderId>',\r\n                '    <m:ItemIds>',\r\n            ];\r\n            for (var i = 0; i < messages.length; i++) {\r\n                builder.push(\"      <t:ItemId Id=\\\"\" + messages[i].itemId.id + \"\\\" ChangeKey=\\\"\" + messages[i].itemId.changeKey + \"\\\" />\");\r\n            }\r\n            builder.push('    </m:ItemIds>', '  </m:MoveItem>', RequestBuilder.endRequest);\r\n            return builder.join('\\n');\r\n        };\r\n        return RequestBuilder;\r\n    }());\r\n    RequestBuilder.beginRequest = [\r\n        '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\r\n        '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"',\r\n        '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n        '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n        '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"',\r\n        '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">',\r\n        '<soap:Header>',\r\n        '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />',\r\n        '</soap:Header>',\r\n        '<soap:Body>',\r\n    ].join('\\n');\r\n    RequestBuilder.endRequest = [\r\n        '</soap:Body>',\r\n        '</soap:Envelope>'\r\n    ].join('\\n');\r\n    RequestBuilder.findConversationRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:FindConversation>',\r\n        '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />',\r\n        '    <m:ParentFolderId>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '    </m:ParentFolderId>',\r\n        '  </m:FindConversation>',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    RequestBuilder.excludedFolderIdsRequest = [\r\n        RequestBuilder.beginRequest,\r\n        '  <m:GetFolder>',\r\n        '    <m:FolderShape>',\r\n        '      <t:BaseShape>IdOnly</t:BaseShape>',\r\n        '    </m:FolderShape>',\r\n        '    <m:FolderIds>',\r\n        '      <t:DistinguishedFolderId Id=\"inbox\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"drafts\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"sentitems\"/>',\r\n        '      <t:DistinguishedFolderId Id=\"deleteditems\"/>',\r\n        '    </m:FolderIds>',\r\n        '  </m:GetFolder >',\r\n        RequestBuilder.endRequest\r\n    ].join('\\n');\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Finding the conversation with EWS...');\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                _this.conversationXml = $.parseXML(result.value);\r\n                _this.getConversation();\r\n            });\r\n        };\r\n        Context.prototype.getConversation = function () {\r\n            var $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\r\n                .filter(\"[Id=\\\"\" + this.mailbox.item.itemId + \"\\\"]\")\r\n                .parents('Conversation');\r\n            if (!$conversation.length) {\r\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\r\n                return;\r\n            }\r\n            var messageCount = parseInt($conversation.find('MessageCount').text());\r\n            var globalCount = parseInt($conversation.find('GlobalMessageCount').text());\r\n            if (messageCount >= globalCount) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            var sameFolderItemIds = [];\r\n            $conversation.find('ItemIds > ItemId').each(function () {\r\n                var $this = $(this);\r\n                sameFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            var $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\r\n            for (var i = 0; i < sameFolderItemIds.length; i++) {\r\n                $otherFolderItemIds = $otherFolderItemIds.filter(\"[Id!=\\\"\" + sameFolderItemIds[i].id + \"\\\"]\");\r\n            }\r\n            var otherFolderItemIds = [];\r\n            $otherFolderItemIds.each(function () {\r\n                var $this = $(this);\r\n                otherFolderItemIds.push({\r\n                    id: $this.attr('Id'),\r\n                    changeKey: $this.attr('ChangeKey')\r\n                });\r\n            });\r\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversation = {\r\n                id: this.mailbox.item.conversationId,\r\n                items: [],\r\n                global: []\r\n            };\r\n            for (var i_1 = 0; i_1 < sameFolderItemIds.length; i_1++) {\r\n                this.conversation.items.push({\r\n                    itemId: sameFolderItemIds[i_1],\r\n                    conversation: this.conversation\r\n                });\r\n            }\r\n            for (var i = 0; i < otherFolderItemIds.length; i++) {\r\n                this.conversation.global.push({\r\n                    itemId: otherFolderItemIds[i],\r\n                    conversation: this.conversation\r\n                });\r\n            }\r\n            this.loadExcludedFolders();\r\n        };\r\n        Context.prototype.loadExcludedFolders = function () {\r\n            var _this = this;\r\n            if (this.excludedFolders) {\r\n                this.loadMessages();\r\n            }\r\n            else {\r\n                console.log('Getting the list of excluded folders');\r\n                this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    var foldersXml = $.parseXML(result.value);\r\n                    var excludedFolders = [];\r\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\r\n                        var $this = $(this);\r\n                        excludedFolders.push({\r\n                            folderId: {\r\n                                id: $this.attr('Id'),\r\n                                changeKey: $this.attr('ChangeKey')\r\n                            }\r\n                        });\r\n                    });\r\n                    _this.excludedFolders = excludedFolders;\r\n                    _this.loadMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.loadMessages = function () {\r\n            var _this = this;\r\n            if (this.itemsXml) {\r\n                this.getMessages();\r\n            }\r\n            else {\r\n                console.log(\"Getting the messages in other folders: \" + this.conversation.global.length);\r\n                this.onProgress(Model_1.Data.Progress.GetConversation);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.itemsXml = $.parseXML(result.value);\r\n                    _this.getMessages();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getMessages = function () {\r\n            var $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\r\n            for (var i = 0; i < this.excludedFolders.length; i++) {\r\n                $messages = $messages.filter(\"[Id!=\\\"\" + this.excludedFolders[i].folderId.id + \"\\\"]\");\r\n            }\r\n            $messages = $messages.parent();\r\n            for (var i = 0; i < this.conversation.global.length; i++) {\r\n                var item = this.conversation.global[i];\r\n                for (var j = 0; j < $messages.length; j++) {\r\n                    var msg = $messages[j];\r\n                    if (msg.querySelector(\"ItemId[Id=\\\"\" + item.itemId.id + \"\\\"]\")) {\r\n                        var folderId = msg.querySelector('ParentFolderId');\r\n                        item.folder = {\r\n                            folderId: {\r\n                                id: folderId.getAttribute('Id'),\r\n                                changeKey: folderId.getAttribute('ChangeKey')\r\n                            }\r\n                        };\r\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\r\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\r\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.loadFolderDisplayNames();\r\n        };\r\n        Context.prototype.loadFolderDisplayNames = function () {\r\n            var _this = this;\r\n            if (this.folderNamesXml) {\r\n                this.getFolderDisplayNames();\r\n            }\r\n            else {\r\n                var destinations = [];\r\n                for (var i = 0; i < this.conversation.global.length; i++) {\r\n                    var item = this.conversation.global[i];\r\n                    if (item.folder) {\r\n                        destinations.push(item.folder);\r\n                    }\r\n                }\r\n                if (!destinations.length) {\r\n                    this.onLoadComplete([]);\r\n                    return;\r\n                }\r\n                console.log(\"Getting the display names of the other folders: \" + destinations.length);\r\n                this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), function (result) {\r\n                    if (!result.value) {\r\n                        _this.onError(result.error.message);\r\n                        return;\r\n                    }\r\n                    _this.folderNamesXml = $.parseXML(result.value);\r\n                    _this.getFolderDisplayNames();\r\n                });\r\n            }\r\n        };\r\n        Context.prototype.getFolderDisplayNames = function () {\r\n            var _this = this;\r\n            var matches = [];\r\n            this.conversation.global.map(function (item) {\r\n                if (!item.folder) {\r\n                    return;\r\n                }\r\n                var folder = _this.folderNamesXml.querySelector(\"GetFolderResponseMessage > Folders > Folder > FolderId[Id=\\\"\" + item.folder.folderId.id + \"\\\"]\").parentNode;\r\n                item.folder.displayName = folder.querySelector('DisplayName').textContent;\r\n                matches.push({\r\n                    message: {\r\n                        Id: item.itemId.id,\r\n                        BodyPreview: item.body,\r\n                        Sender: item.from,\r\n                        ToRecipients: item.to,\r\n                        ParentFolderId: item.folder.folderId.id\r\n                    },\r\n                    folder: {\r\n                        Id: item.folder.folderId.id,\r\n                        DisplayName: item.folder.displayName\r\n                    }\r\n                });\r\n            });\r\n            console.log(\"Finished loading items in other folders: \" + matches.length);\r\n            this.onLoadComplete(matches);\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), function (result) {\r\n                if (!result.value) {\r\n                    _this.onError(result.error.message);\r\n                    return;\r\n                }\r\n                console.log(\"Finished moving items to other folder: \" + _this.conversation.items.length);\r\n                _this.onMoveComplete(_this.conversation.items.length);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    EWSData.Model = Model;\r\n})(EWSData = exports.EWSData || (exports.EWSData = {}));\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Model_1 = __webpack_require__(1);\r\nvar RESTData;\r\n(function (RESTData) {\r\n    var Endpoint = '/v2.0/me';\r\n    var ExcludedFolders;\r\n    (function (ExcludedFolders) {\r\n        ExcludedFolders[ExcludedFolders[\"Inbox\"] = 0] = \"Inbox\";\r\n        ExcludedFolders[ExcludedFolders[\"Drafts\"] = 1] = \"Drafts\";\r\n        ExcludedFolders[ExcludedFolders[\"SentItems\"] = 2] = \"SentItems\";\r\n        ExcludedFolders[ExcludedFolders[\"DeletedItems\"] = 3] = \"DeletedItems\";\r\n        // Sentinel value for enumerating the folder names\r\n        ExcludedFolders[ExcludedFolders[\"Count\"] = 4] = \"Count\";\r\n    })(ExcludedFolders || (ExcludedFolders = {}));\r\n    var Context = (function () {\r\n        function Context(mailbox) {\r\n            this.mailbox = mailbox;\r\n        }\r\n        Context.prototype.loadItems = function (onLoadComplete, onProgress, onError) {\r\n            var _this = this;\r\n            this.onLoadComplete = onLoadComplete;\r\n            this.onProgress = onProgress;\r\n            this.onError = onError;\r\n            console.log('Requesting the REST callback token...');\r\n            this.onProgress(Model_1.Data.Progress.GetCallbackToken);\r\n            // Start the chain of requests by getting a callback token.\r\n            this.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    _this.getConversation(result);\r\n                }\r\n                else {\r\n                    _this.onError(result.error.message);\r\n                }\r\n            });\r\n        };\r\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\r\n        // invoke the callbacks all at once with an array of typed results.\r\n        Context.prototype.collateRequests = function (requests, onDone, onFail) {\r\n            var _this = this;\r\n            if (requests.length > 1) {\r\n                $.when.apply($, requests)\r\n                    .done(function () {\r\n                    var results = [];\r\n                    for (var _i = 0; _i < arguments.length; _i++) {\r\n                        results[_i] = arguments[_i];\r\n                    }\r\n                    var values = [];\r\n                    results.map(function (result) {\r\n                        values.push(result[0]);\r\n                    });\r\n                    onDone(values);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n            else {\r\n                requests[0]\r\n                    .done(function (result) {\r\n                    onDone([result]);\r\n                }).fail(function (message) {\r\n                    _this.onError(message);\r\n                });\r\n            }\r\n        };\r\n        // Send a REST request to retrieve a list of messages in this conversation.\r\n        Context.prototype.getConversation = function (result) {\r\n            var _this = this;\r\n            this.token = result.value;\r\n            var conversationId = this.mailbox.item.conversationId;\r\n            var restConversationId = this.mailbox.diagnostics.hostName === 'OutlookIOS'\r\n                ? conversationId\r\n                : this.mailbox.convertToRestId(conversationId, Office.MailboxEnums.RestVersion.v2_0);\r\n            var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/messages?$filter=ConversationId eq '\" + restConversationId + \"'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId\";\r\n            console.log(\"Getting the list of items in the conversation: \" + restUrl);\r\n            this.onProgress(Model_1.Data.Progress.GetConversation);\r\n            $.ajax({\r\n                url: restUrl,\r\n                async: true,\r\n                dataType: 'json',\r\n                headers: { 'Authorization': \"Bearer \" + this.token }\r\n            }).done(function (result) {\r\n                _this.getExcludedFolders(result);\r\n            }).fail(function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send a REST request to identify each of the folders we want to exclude in our results.\r\n        Context.prototype.getExcludedFolders = function (result) {\r\n            var _this = this;\r\n            if (!result || !result.value || 0 === result.value.length) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.conversationMessages = result.value;\r\n            var currentFolderId;\r\n            var excludedFolderIds = [];\r\n            // We should ignore any messages in the same folder.\r\n            var itemId = this.mailbox.item.itemId;\r\n            var restItemId = this.mailbox.diagnostics.hostName === 'OutlookIOS'\r\n                ? itemId\r\n                : this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\r\n            for (var i = 0; i < this.conversationMessages.length; ++i) {\r\n                if (this.conversationMessages[i].Id === restItemId) {\r\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\r\n                    excludedFolderIds.push(currentFolderId);\r\n                    break;\r\n                }\r\n            }\r\n            // We should also exclude some special folders, but we need to get their folderIds.\r\n            var requests = [];\r\n            for (var i = 0; i < ExcludedFolders.Count; ++i) {\r\n                var folderId = ExcludedFolders[i];\r\n                var restUrl = \"\" + this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + folderId + \"?$select=Id\";\r\n                console.log(\"Getting excluded folder ID: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + this.token }\r\n                }));\r\n            }\r\n            this.onProgress(Model_1.Data.Progress.GetExcludedFolders);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    excludedFolderIds.push(value.Id);\r\n                });\r\n                _this.getFolderNames(currentFolderId, excludedFolderIds);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\r\n        Context.prototype.getFolderNames = function (currentFolderId, excludedFolderIds) {\r\n            var _this = this;\r\n            var folderMap = [];\r\n            this.conversationMessages.map(function (message) {\r\n                for (var i = 0; i < excludedFolderIds.length; ++i) {\r\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\r\n                        // Skip this message.\r\n                        return;\r\n                    }\r\n                }\r\n                for (var i = 0; i < folderMap.length; ++i) {\r\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\r\n                        // Add this message to the existing entry.\r\n                        folderMap[i].messages.push(message);\r\n                        return;\r\n                    }\r\n                }\r\n                // Create a new entry for this folder.\r\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [message] });\r\n            });\r\n            if (folderMap.length === 0) {\r\n                this.onLoadComplete([]);\r\n                return;\r\n            }\r\n            this.currentFolderId = currentFolderId;\r\n            this.excludedFolderIds = excludedFolderIds;\r\n            var requests = [];\r\n            folderMap.map(function (entry) {\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/mailfolders/\" + entry.folder.Id + \"?$select=Id,DisplayName\";\r\n                console.log(\"Getting included folder name: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    dataType: 'json',\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                }));\r\n            });\r\n            this.onProgress(Model_1.Data.Progress.GetFolderNames);\r\n            this.collateRequests(requests, function (results) {\r\n                results.map(function (value) {\r\n                    for (var i = 0; i < folderMap.length; ++i) {\r\n                        if (folderMap[i].folder.Id === value.Id) {\r\n                            folderMap[i].folder.DisplayName = value.DisplayName;\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                var matches = [];\r\n                folderMap.map(function (entry) {\r\n                    entry.messages.map(function (message) {\r\n                        var recipients = [];\r\n                        message.ToRecipients.map(function (address) {\r\n                            recipients.push(address.EmailAddress.Name);\r\n                        });\r\n                        var value = {\r\n                            Id: message.Id,\r\n                            BodyPreview: message.BodyPreview,\r\n                            Sender: message.Sender.EmailAddress.Name,\r\n                            ToRecipients: recipients.join('; '),\r\n                            ParentFolderId: message.ParentFolderId\r\n                        };\r\n                        matches.push({\r\n                            message: {\r\n                                Id: message.Id,\r\n                                BodyPreview: message.BodyPreview,\r\n                                Sender: message.Sender.EmailAddress.Name,\r\n                                ToRecipients: recipients.join('; '),\r\n                                ParentFolderId: message.ParentFolderId\r\n                            },\r\n                            folder: {\r\n                                Id: entry.folder.Id,\r\n                                DisplayName: entry.folder.DisplayName\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                console.log(\"Finished loading items in other folders: \" + matches.length);\r\n                _this.onLoadComplete(matches);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        Context.prototype.moveItems = function (folderId, onMoveComplete, onError) {\r\n            var _this = this;\r\n            this.onMoveComplete = onMoveComplete;\r\n            this.onError = onError;\r\n            console.log(\"Moving items to folder: \" + folderId);\r\n            var requests = [];\r\n            this.conversationMessages.map(function (message) {\r\n                if (message.ParentFolderId !== _this.currentFolderId) {\r\n                    // Skip any messages that are not in the current folder.\r\n                    return;\r\n                }\r\n                var restUrl = \"\" + _this.mailbox.restUrl + Endpoint + \"/messages/\" + message.Id + \"/move\";\r\n                console.log(\"Moving item: \" + restUrl);\r\n                requests.push($.ajax({\r\n                    url: restUrl,\r\n                    async: true,\r\n                    method: 'POST',\r\n                    contentType: 'application/json',\r\n                    dataType: 'json',\r\n                    data: JSON.stringify({ DestinationId: folderId }),\r\n                    headers: { 'Authorization': \"Bearer \" + _this.token }\r\n                }));\r\n            });\r\n            this.collateRequests(requests, function (results) {\r\n                console.log(\"Finished moving items to other folder: \" + results.length);\r\n                _this.onMoveComplete(results.length);\r\n            }, function (message) {\r\n                _this.onError(message);\r\n            });\r\n        };\r\n        return Context;\r\n    }());\r\n    var Model = (function () {\r\n        function Model(mailbox) {\r\n            this.context = new Context(mailbox);\r\n        }\r\n        Model.prototype.getItemsAsync = function (onLoadComplete, onProgress, onError) {\r\n            this.context.loadItems(onLoadComplete, onProgress, onError);\r\n        };\r\n        Model.prototype.moveItemsAsync = function (folderId, onMoveComplete, onError) {\r\n            this.context.moveItems(folderId, onMoveComplete, onError);\r\n        };\r\n        return Model;\r\n    }());\r\n    RESTData.Model = Model;\r\n})(RESTData = exports.RESTData || (exports.RESTData = {}));\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"../_references.ts\" />\r\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar RESTData_1 = __webpack_require__(3);\r\nvar EWSData_1 = __webpack_require__(2);\r\nvar StatusMessage_1 = __webpack_require__(8);\r\nvar SearchResults_1 = __webpack_require__(7);\r\nvar Feedback_1 = __webpack_require__(6);\r\nvar ConversationFiler = (function (_super) {\r\n    __extends(ConversationFiler, _super);\r\n    function ConversationFiler(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.state = { progress: Model_1.Data.Progress.GetCallbackToken };\r\n        return _this;\r\n    }\r\n    // Start the chain of requests by getting a callback token.\r\n    ConversationFiler.prototype.componentDidMount = function () {\r\n        var _this = this;\r\n        if (this.props.storedResults) {\r\n            if (this.props.storedResults.length > 0) {\r\n                this.setState({ progress: Model_1.Data.Progress.Success, matches: this.props.storedResults });\r\n            }\r\n            else {\r\n                this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n            return;\r\n        }\r\n        else if (!this.props.mailbox) {\r\n            return;\r\n        }\r\n        var data = this.props.mailbox.restUrl\r\n            ? new RESTData_1.RESTData.Model(this.props.mailbox)\r\n            : new EWSData_1.EWSData.Model(this.props.mailbox);\r\n        this.setState({ data: data });\r\n        data.getItemsAsync(function (results) {\r\n            if (results.length > 0) {\r\n                _this.setState({ progress: Model_1.Data.Progress.Success, matches: results });\r\n            }\r\n            else {\r\n                _this.setState({ progress: Model_1.Data.Progress.NotFound });\r\n            }\r\n        }, function (progress) {\r\n            _this.setState({ progress: progress });\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.onSelection = function (folderId) {\r\n        var _this = this;\r\n        console.log(\"Selected a folder: \" + folderId);\r\n        if (!this.state.data) {\r\n            // Handle the dialog or test case by just notifying the client\r\n            if (this.props.onComplete) {\r\n                this.props.onComplete(folderId);\r\n            }\r\n            return;\r\n        }\r\n        this.state.data.moveItemsAsync(folderId, function (count) {\r\n            if (_this.props.onComplete) {\r\n                _this.props.onComplete(folderId);\r\n            }\r\n        }, function (message) {\r\n            _this.setState({ progress: Model_1.Data.Progress.Error, error: message });\r\n        });\r\n    };\r\n    ConversationFiler.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(StatusMessage_1.StatusMessage, { progress: this.state.progress, message: this.state.error }),\r\n            React.createElement(SearchResults_1.SearchResults, { matches: this.state.matches, onSelection: this.onSelection.bind(this) }),\r\n            React.createElement(Feedback_1.Feedback, null)));\r\n    };\r\n    return ConversationFiler;\r\n}(React.Component));\r\nexports.ConversationFiler = ConversationFiler;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = ReactDOM;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Feedback = (function (_super) {\r\n    __extends(Feedback, _super);\r\n    function Feedback() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Feedback.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: \"feedback\" },\r\n            React.createElement(\"a\", { href: \"https://beandotnet.azurewebsites.net/\" }, \"about this app\"),\r\n            \"\\u00A0\",\r\n            React.createElement(\"a\", { href: \"mailto:wravery@hotmail.com?Subject=Auto%20Filer%20App%20for%20Outlook\" }, \"send feedback\")));\r\n    };\r\n    return Feedback;\r\n}(React.Component));\r\nexports.Feedback = Feedback;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar SearchResults = (function (_super) {\r\n    __extends(SearchResults, _super);\r\n    function SearchResults(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onClickFolder = _this.handleClick.bind(_this);\r\n        return _this;\r\n    }\r\n    SearchResults.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.props.matches || this.props.matches.length === 0) {\r\n            return null;\r\n        }\r\n        var rows = [];\r\n        this.props.matches.map(function (value, index) {\r\n            rows.push(React.createElement(\"tr\", { key: index },\r\n                React.createElement(\"td\", null,\r\n                    React.createElement(\"a\", { name: value.folder.Id, onClick: _this.onClickFolder }, value.folder.DisplayName)),\r\n                React.createElement(\"td\", null, value.message.Sender),\r\n                React.createElement(\"td\", null, value.message.ToRecipients),\r\n                React.createElement(\"td\", null, value.message.BodyPreview)));\r\n        });\r\n        return (React.createElement(\"table\", null,\r\n            React.createElement(\"thead\", null,\r\n                React.createElement(\"tr\", null,\r\n                    React.createElement(\"th\", null, \"Folder\"),\r\n                    React.createElement(\"th\", null, \"From\"),\r\n                    React.createElement(\"th\", null, \"To\"),\r\n                    React.createElement(\"th\", null, \"Preview\"))),\r\n            React.createElement(\"tbody\", null, rows)));\r\n    };\r\n    SearchResults.prototype.handleClick = function (evt) {\r\n        this.props.onSelection(evt.currentTarget.name);\r\n        evt.preventDefault();\r\n    };\r\n    return SearchResults;\r\n}(React.Component));\r\nexports.SearchResults = SearchResults;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar Model_1 = __webpack_require__(1);\r\nvar StatusMessage = (function (_super) {\r\n    __extends(StatusMessage, _super);\r\n    function StatusMessage() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    StatusMessage.prototype.render = function () {\r\n        var className;\r\n        var status;\r\n        switch (this.props.progress) {\r\n            case Model_1.Data.Progress.GetCallbackToken:\r\n            case Model_1.Data.Progress.GetConversation:\r\n            case Model_1.Data.Progress.GetExcludedFolders:\r\n            case Model_1.Data.Progress.GetFolderNames:\r\n                return React.createElement(\"h3\", null, \"Looking for other messages in this conversation...\");\r\n            case Model_1.Data.Progress.Success:\r\n                return null;\r\n            case Model_1.Data.Progress.NotFound:\r\n                return React.createElement(\"h3\", null, \"It looks like you haven't filed this conversation anywhere before.\");\r\n            default:\r\n                return (React.createElement(\"div\", null,\r\n                    React.createElement(\"h3\", null, \"Sorry, I couldn't figure out where this message should go. :(\"),\r\n                    React.createElement(\"span\", null, this.props.message)));\r\n        }\r\n    };\r\n    return StatusMessage;\r\n}(React.Component));\r\nexports.StatusMessage = StatusMessage;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/// <reference path=\"_references.ts\" />\r\n/// <reference path=\"./components/ConversationFiler.tsx\" />\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar React = __webpack_require__(0);\r\nvar ReactDOM = __webpack_require__(5);\r\nvar RESTData_1 = __webpack_require__(3);\r\nvar EWSData_1 = __webpack_require__(2);\r\nvar ConversationFiler_1 = __webpack_require__(4);\r\nOffice.initialize = function () {\r\n    var functionsRegex = /functions\\.html(\\?.*)?$/i;\r\n    var noUI = functionsRegex.test(window.location.pathname);\r\n    var mailbox = (Office.context || {}).mailbox;\r\n    var storageKey = \"conversationFilerMatches\";\r\n    if (noUI) {\r\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\r\n        window.fileDialog = function (event) {\r\n            var data = mailbox.restUrl\r\n                ? new RESTData_1.RESTData.Model(mailbox)\r\n                : new EWSData_1.EWSData.Model(mailbox);\r\n            data.getItemsAsync(function (results) {\r\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\r\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, function (result) {\r\n                    var dialog = result.value;\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (dialogEvent) {\r\n                        data.moveItemsAsync(dialogEvent.message, function (count) {\r\n                            dialog.close();\r\n                            event.completed();\r\n                        }, function (message) {\r\n                            // no-op...\r\n                            dialog.close();\r\n                            event.completed();\r\n                        });\r\n                    });\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, function () {\r\n                        event.completed();\r\n                    });\r\n                });\r\n            }, function (progress) {\r\n                // no-op...\r\n            }, function (message) {\r\n                event.completed();\r\n            });\r\n        };\r\n        return;\r\n    }\r\n    // Show the UI...\r\n    var onComplete;\r\n    var storedResults;\r\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\r\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\r\n        onComplete = function (folderId) {\r\n            Office.context.ui.messageParent(folderId);\r\n        };\r\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey));\r\n    }\r\n    ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: mailbox, onComplete: onComplete, storedResults: storedResults }), document.getElementById(\"conversationFilerRoot\"));\r\n    // ...and if we're running outside of an Outlook client, run through the tests\r\n    if (!mailbox && !storedResults) {\r\n        var testEmpty = function () {\r\n            console.log(\"Testing the behavior with an empty set of matches...\");\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(React.createElement(\"div\", null, \"Testing...\"), document.getElementById(\"conversationFilerRoot\"));\r\n            ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: null, storedResults: [] }), document.getElementById(\"conversationFilerRoot\"));\r\n            window.setTimeout(testDummy_1, 3000);\r\n        };\r\n        var testDummy_1 = function () {\r\n            console.log(\"Testing the behavior with a set of mock matches...\");\r\n            // Need to clear out the DOM so it will mount a new ConversationFiler\r\n            ReactDOM.render(React.createElement(\"div\", null, \"Testing...\"), document.getElementById(\"conversationFilerRoot\"));\r\n            var dummyResults = [{\r\n                    folder: {\r\n                        Id: 'folderId1',\r\n                        DisplayName: 'Folder 1'\r\n                    },\r\n                    message: {\r\n                        Id: 'messageId1',\r\n                        BodyPreview: 'Here\\'s a preview of a message body',\r\n                        Sender: 'Foo Bar',\r\n                        ToRecipients: 'Baz Bar',\r\n                        ParentFolderId: 'folderId1'\r\n                    }\r\n                }, {\r\n                    folder: {\r\n                        Id: 'folderId2',\r\n                        DisplayName: 'Folder 2'\r\n                    },\r\n                    message: {\r\n                        Id: 'messageId2',\r\n                        BodyPreview: 'Here\\'s another message body',\r\n                        Sender: 'Baz Bar',\r\n                        ToRecipients: 'Foo Bar',\r\n                        ParentFolderId: 'folderId2'\r\n                    }\r\n                }];\r\n            ReactDOM.render(React.createElement(ConversationFiler_1.ConversationFiler, { mailbox: null, storedResults: dummyResults }), document.getElementById(\"conversationFilerRoot\"));\r\n        };\r\n        window.setTimeout(testEmpty, 3000);\r\n    }\r\n};\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 08248856d50bc493d403","module.exports = React;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"React\"\n// module id = 0\n// module chunks = 0","export module Data {\n    export interface Message {\n        Id: string;\n        BodyPreview: string;\n        Sender: string;\n        ToRecipients: string;\n        ParentFolderId: string;\n    }\n\n    export interface Folder {\n        Id: string;\n        DisplayName: string;\n    }\n\n    export interface Match {\n        message: Message;\n        folder: Folder;\n    }\n\n    export enum Progress {\n        GetCallbackToken,\n        GetConversation,\n        GetExcludedFolders,\n        GetFolderNames,\n        Success,\n        NotFound,\n        Error\n    }\n\n    export interface IModel {\n        getItemsAsync(onLoadComplete:(results: Match[]) => void, onProgress:(progress: Progress) => void, onError:(message: string) => void): void;\n        moveItemsAsync(folderId: string, onMoveComplete:(count: number) => void, onError:(message: string) => void): void;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/Model.ts","import { Data } from \"./Model\"\n\nexport module EWSData {\n    interface ItemId {\n        id: string;\n        changeKey: string;\n    }\n\n    interface FolderData {\n        folderId: ItemId;\n        displayName?: string;\n    }\n\n    interface MessageData {\n        itemId: ItemId;\n        conversation: ConversationData;\n        folder?: FolderData;\n        body?: string;\n        from?: string;\n        to?: string;\n    }\n\n    interface ConversationData {\n        id: string;\n        items: MessageData[];\n        global: MessageData[];\n    }\n   \n    class RequestBuilder {\n        private static beginRequest = [\n            '<?xml version=\"1.0\" encoding=\"utf-8\" ?>', \n            '<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"', \n            '    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"', \n            '    xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"', \n            '    xmlns:t=\"http://schemas.microsoft.com/exchange/services/2006/types\"', \n            '    xmlns:m=\"http://schemas.microsoft.com/exchange/services/2006/messages\">', \n            '<soap:Header>', \n            '  <t:RequestServerVersion Version=\"Exchange2010_SP1\" />', \n            '</soap:Header>', \n            '<soap:Body>', \n        ].join('\\n');\n\n        private static endRequest = [\n            '</soap:Body>', \n            '</soap:Envelope>'\n        ].join('\\n');\n\n        static findConversationRequest = [\n            RequestBuilder.beginRequest, \n            '  <m:FindConversation>', \n            '    <m:IndexedPageItemView BasePoint=\"Beginning\" Offset=\"0\" MaxEntriesReturned=\"20\" />', \n            '    <m:ParentFolderId>', \n            '      <t:DistinguishedFolderId Id=\"inbox\"/>', \n            '    </m:ParentFolderId>', \n            '  </m:FindConversation>', \n            RequestBuilder.endRequest\n        ].join('\\n');\n\n        static getItemsRequest(messages: MessageData[]) {\n            var builder = [\n                RequestBuilder.beginRequest, \n                '  <m:GetItem>', \n                '    <m:ItemShape>', \n                '      <t:BaseShape>IdOnly</t:BaseShape>', \n                '      <t:BodyType>Text</t:BodyType>', \n                '      <t:AdditionalProperties>', \n                '        <t:FieldURI FieldURI=\"item:ParentFolderId\" />', \n                '        <t:FieldURI FieldURI=\"message:Sender\" />', \n                '        <t:FieldURI FieldURI=\"message:ToRecipients\" />', \n                '        <t:FieldURI FieldURI=\"item:Body\" />', \n                '      </t:AdditionalProperties>', \n                '    </m:ItemShape>', \n                '    <m:ItemIds>', \n            ];\n\n            for (let i = 0; i < messages.length; i++) {\n                builder.push(`      <t:ItemId Id=\"${messages[i].itemId.id}\" ChangeKey=\"${messages[i].itemId.changeKey}\" />`);\n            }\n\n            builder.push(\n                '    </m:ItemIds>',\n                '  </m:GetItem>',\n                RequestBuilder.endRequest);\n\n            return builder.join('\\n');\n        }\n\n        static excludedFolderIdsRequest = [\n            RequestBuilder.beginRequest, \n            '  <m:GetFolder>', \n            '    <m:FolderShape>', \n            '      <t:BaseShape>IdOnly</t:BaseShape>', \n            '    </m:FolderShape>', \n            '    <m:FolderIds>', \n            '      <t:DistinguishedFolderId Id=\"inbox\"/>', \n            '      <t:DistinguishedFolderId Id=\"drafts\"/>', \n            '      <t:DistinguishedFolderId Id=\"sentitems\"/>', \n            '      <t:DistinguishedFolderId Id=\"deleteditems\"/>', \n            '    </m:FolderIds>', \n            '  </m:GetFolder >', \n            RequestBuilder.endRequest\n        ].join('\\n');\n\n        static getFolderNamesRequest(folders: FolderData[]) {\n            var builder = [\n                RequestBuilder.beginRequest, \n                '  <m:GetFolder>', \n                '    <m:FolderShape>', \n                '      <t:BaseShape>IdOnly</t:BaseShape>', \n                '      <t:AdditionalProperties>', \n                '        <t:FieldURI FieldURI=\"folder:DisplayName\" />', \n                '      </t:AdditionalProperties>', \n                '    </m:FolderShape>', \n                '    <m:FolderIds>'\n            ];\n\n            for (let i = 0; i < folders.length; i++) {\n                builder.push(`      <t:FolderId Id=\"${folders[i].folderId.id}\" ChangeKey=\"${folders[i].folderId.changeKey}\" />`);\n            }\n\n            builder.push(\n                '    </m:FolderIds>',\n                '  </m:GetFolder >',\n                RequestBuilder.endRequest);\n\n            return builder.join('\\n');\n        }\n\n        static moveItemsRequest(messages: MessageData[], folderId: string) {\n            var builder = [\n                RequestBuilder.beginRequest, \n                '  <m:MoveItem>', \n                '    <m:ToFolderId>', \n                '      <t:FolderId Id=\"' + folderId + '\"/>', \n                '    </m:ToFolderId>', \n                '    <m:ItemIds>', \n            ];\n\n            for (let i = 0; i < messages.length; i++) {\n                builder.push(`      <t:ItemId Id=\"${messages[i].itemId.id}\" ChangeKey=\"${messages[i].itemId.changeKey}\" />`);\n            }\n\n            builder.push(\n                '    </m:ItemIds>',\n                '  </m:MoveItem>',\n                RequestBuilder.endRequest);\n\n            return builder.join('\\n');\n        }\n    }\n\n    class Context {\n        constructor(private mailbox: Office.Mailbox) {\n        }\n        \n        private conversationXml?: XMLDocument;\n        private conversation?: ConversationData;\n        private excludedFolders?: FolderData[];\n        private itemsXml?: XMLDocument;\n        private folderNamesXml?: XMLDocument;\n\n        private onLoadComplete?:(results: Data.Match[]) => void;\n        private onProgress?:(progress: Data.Progress) => void;\n        private onError?:(message: string) => void;\n        private onMoveComplete?:(count: number) => void\n\n        loadItems(onLoadComplete:(results: Data.Match[]) => void, onProgress:(progress: Data.Progress) => void, onError:(message: string) => void): void {\n            this.onLoadComplete = onLoadComplete;\n            this.onProgress = onProgress;\n            this.onError = onError;\n\n            console.log('Finding the conversation with EWS...');\n            this.onProgress(Data.Progress.GetConversation);\n\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.findConversationRequest, (result) => {\n                if (!result.value) {\n                    this.onError(result.error.message);\n                    return;\n                }\n\n                this.conversationXml = $.parseXML(result.value);\n                this.getConversation();\n            });\n        }\n\n        private getConversation() {\n            const $conversation = $(this.conversationXml.querySelectorAll('Conversation > GlobalItemIds > ItemId'))\n                .filter(`[Id=\"${(<Office.ItemRead>this.mailbox.item).itemId}\"]`)\n                .parents('Conversation');\n\n            if (!$conversation.length) {\n                this.onError(\"This conversation isn't in your inbox's top 20.\");\n                return;\n            }\n\n            const messageCount = parseInt($conversation.find('MessageCount').text());\n            const globalCount = parseInt($conversation.find('GlobalMessageCount').text());\n\n            if (messageCount >= globalCount) {\n                this.onLoadComplete([]);\n                return;\n            }\n\n            let sameFolderItemIds: ItemId[] = [];\n\n            $conversation.find('ItemIds > ItemId').each(function () {\n                const $this = $(this);\n                \n                sameFolderItemIds.push({\n                    id: $this.attr('Id'),\n                    changeKey: $this.attr('ChangeKey')\n                });\n            });\n\n            let $otherFolderItemIds = $conversation.find('GlobalItemIds > ItemId');\n\n            for (var i = 0; i < sameFolderItemIds.length; i++) {\n                $otherFolderItemIds = $otherFolderItemIds.filter(`[Id!=\"${sameFolderItemIds[i].id}\"]`);\n            }\n\n            let otherFolderItemIds: ItemId[] = [];\n\n            $otherFolderItemIds.each(function () {\n                const $this = $(this);\n\n                otherFolderItemIds.push({\n                    id: $this.attr('Id'),\n                    changeKey: $this.attr('ChangeKey')\n                });\n            });\n\n            if (!sameFolderItemIds.length || !otherFolderItemIds.length) {\n                this.onLoadComplete([]);\n                return;\n            }\n\n            this.conversation = {\n                id: (<Office.Message>this.mailbox.item).conversationId,\n                items: [],\n                global: []\n            };\n\n            for (let i = 0; i < sameFolderItemIds.length; i++) {\n                this.conversation.items.push({\n                    itemId: sameFolderItemIds[i],\n                    conversation: this.conversation\n                });\n            }\n            \n            for (var i = 0; i < otherFolderItemIds.length; i++) {\n                this.conversation.global.push({\n                    itemId: otherFolderItemIds[i],\n                    conversation: this.conversation\n                });\n            }\n\n            this.loadExcludedFolders();\n        }\n\n        private loadExcludedFolders() {\n            if (this.excludedFolders) {\n                this.loadMessages();\n            } else {\n                console.log('Getting the list of excluded folders');\n                this.onProgress(Data.Progress.GetExcludedFolders);\n\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.excludedFolderIdsRequest, (result) => {\n                    if (!result.value) {\n                        this.onError(result.error.message);\n                        return;\n                    }\n\n                    let foldersXml = $.parseXML(result.value);\n                    let excludedFolders: FolderData[] = [];\n\n                    $(foldersXml.querySelectorAll('GetFolderResponseMessage > Folders > Folder > FolderId')).each(function () {\n                        var $this = $(this);\n                        excludedFolders.push({\n                            folderId: {\n                                id: $this.attr('Id'),\n                                changeKey: $this.attr('ChangeKey')\n                            }\n                        });\n                    });\n\n                    this.excludedFolders = excludedFolders;\n\n                    this.loadMessages();\n                });\n            }\n        }\n\n        private loadMessages() {\n            if (this.itemsXml) {\n                this.getMessages();\n            } else {\n                console.log(`Getting the messages in other folders: ${this.conversation.global.length}`);\n                this.onProgress(Data.Progress.GetConversation);\n\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getItemsRequest(this.conversation.global), (result) => {\n                    if (!result.value) {\n                        this.onError(result.error.message);\n                        return;\n                    }\n\n                    this.itemsXml = $.parseXML(result.value);\n                    this.getMessages();\n                });\n            }\n        }\n\n        private getMessages() {\n            let $messages = $(this.itemsXml.querySelectorAll('GetItemResponseMessage > Items > Message > ParentFolderId'));\n\n            for (let i = 0; i < this.excludedFolders.length; i++) {\n                $messages = $messages.filter(`[Id!=\"${this.excludedFolders[i].folderId.id}\"]`);\n            }\n\n            $messages = $messages.parent();\n\n            for (let i = 0; i < this.conversation.global.length; i++) {\n                let item = this.conversation.global[i];\n\n                for (let j = 0; j < $messages.length; j++) {\n                    let msg = $messages[j];\n                    if (msg.querySelector(`ItemId[Id=\"${item.itemId.id}\"]`)) {\n                        let folderId = msg.querySelector('ParentFolderId');\n\n                        item.folder = {\n                            folderId: {\n                                id: folderId.getAttribute('Id'),\n                                changeKey: folderId.getAttribute('ChangeKey')\n                            }\n                        };\n                        item.from = msg.querySelector('Sender > Mailbox > Name').textContent;\n                        item.to = msg.querySelector('ToRecipients > Mailbox > Name').textContent;\n                        item.body = msg.querySelector('Body').textContent.slice(0, 200);\n                        break;\n                    }\n                }\n            }\n\n            this.loadFolderDisplayNames();\n        }\n\n        private loadFolderDisplayNames() {\n            if (this.folderNamesXml) {\n                this.getFolderDisplayNames();\n            } else {\n                let destinations = [];\n                \n                for (let i = 0; i < this.conversation.global.length; i++) {\n                    let item = this.conversation.global[i];\n                    \n                    if (item.folder) {\n                        destinations.push(item.folder);\n                    }\n                }\n\n                if (!destinations.length) {\n                    this.onLoadComplete([]);\n                    return;\n                }\n\n                console.log(`Getting the display names of the other folders: ${destinations.length}`);\n                this.onProgress(Data.Progress.GetFolderNames);\n\n                this.mailbox.makeEwsRequestAsync(RequestBuilder.getFolderNamesRequest(destinations), (result) => {\n                    if (!result.value) {\n                        this.onError(result.error.message);\n                        return;\n                    }\n\n                    this.folderNamesXml = $.parseXML(result.value);\n                    this.getFolderDisplayNames();\n                });\n            }\n        }\n\n        private getFolderDisplayNames() {\n            let matches: Data.Match[] = [];\n\n            this.conversation.global.map((item: MessageData) => {\n                if (!item.folder) {\n                    return;\n                }\n\n                const folder = this.folderNamesXml.querySelector(`GetFolderResponseMessage > Folders > Folder > FolderId[Id=\"${item.folder.folderId.id}\"]`).parentNode;\n                item.folder.displayName = (<Element>folder).querySelector('DisplayName').textContent;\n\n                matches.push({\n                    message: {\n                        Id: item.itemId.id,\n                        BodyPreview: item.body,\n                        Sender: item.from,\n                        ToRecipients: item.to,\n                        ParentFolderId: item.folder.folderId.id\n                    },\n                    folder: {\n                        Id: item.folder.folderId.id,\n                        DisplayName: item.folder.displayName\n                    }\n                });\n            });\n\n            console.log(`Finished loading items in other folders: ${matches.length}`);\n            this.onLoadComplete(matches);\n        }\n\n        moveItems(folderId: string, onMoveComplete:(count: number) => void, onError:(message: string) => void) {\n            this.onMoveComplete = onMoveComplete;\n            this.onError = onError;\n\n           console.log(`Moving items to folder: ${folderId}`);\n\n            this.mailbox.makeEwsRequestAsync(RequestBuilder.moveItemsRequest(this.conversation.items, folderId), (result) => {\n                if (!result.value) {\n                    this.onError(result.error.message);\n                    return;\n                }\n\n                console.log(`Finished moving items to other folder: ${this.conversation.items.length}`);\n                this.onMoveComplete(this.conversation.items.length);\n            });\n        }\n    }\n\n    export class Model implements Data.IModel {\n        private context?: Context;\n\n        constructor(mailbox: Office.Mailbox) {\n            this.context = new Context(mailbox);\n        }\n\n        getItemsAsync(onLoadComplete:(results: Data.Match[]) => void, onProgress:(progress: Data.Progress) => void, onError:(message: string) => void): void {\n            this.context.loadItems(onLoadComplete, onProgress, onError);\n        }\n\n        moveItemsAsync(folderId: string, onMoveComplete:(count: number) => void, onError:(message: string) => void): void {\n            this.context.moveItems(folderId, onMoveComplete, onError);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/EWSData.ts","/// <reference path=\"../_references.ts\" />\n\nimport { Data } from \"./Model\"\n\nexport module RESTData {\n    const Endpoint = '/v2.0/me';\n\n    enum ExcludedFolders {\n        Inbox,\n        Drafts,\n        SentItems,\n        DeletedItems,\n\n        // Sentinel value for enumerating the folder names\n        Count\n    }\n\n    interface EmailAddressJson {\n        Name: string;\n        Address: string;\n    }\n\n    interface AddressJson {\n        EmailAddress: EmailAddressJson;\n    }\n\n    interface MessageJson {\n        Id: string;\n        BodyPreview: string;\n        Sender: AddressJson;\n        ToRecipients: AddressJson[];\n        ParentFolderId: string;\n    }\n\n    interface MessageJsonCollection {\n        value: MessageJson[];\n    }\n\n    interface FolderJson {\n        Id: string;\n        DisplayName?: string;\n    }\n\n    class Context {\n        constructor(private mailbox: Office.Mailbox) {\n        }\n\n        private token?: string;\n        private currentFolderId?: string;\n        private conversationMessages?: MessageJson[];\n        private excludedFolderIds?: string[];\n        \n        private onLoadComplete?:(results: Data.Match[]) => void;\n        private onProgress?:(progress: Data.Progress) => void;\n        private onError?:(message: string) => void;\n        private onMoveComplete?:(count: number) => void\n\n        loadItems(onLoadComplete:(results: Data.Match[]) => void, onProgress:(progress: Data.Progress) => void, onError:(message: string) => void): void {\n            this.onLoadComplete = onLoadComplete;\n            this.onProgress = onProgress;\n            this.onError = onError;\n\n            console.log('Requesting the REST callback token...');\n            this.onProgress(Data.Progress.GetCallbackToken);\n\n            // Start the chain of requests by getting a callback token.\n            this.mailbox.getCallbackTokenAsync({isRest: true},\n                (result: Office.AsyncResult) => {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        this.getConversation(result);\n                    } else {\n                        this.onError(result.error.message);\n                    }\n                });\n        }\n\n        // Sometimes we need to make separate REST requests for multiple items. Wait until they all complete and then\n        // invoke the callbacks all at once with an array of typed results.\n        private collateRequests<T>(requests: JQueryPromise<T>[], onDone: (results: T[]) => void, onFail: (message: string) => void): void {\n            if (requests.length > 1) {\n                $.when.apply($, requests)\n                    .done((...results: any[]) => {\n                        let values: T[] = [];\n\n                        results.map((result: any[]) => {\n                            values.push(<T>result[0]);\n                        });\n\n                        onDone(values);\n                    }).fail((message: string) => {\n                        this.onError(message);\n                    });\n            } else {\n                requests[0]\n                    .done((result: T) => {\n                        onDone([result]);\n                    }).fail((message: string) => {\n                        this.onError(message);\n                    });\n            }\n        }\n\n        // Send a REST request to retrieve a list of messages in this conversation.\n        private getConversation(result: Office.AsyncResult) {\n            this.token = <string>result.value;\n\n            const conversationId = (<Office.Message>this.mailbox.item).conversationId;\n            const restConversationId = this.mailbox.diagnostics.hostName === 'OutlookIOS'\n                ? conversationId\n                : this.mailbox.convertToRestId(conversationId, Office.MailboxEnums.RestVersion.v2_0);\n            const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages?$filter=ConversationId eq '${restConversationId}'&$select=Id,Subject,BodyPreview,Sender,ToRecipients,ParentFolderId`;\n            \n            console.log(`Getting the list of items in the conversation: ${restUrl}`);\n            this.onProgress(Data.Progress.GetConversation);\n\n            $.ajax({\n                url: restUrl,\n                async: true,\n                dataType: 'json',\n                headers: { 'Authorization': `Bearer ${this.token}`}\n            }).done((result: MessageJsonCollection) => {\n                this.getExcludedFolders(result);\n            }).fail((message: string) => {\n                this.onError(message);\n            });\n        }\n\n        // Send a REST request to identify each of the folders we want to exclude in our results.\n        private getExcludedFolders(result: MessageJsonCollection) {\n            if (!result || !result.value || 0 === result.value.length) {\n                this.onLoadComplete([]);\n                return;\n            }\n\n            this.conversationMessages = result.value;\n            \n            let currentFolderId: string;\n            let excludedFolderIds: string[] = [];\n\n            // We should ignore any messages in the same folder.\n            const itemId = (<Office.ItemRead>this.mailbox.item).itemId;\n            const restItemId = this.mailbox.diagnostics.hostName === 'OutlookIOS'\n                ? itemId\n                : this.mailbox.convertToRestId(itemId, Office.MailboxEnums.RestVersion.v2_0);\n\n            for (let i = 0; i < this.conversationMessages.length; ++i) {\n                if (this.conversationMessages[i].Id === restItemId) {\n                    currentFolderId = this.conversationMessages[i].ParentFolderId;\n                    excludedFolderIds.push(currentFolderId);\n                    break;\n                }\n            }\n\n            // We should also exclude some special folders, but we need to get their folderIds.\n            let requests: JQueryXHR[] = [];\n\n            for (let i = 0; i < ExcludedFolders.Count; ++i) {\n                const folderId = ExcludedFolders[i];\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${folderId}?$select=Id`;\n\n                console.log(`Getting excluded folder ID: ${restUrl}`);\n\n                requests.push($.ajax({\n                    url: restUrl,\n                    async: true,\n                    dataType: 'json',\n                    headers: { 'Authorization': `Bearer ${this.token}` }\n                }));\n            }\n\n            this.onProgress(Data.Progress.GetExcludedFolders);\n\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\n                results.map((value: FolderJson) => {\n                    excludedFolderIds.push(value.Id);\n                });\n\n                this.getFolderNames(currentFolderId, excludedFolderIds);\n            }, (message: string) => {\n                this.onError(message);\n            });\n        }\n\n        // Send REST requests to fill in the display names of all the folders we are not excluding.\n        private getFolderNames(currentFolderId: string, excludedFolderIds: string[]) {\n            let folderMap: {\n                folder: FolderJson;\n                messages: MessageJson[];\n            }[] = [];\n\n            this.conversationMessages.map((message: MessageJson) => {\n                for (let i = 0; i < excludedFolderIds.length; ++i) {\n                    if (excludedFolderIds[i] === message.ParentFolderId) {\n                        // Skip this message.\n                        return;\n                    }\n                }\n\n                for (let i = 0; i < folderMap.length; ++i) {\n                    if (folderMap[i].folder.Id === message.ParentFolderId) {\n                        // Add this message to the existing entry.\n                        folderMap[i].messages.push(message);\n                        return;\n                    }\n                }\n\n                // Create a new entry for this folder.\n                folderMap.push({ folder: { Id: message.ParentFolderId }, messages: [ message ] });\n            });\n\n            if (folderMap.length === 0) {\n                this.onLoadComplete([]);\n                return;\n            }\n\n            this.currentFolderId = currentFolderId;\n            this.excludedFolderIds = excludedFolderIds;\n\n            let requests: JQueryXHR[] = [];\n\n            folderMap.map((entry) => {\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/mailfolders/${entry.folder.Id}?$select=Id,DisplayName`;\n\n                console.log(`Getting included folder name: ${restUrl}`);\n\n                requests.push($.ajax({\n                    url: restUrl,\n                    async: true,\n                    dataType: 'json',\n                    headers: { 'Authorization': `Bearer ${this.token}` }\n                }));\n            });\n\n            this.onProgress(Data.Progress.GetFolderNames);\n\n            this.collateRequests(<JQueryPromise<FolderJson>[]>requests, (results: FolderJson[]) => {\n                results.map((value) => {\n                    for (let i = 0; i < folderMap.length; ++i) {\n                        if (folderMap[i].folder.Id === value.Id) {\n                            folderMap[i].folder.DisplayName = value.DisplayName;\n                            break;\n                        }\n                    }\n                });\n\n                let matches: Data.Match[] = [];\n\n                folderMap.map((entry) => {\n                    entry.messages.map((message) => {\n                        let recipients: string[] = [];\n                        \n                        message.ToRecipients.map((address) => {\n                            recipients.push(address.EmailAddress.Name);\n                        });\n\n                        let value: Data.Message = {\n                            Id: message.Id,\n                            BodyPreview: message.BodyPreview,\n                            Sender: message.Sender.EmailAddress.Name,\n                            ToRecipients: recipients.join('; '),\n                            ParentFolderId: message.ParentFolderId\n                        };\n\n                        matches.push({\n                            message: {\n                                Id: message.Id,\n                                BodyPreview: message.BodyPreview,\n                                Sender: message.Sender.EmailAddress.Name,\n                                ToRecipients: recipients.join('; '),\n                                ParentFolderId: message.ParentFolderId\n                            },\n                            folder: {\n                                Id: entry.folder.Id,\n                                DisplayName: entry.folder.DisplayName\n                            }\n                        });\n                    });\n                });\n\n                console.log(`Finished loading items in other folders: ${matches.length}`);\n                this.onLoadComplete(matches);\n            }, (message: string) => {\n                this.onError(message);\n            });\n        }\n\n        moveItems(folderId: string, onMoveComplete:(count: number) => void, onError:(message: string) => void) {\n            this.onMoveComplete = onMoveComplete;\n            this.onError = onError;\n\n            console.log(`Moving items to folder: ${folderId}`);\n\n            let requests: JQueryXHR[] = [];\n\n            this.conversationMessages.map((message: MessageJson) => {\n                if (message.ParentFolderId !== this.currentFolderId) {\n                    // Skip any messages that are not in the current folder.\n                    return;\n                }\n\n                const restUrl = `${this.mailbox.restUrl}${Endpoint}/messages/${message.Id}/move`;\n\n                console.log(`Moving item: ${restUrl}`);\n\n                requests.push($.ajax({\n                    url: restUrl,\n                    async: true,\n                    method: 'POST',\n                    contentType: 'application/json',\n                    dataType: 'json',\n                    data: JSON.stringify({ DestinationId: folderId }),\n                    headers: { 'Authorization': `Bearer ${this.token}` }\n                }));\n            });\n\n            this.collateRequests(<JQueryPromise<MessageJson>[]>requests, (results: MessageJson[]) => {\n                console.log(`Finished moving items to other folder: ${results.length}`);\n                this.onMoveComplete(results.length);\n            }, (message: string) => {\n                this.onError(message);\n            });\n        }\n    }\n\n    export class Model implements Data.IModel {\n        private context?: Context;\n\n        constructor(mailbox: Office.Mailbox) {\n            this.context = new Context(mailbox);\n        }\n\n        getItemsAsync(onLoadComplete:(results: Data.Match[]) => void, onProgress:(progress: Data.Progress) => void, onError:(message: string) => void): void {\n            this.context.loadItems(onLoadComplete, onProgress, onError);\n        }\n\n        moveItemsAsync(folderId: string, onMoveComplete:(count: number) => void, onError:(message: string) => void): void {\n            this.context.moveItems(folderId, onMoveComplete, onError);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Data/RESTData.ts","/// <reference path=\"../_references.ts\" />\n\nimport * as React from \"react\";\nimport * as JQuery from \"jquery\";\n\nimport { Data } from \"../Data/Model\"\nimport { RESTData } from \"../Data/RESTData\";\nimport { EWSData } from \"../Data/EWSData\";\n\nimport { StatusMessage } from \"./StatusMessage\";\nimport { SearchResults } from \"./SearchResults\";\nimport { Feedback } from \"./Feedback\";\n\nexport interface ConversationFilerProps {\n    mailbox: Office.Mailbox;\n    storedResults?: Data.Match[];\n    onComplete?:(folderId: string) => void;\n}\n\ninterface ConversationFilerState {\n    progress: Data.Progress;\n    data?: Data.IModel;\n    error?: string;\n    matches?: Data.Match[];\n}\n\nexport class ConversationFiler extends React.Component<ConversationFilerProps, ConversationFilerState> {\n    constructor(props: ConversationFilerProps) {\n        super(props);\n        this.state = { progress: Data.Progress.GetCallbackToken };\n    }\n\n    // Start the chain of requests by getting a callback token.\n    componentDidMount() {\n        if (this.props.storedResults) {\n            if (this.props.storedResults.length > 0) {\n                this.setState({ progress: Data.Progress.Success, matches: this.props.storedResults });\n            } else {\n                this.setState({ progress: Data.Progress.NotFound });\n            }\n\n            return;\n        } else if (!this.props.mailbox) {\n            return;\n        }\n\n        const data = this.props.mailbox.restUrl\n            ? new RESTData.Model(this.props.mailbox)\n            : new EWSData.Model(this.props.mailbox);\n\n        this.setState({ data: data });\n\n        data.getItemsAsync((results) => {\n            if (results.length > 0) {\n                this.setState({ progress: Data.Progress.Success, matches: results });\n            } else {\n                this.setState({ progress: Data.Progress.NotFound });\n            }\n        }, (progress) => {\n            this.setState({ progress: progress });\n        }, (message) => {\n            this.setState({ progress: Data.Progress.Error, error: message });\n        });\n    }\n\n    private onSelection(folderId: string) {\n        console.log(`Selected a folder: ${folderId}`);\n\n        if (!this.state.data) {\n            // Handle the dialog or test case by just notifying the client\n            if (this.props.onComplete) {\n                this.props.onComplete(folderId);\n            }\n\n            return;\n        }\n\n        this.state.data.moveItemsAsync(folderId, (count) => {\n            if (this.props.onComplete) {\n                this.props.onComplete(folderId);\n            }\n        }, (message) => {\n            this.setState({ progress: Data.Progress.Error, error: message });\n        });\n    }\n\n    render() {\n        return (<div>\n            <StatusMessage progress={this.state.progress} message={this.state.error} />\n            <SearchResults matches={this.state.matches} onSelection={this.onSelection.bind(this)} />\n            <Feedback />\n        </div>);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/ConversationFiler.tsx","module.exports = ReactDOM;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ReactDOM\"\n// module id = 5\n// module chunks = 0","import * as React from \"react\";\n\nexport class Feedback extends React.Component<undefined, undefined> {\n    render() {\n        return (<div className=\"feedback\">\n            <a href=\"https://beandotnet.azurewebsites.net/\">about this app</a>\n            &nbsp;\n            <a href=\"mailto:wravery@hotmail.com?Subject=Auto%20Filer%20App%20for%20Outlook\">send feedback</a>\n        </div>);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/Feedback.tsx","import * as React from \"react\";\n\nimport { Data } from \"../Data/Model\"\n\nexport interface SearchResultsProps {\n    matches: Data.Match[];\n    onSelection: (folderId: string) => void;\n}\n\nexport class SearchResults extends React.Component<SearchResultsProps, undefined> {\n    constructor(props: SearchResultsProps) {\n        super(props);\n        this.onClickFolder = this.handleClick.bind(this);\n    }\n\n    render() {\n        if (!this.props.matches || this.props.matches.length === 0) {\n            return null;\n        }\n\n        let rows: JSX.Element[] = [];\n\n        this.props.matches.map((value: Data.Match, index: number) => {\n            rows.push(<tr key={index}>\n                <td><a name={value.folder.Id} onClick={this.onClickFolder}>{value.folder.DisplayName}</a></td>\n                <td>{value.message.Sender}</td>\n                <td>{value.message.ToRecipients}</td>\n                <td>{value.message.BodyPreview}</td>\n            </tr>);\n        });\n\n        return (<table>\n            <thead>\n                <tr>\n                    <th>Folder</th>\n                    <th>From</th>\n                    <th>To</th>\n                    <th>Preview</th>\n                </tr>\n            </thead>\n            <tbody>\n                {rows}\n            </tbody>\n        </table>);\n    }\n\n    private handleClick(evt: React.MouseEvent<HTMLAnchorElement>) {\n        this.props.onSelection(evt.currentTarget.name);\n        evt.preventDefault();\n    }\n\n    private onClickFolder: React.EventHandler<React.MouseEvent<HTMLAnchorElement>>;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/SearchResults.tsx","import * as React from \"react\";\nimport { Data } from \"../Data/Model\";\n\nexport interface StatusMessageProps {\n    progress: Data.Progress;\n    message?: string;\n}\n\nexport class StatusMessage extends React.Component<StatusMessageProps, undefined> {\n    render() {\n        let className: string;\n        let status: string;\n\n        switch (this.props.progress)\n        {\n            case Data.Progress.GetCallbackToken:\n            case Data.Progress.GetConversation:\n            case Data.Progress.GetExcludedFolders:\n            case Data.Progress.GetFolderNames:\n                return <h3>Looking for other messages in this conversation...</h3>;\n\n            case Data.Progress.Success:\n                return null;\n\n            case Data.Progress.NotFound:\n                return <h3>It looks like you haven't filed this conversation anywhere before.</h3>;\n\n            default:\n                return (<div>\n                        <h3>Sorry, I couldn't figure out where this message should go. :(</h3>\n                        <span>{this.props.message}</span>\n                    </div>);\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/StatusMessage.tsx","/// <reference path=\"_references.ts\" />\n/// <reference path=\"./components/ConversationFiler.tsx\" />\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Data } from \"./Data/Model\";\nimport { RESTData } from \"./Data/RESTData\";\nimport { EWSData } from \"./Data/EWSData\";\n\nimport { ConversationFiler } from \"./components/ConversationFiler\";\n\nOffice.initialize = function () {\n    const functionsRegex = /functions\\.html(\\?.*)?$/i;\n    const noUI = functionsRegex.test(window.location.pathname);\n    const mailbox = (Office.context || ({} as Office.Context)).mailbox;\n    const storageKey = \"conversationFilerMatches\";\n\n    if (noUI) {\n        // Add the UI-less function callback if we're loaded from functions.html instead of index.html\n        (window as any).fileDialog = function (event: any) {\n            const data = mailbox.restUrl\n                ? new RESTData.Model(mailbox)\n                : new EWSData.Model(mailbox);\n\n            data.getItemsAsync((results) => {\n                window.localStorage.setItem(storageKey, JSON.stringify(results));\n\n                Office.context.ui.displayDialogAsync(window.location.href.replace(functionsRegex, \"dialog.html\"), { height: 25, width: 50, displayInIframe: true }, (result) => {\n                    const dialog = result.value as Office.DialogHandler;\n\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, (dialogEvent: { message: string }) => {\n                        data.moveItemsAsync(dialogEvent.message, (count) => {\n                            dialog.close();\n                            event.completed();\n                        }, (message) => {\n                            // no-op...\n                            dialog.close();\n                            event.completed();\n                        });\n                    });\n\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, () => {\n                        event.completed();\n                    });\n                });\n            }, (progress) => {\n                // no-op...\n            }, (message) => {\n                event.completed();\n            });\n        };\n\n        return;\n    }\n\n    // Show the UI...\n    let onComplete: (folderId: string) => void;\n    let storedResults: Data.Match[];\n\n    if (/dialog\\.html(\\?.*)?$/i.test(window.location.pathname)) {\n        // When we finish moving the items, we want to dismiss the dialog and complete the callback\n        onComplete = (folderId: string) => {\n            Office.context.ui.messageParent(folderId);\n        };\n\n        storedResults = JSON.parse(window.localStorage.getItem(storageKey)) as Data.Match[];\n    }\n\n    ReactDOM.render(\n        <ConversationFiler mailbox={mailbox} onComplete={onComplete} storedResults={storedResults} />,\n        document.getElementById(\"conversationFilerRoot\")\n    );\n\n    // ...and if we're running outside of an Outlook client, run through the tests\n    if (!mailbox && !storedResults) {\n        let testEmpty = function () {\n            console.log(\"Testing the behavior with an empty set of matches...\");\n\n            // Need to clear out the DOM so it will mount a new ConversationFiler\n            ReactDOM.render(\n                <div>Testing...</div>,\n                document.getElementById(\"conversationFilerRoot\")\n            );\n\n            ReactDOM.render(\n                <ConversationFiler mailbox={null} storedResults={[]} />,\n                document.getElementById(\"conversationFilerRoot\")\n            );\n\n            window.setTimeout(testDummy, 3000);\n        }\n\n        let testDummy = function () {\n            console.log(\"Testing the behavior with a set of mock matches...\");\n\n            // Need to clear out the DOM so it will mount a new ConversationFiler\n            ReactDOM.render(\n                <div>Testing...</div>,\n                document.getElementById(\"conversationFilerRoot\")\n            );\n\n            const dummyResults: Data.Match[] = [{\n                    folder: {\n                        Id: 'folderId1',\n                        DisplayName: 'Folder 1'\n                    },\n                    message: {\n                        Id: 'messageId1',\n                        BodyPreview: 'Here\\'s a preview of a message body',\n                        Sender: 'Foo Bar',\n                        ToRecipients: 'Baz Bar',\n                        ParentFolderId: 'folderId1'\n                    }\n                }, {\n                    folder: {\n                        Id: 'folderId2',\n                        DisplayName: 'Folder 2'\n                    },\n                    message: {\n                        Id: 'messageId2',\n                        BodyPreview: 'Here\\'s another message body',\n                        Sender: 'Baz Bar',\n                        ToRecipients: 'Foo Bar',\n                        ParentFolderId: 'folderId2'\n                    }\n                }];\n\n            ReactDOM.render(\n                <ConversationFiler mailbox={null} storedResults={dummyResults} />,\n                document.getElementById(\"conversationFilerRoot\")\n            );\n        }\n\n        window.setTimeout(testEmpty, 3000);\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx"],"sourceRoot":""}